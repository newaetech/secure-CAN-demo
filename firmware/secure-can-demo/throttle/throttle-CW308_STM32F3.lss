
throttle/throttle-CW308_STM32F3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005964  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08005aec  08005aec  00015aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b14  08005b14  00020464  2**0
                  CONTENTS
  4 .ARM          00000000  08005b14  08005b14  00020464  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b14  08005b14  00020464  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005b14  08005b14  00015b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b1c  08005b1c  00015b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000464  20000000  08005b20  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000252c  20000464  08005f84  00020464  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20002990  08005f84  00022990  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020464  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c575  00000000  00000000  00020494  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001582  00000000  00000000  0002ca09  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000275a  00000000  00000000  0002df8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000004b8  00000000  00000000  000306e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000428  00000000  00000000  00030b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003ee8  00000000  00000000  00030fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00002aea  00000000  00000000  00034ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007e  00000000  00000000  00037997  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000179c  00000000  00000000  00037a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000144  00000000  00000000  000391b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000050  00000000  00000000  000392f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000464 	.word	0x20000464
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005ad4 	.word	0x08005ad4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000468 	.word	0x20000468
 80001c4:	08005ad4 	.word	0x08005ad4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2uiz>:
 8000a74:	004a      	lsls	r2, r1, #1
 8000a76:	d211      	bcs.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d211      	bcs.n	8000aa2 <__aeabi_d2uiz+0x2e>
 8000a7e:	d50d      	bpl.n	8000a9c <__aeabi_d2uiz+0x28>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d40e      	bmi.n	8000aa8 <__aeabi_d2uiz+0x34>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d102      	bne.n	8000aae <__aeabi_d2uiz+0x3a>
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aac:	4770      	bx	lr
 8000aae:	f04f 0000 	mov.w	r0, #0
 8000ab2:	4770      	bx	lr

08000ab4 <memcpy>:
 8000ab4:	4684      	mov	ip, r0
 8000ab6:	ea41 0300 	orr.w	r3, r1, r0
 8000aba:	f013 0303 	ands.w	r3, r3, #3
 8000abe:	d16d      	bne.n	8000b9c <memcpy+0xe8>
 8000ac0:	3a40      	subs	r2, #64	; 0x40
 8000ac2:	d341      	bcc.n	8000b48 <memcpy+0x94>
 8000ac4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ac8:	f840 3b04 	str.w	r3, [r0], #4
 8000acc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ad0:	f840 3b04 	str.w	r3, [r0], #4
 8000ad4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ad8:	f840 3b04 	str.w	r3, [r0], #4
 8000adc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ae0:	f840 3b04 	str.w	r3, [r0], #4
 8000ae4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ae8:	f840 3b04 	str.w	r3, [r0], #4
 8000aec:	f851 3b04 	ldr.w	r3, [r1], #4
 8000af0:	f840 3b04 	str.w	r3, [r0], #4
 8000af4:	f851 3b04 	ldr.w	r3, [r1], #4
 8000af8:	f840 3b04 	str.w	r3, [r0], #4
 8000afc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b00:	f840 3b04 	str.w	r3, [r0], #4
 8000b04:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b08:	f840 3b04 	str.w	r3, [r0], #4
 8000b0c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b10:	f840 3b04 	str.w	r3, [r0], #4
 8000b14:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b18:	f840 3b04 	str.w	r3, [r0], #4
 8000b1c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b20:	f840 3b04 	str.w	r3, [r0], #4
 8000b24:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b28:	f840 3b04 	str.w	r3, [r0], #4
 8000b2c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b30:	f840 3b04 	str.w	r3, [r0], #4
 8000b34:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b38:	f840 3b04 	str.w	r3, [r0], #4
 8000b3c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b40:	f840 3b04 	str.w	r3, [r0], #4
 8000b44:	3a40      	subs	r2, #64	; 0x40
 8000b46:	d2bd      	bcs.n	8000ac4 <memcpy+0x10>
 8000b48:	3230      	adds	r2, #48	; 0x30
 8000b4a:	d311      	bcc.n	8000b70 <memcpy+0xbc>
 8000b4c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b50:	f840 3b04 	str.w	r3, [r0], #4
 8000b54:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b58:	f840 3b04 	str.w	r3, [r0], #4
 8000b5c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b60:	f840 3b04 	str.w	r3, [r0], #4
 8000b64:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b68:	f840 3b04 	str.w	r3, [r0], #4
 8000b6c:	3a10      	subs	r2, #16
 8000b6e:	d2ed      	bcs.n	8000b4c <memcpy+0x98>
 8000b70:	320c      	adds	r2, #12
 8000b72:	d305      	bcc.n	8000b80 <memcpy+0xcc>
 8000b74:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b78:	f840 3b04 	str.w	r3, [r0], #4
 8000b7c:	3a04      	subs	r2, #4
 8000b7e:	d2f9      	bcs.n	8000b74 <memcpy+0xc0>
 8000b80:	3204      	adds	r2, #4
 8000b82:	d008      	beq.n	8000b96 <memcpy+0xe2>
 8000b84:	07d2      	lsls	r2, r2, #31
 8000b86:	bf1c      	itt	ne
 8000b88:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000b8c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000b90:	d301      	bcc.n	8000b96 <memcpy+0xe2>
 8000b92:	880b      	ldrh	r3, [r1, #0]
 8000b94:	8003      	strh	r3, [r0, #0]
 8000b96:	4660      	mov	r0, ip
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	2a08      	cmp	r2, #8
 8000b9e:	d313      	bcc.n	8000bc8 <memcpy+0x114>
 8000ba0:	078b      	lsls	r3, r1, #30
 8000ba2:	d08d      	beq.n	8000ac0 <memcpy+0xc>
 8000ba4:	f010 0303 	ands.w	r3, r0, #3
 8000ba8:	d08a      	beq.n	8000ac0 <memcpy+0xc>
 8000baa:	f1c3 0304 	rsb	r3, r3, #4
 8000bae:	1ad2      	subs	r2, r2, r3
 8000bb0:	07db      	lsls	r3, r3, #31
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000bb8:	f800 3b01 	strbne.w	r3, [r0], #1
 8000bbc:	d380      	bcc.n	8000ac0 <memcpy+0xc>
 8000bbe:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000bc2:	f820 3b02 	strh.w	r3, [r0], #2
 8000bc6:	e77b      	b.n	8000ac0 <memcpy+0xc>
 8000bc8:	3a04      	subs	r2, #4
 8000bca:	d3d9      	bcc.n	8000b80 <memcpy+0xcc>
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bd2:	f800 3b01 	strb.w	r3, [r0], #1
 8000bd6:	d2f9      	bcs.n	8000bcc <memcpy+0x118>
 8000bd8:	780b      	ldrb	r3, [r1, #0]
 8000bda:	7003      	strb	r3, [r0, #0]
 8000bdc:	784b      	ldrb	r3, [r1, #1]
 8000bde:	7043      	strb	r3, [r0, #1]
 8000be0:	788b      	ldrb	r3, [r1, #2]
 8000be2:	7083      	strb	r3, [r0, #2]
 8000be4:	4660      	mov	r0, ip
 8000be6:	4770      	bx	lr

08000be8 <send_can_packet>:
{
}

//sends the info in packet over the CAN bus
void send_can_packet(seccan_packet *packet)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	int rval = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
	if (rval = write_can(packet->ext_id, packet->payload, 8), rval < 0) {
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6818      	ldr	r0, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3304      	adds	r3, #4
 8000bfc:	2208      	movs	r2, #8
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f002 f826 	bl	8002c50 <write_can>
 8000c04:	60f8      	str	r0, [r7, #12]
	}
}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <setup>:
		}
	}
}

void setup(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
	platform_init();
 8000c12:	f000 f97d 	bl	8000f10 <platform_init>
	init_uart();
 8000c16:	f000 f9a1 	bl	8000f5c <init_uart>
	init_can();
 8000c1a:	f001 ff75 	bl	8002b08 <init_can>

	trigger_setup();
 8000c1e:	f000 f9ed 	bl	8000ffc <trigger_setup>
	aes_indep_init();
 8000c22:	f003 fc87 	bl	8004534 <aes_indep_init>
	
#ifndef STM_ADC
	init_pwm();
#endif
#ifdef STM_ADC
	init_adc();
 8000c26:	f002 f881 	bl	8002d2c <init_adc>
#endif
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	0000      	movs	r0, r0

08000c30 <adc_stm_loop>:
	}
}

//loop for the ADC STM32
void adc_stm_loop(void)
{
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b08b      	sub	sp, #44	; 0x2c
 8000c34:	af00      	add	r7, sp, #0
	int adcerr;
	can_input my_data = {
 8000c36:	4a48      	ldr	r2, [pc, #288]	; (8000d58 <adc_stm_loop+0x128>)
 8000c38:	f107 0318 	add.w	r3, r7, #24
 8000c3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	seccan_packet packet;

	while(1) {
		//packet all good, so start doing adc
		uint16_t adc_value = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	817b      	strh	r3, [r7, #10]
		if (adcerr = read_adc(&adc_value), adcerr == 0) {
 8000c46:	f107 030a 	add.w	r3, r7, #10
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 f8fe 	bl	8002e4c <read_adc>
 8000c50:	6278      	str	r0, [r7, #36]	; 0x24
 8000c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f4      	bne.n	8000c42 <adc_stm_loop+0x12>
			for (volatile unsigned int i = 0; i < 5000; i++);
 8000c58:	2300      	movs	r3, #0
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	e002      	b.n	8000c64 <adc_stm_loop+0x34>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3301      	adds	r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d9f7      	bls.n	8000c5e <adc_stm_loop+0x2e>
			if (adc_value < ADC_MIN) 
 8000c6e:	897b      	ldrh	r3, [r7, #10]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fbfb 	bl	800046c <__aeabi_i2d>
 8000c76:	a332      	add	r3, pc, #200	; (adr r3, 8000d40 <adc_stm_loop+0x110>)
 8000c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c7c:	f7ff fed2 	bl	8000a24 <__aeabi_dcmplt>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d002      	beq.n	8000c8c <adc_stm_loop+0x5c>
                adc_value = ADC_MIN;
 8000c86:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8000c8a:	817b      	strh	r3, [r7, #10]
            
            if (adc_value > ADC_MAX) 
 8000c8c:	897b      	ldrh	r3, [r7, #10]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fbec 	bl	800046c <__aeabi_i2d>
 8000c94:	a32c      	add	r3, pc, #176	; (adr r3, 8000d48 <adc_stm_loop+0x118>)
 8000c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c9a:	f7ff fee1 	bl	8000a60 <__aeabi_dcmpgt>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d002      	beq.n	8000caa <adc_stm_loop+0x7a>
                adc_value = ADC_MAX;
 8000ca4:	f640 5392 	movw	r3, #3474	; 0xd92
 8000ca8:	817b      	strh	r3, [r7, #10]

			adc_value = (adc_value - ADC_MIN)/2750.*4096.;
 8000caa:	897b      	ldrh	r3, [r7, #10]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fbdd 	bl	800046c <__aeabi_i2d>
 8000cb2:	a323      	add	r3, pc, #140	; (adr r3, 8000d40 <adc_stm_loop+0x110>)
 8000cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb8:	f7ff fa8a 	bl	80001d0 <__aeabi_dsub>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	4621      	mov	r1, r4
 8000cc4:	a322      	add	r3, pc, #136	; (adr r3, 8000d50 <adc_stm_loop+0x120>)
 8000cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cca:	f7ff fd63 	bl	8000794 <__aeabi_ddiv>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	460c      	mov	r4, r1
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	4621      	mov	r1, r4
 8000cd6:	f04f 0200 	mov.w	r2, #0
 8000cda:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <adc_stm_loop+0x12c>)
 8000cdc:	f7ff fc30 	bl	8000540 <__aeabi_dmul>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	460c      	mov	r4, r1
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	f7ff fec4 	bl	8000a74 <__aeabi_d2uiz>
 8000cec:	4603      	mov	r3, r0
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	817b      	strh	r3, [r7, #10]
            if (adc_value > 4095)
 8000cf2:	897b      	ldrh	r3, [r7, #10]
 8000cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cf8:	d302      	bcc.n	8000d00 <adc_stm_loop+0xd0>
                adc_value = 4095;
 8000cfa:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000cfe:	817b      	strh	r3, [r7, #10]

			my_data.data[0] = (adc_value) & 0xFF;
 8000d00:	897b      	ldrh	r3, [r7, #10]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	f887 3020 	strb.w	r3, [r7, #32]
			my_data.data[1] = (adc_value >> 8);
 8000d08:	897b      	ldrh	r3, [r7, #10]
 8000d0a:	0a1b      	lsrs	r3, r3, #8
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

			encrypt_can_packet(&packet, &my_data);
 8000d14:	f107 0218 	add.w	r2, r7, #24
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	4611      	mov	r1, r2
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f828 	bl	8000d74 <encrypt_can_packet>
			send_can_packet(&packet);
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff5d 	bl	8000be8 <send_can_packet>

			my_data.msgnum++;
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	3301      	adds	r3, #1
 8000d32:	61bb      	str	r3, [r7, #24]
			my_data.msgnum &= 0x3FFFF; //prevent overflow
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8000d3a:	61bb      	str	r3, [r7, #24]
	while(1) {
 8000d3c:	e781      	b.n	8000c42 <adc_stm_loop+0x12>
 8000d3e:	bf00      	nop
 8000d40:	e8ba2e8c 	.word	0xe8ba2e8c
 8000d44:	408363a2 	.word	0x408363a2
 8000d48:	45d1745d 	.word	0x45d1745d
 8000d4c:	40ab2517 	.word	0x40ab2517
 8000d50:	00000000 	.word	0x00000000
 8000d54:	40a57c00 	.word	0x40a57c00
 8000d58:	08005aec 	.word	0x08005aec
 8000d5c:	40b00000 	.word	0x40b00000

08000d60 <main>:
		}

	}
}

int main(void) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	setup();
 8000d64:	f7ff ff53 	bl	8000c0e <setup>
#ifdef STM_ADC
	adc_stm_loop();
 8000d68:	f7ff ff62 	bl	8000c30 <adc_stm_loop>
 8000d6c:	2300      	movs	r3, #0
#else
	master_stm_loop();
#endif
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	0000      	movs	r0, r0

08000d74 <encrypt_can_packet>:
uint8_t Kauth[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
uint8_t IV[] = {0x01, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF};

//encrypts the data in in and puts the finished product in out
void encrypt_can_packet(seccan_packet *out, can_input *in)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	; 0x30
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
	uint8_t nonce_enc[16] = {0};
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
	uint8_t nonce_auth[16] = {0};
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]

	nonce_enc[0] = (in->msgnum >> 16) & 0xFF;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	0c1b      	lsrs	r3, r3, #16
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	773b      	strb	r3, [r7, #28]
	nonce_enc[1] = (in->msgnum >> 8) & 0xFF;
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	777b      	strb	r3, [r7, #29]
	nonce_enc[2] = in->msgnum & 0xFF;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	77bb      	strb	r3, [r7, #30]
	nonce_enc[3] = (in->baseid >> 8) & 0xFF;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	0a1b      	lsrs	r3, r3, #8
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	77fb      	strb	r3, [r7, #31]
	nonce_enc[4] = (in->baseid & 0xFF);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	f887 3020 	strb.w	r3, [r7, #32]

	memcpy(nonce_auth, nonce_enc, 5); //copy nonce over to enc
 8000dca:	f107 011c 	add.w	r1, r7, #28
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	2205      	movs	r2, #5
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fe6d 	bl	8000ab4 <memcpy>
	//nonce_enc all done
	memcpy(nonce_auth + 12, in->data, 4); //copy data over
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	330c      	adds	r3, #12
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	3208      	adds	r2, #8
 8000de4:	6812      	ldr	r2, [r2, #0]
 8000de6:	601a      	str	r2, [r3, #0]

	//do XORing with IV for auth
	int i = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (i = 0; i < 16; i++) {
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000df0:	e013      	b.n	8000e1a <encrypt_can_packet+0xa6>
		nonce_auth[i] ^= IV[i];
 8000df2:	f107 020c 	add.w	r2, r7, #12
 8000df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df8:	4413      	add	r3, r2
 8000dfa:	781a      	ldrb	r2, [r3, #0]
 8000dfc:	4940      	ldr	r1, [pc, #256]	; (8000f00 <encrypt_can_packet+0x18c>)
 8000dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e00:	440b      	add	r3, r1
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4053      	eors	r3, r2
 8000e06:	b2d9      	uxtb	r1, r3
 8000e08:	f107 020c 	add.w	r2, r7, #12
 8000e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e0e:	4413      	add	r3, r2
 8000e10:	460a      	mov	r2, r1
 8000e12:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 16; i++) {
 8000e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e16:	3301      	adds	r3, #1
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	dde8      	ble.n	8000df2 <encrypt_can_packet+0x7e>
	}

	trigger_high();
 8000e20:	f000 f918 	bl	8001054 <trigger_high>
	aes_indep_key(Kenc);
 8000e24:	4837      	ldr	r0, [pc, #220]	; (8000f04 <encrypt_can_packet+0x190>)
 8000e26:	f003 fb8f 	bl	8004548 <aes_indep_key>
	aes_indep_enc(nonce_enc);
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f003 fb9a 	bl	8004568 <aes_indep_enc>

	aes_indep_key(Kauth);
 8000e34:	4834      	ldr	r0, [pc, #208]	; (8000f08 <encrypt_can_packet+0x194>)
 8000e36:	f003 fb87 	bl	8004548 <aes_indep_key>
	aes_indep_enc(nonce_auth);
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f003 fb92 	bl	8004568 <aes_indep_enc>
	trigger_low();
 8000e44:	f000 f911 	bl	800106a <trigger_low>

	for (i = 8; i < 12; i++) {
 8000e48:	2308      	movs	r3, #8
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e4c:	e014      	b.n	8000e78 <encrypt_can_packet+0x104>
		nonce_enc[i] ^= in->data[i - 8];
 8000e4e:	f107 021c 	add.w	r2, r7, #28
 8000e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e54:	4413      	add	r3, r2
 8000e56:	781a      	ldrb	r2, [r3, #0]
 8000e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e5a:	3b08      	subs	r3, #8
 8000e5c:	6839      	ldr	r1, [r7, #0]
 8000e5e:	440b      	add	r3, r1
 8000e60:	7a1b      	ldrb	r3, [r3, #8]
 8000e62:	4053      	eors	r3, r2
 8000e64:	b2d9      	uxtb	r1, r3
 8000e66:	f107 021c 	add.w	r2, r7, #28
 8000e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e6c:	4413      	add	r3, r2
 8000e6e:	460a      	mov	r2, r1
 8000e70:	701a      	strb	r2, [r3, #0]
	for (i = 8; i < 12; i++) {
 8000e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e74:	3301      	adds	r3, #1
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e7a:	2b0b      	cmp	r3, #11
 8000e7c:	dde7      	ble.n	8000e4e <encrypt_can_packet+0xda>
	}
	for (i = 0; i < 4; i++) {
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e82:	e017      	b.n	8000eb4 <encrypt_can_packet+0x140>
		nonce_enc[i + 12] ^= nonce_auth[i];
 8000e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e86:	330c      	adds	r3, #12
 8000e88:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000e8c:	4413      	add	r3, r2
 8000e8e:	f813 1c14 	ldrb.w	r1, [r3, #-20]
 8000e92:	f107 020c 	add.w	r2, r7, #12
 8000e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e98:	4413      	add	r3, r2
 8000e9a:	781a      	ldrb	r2, [r3, #0]
 8000e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e9e:	330c      	adds	r3, #12
 8000ea0:	404a      	eors	r2, r1
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000ea8:	440b      	add	r3, r1
 8000eaa:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 4; i++) {
 8000eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	dde4      	ble.n	8000e84 <encrypt_can_packet+0x110>
	}

	out->ext_id = (in->baseid) & 0x7FF;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	601a      	str	r2, [r3, #0]
	out->ext_id |= ((uint32_t)in->msgnum << 11) & 0x1FFFF800;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	02d9      	lsls	r1, r3, #11
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <encrypt_can_packet+0x198>)
 8000ed2:	400b      	ands	r3, r1
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	601a      	str	r2, [r3, #0]
	out->ext_id &= 0x1FFFFFFF;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	601a      	str	r2, [r3, #0]
	memcpy(out->payload, nonce_enc + 8, 8);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	1d18      	adds	r0, r3, #4
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	3308      	adds	r3, #8
 8000ef0:	2208      	movs	r2, #8
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	f7ff fdde 	bl	8000ab4 <memcpy>
}
 8000ef8:	bf00      	nop
 8000efa:	3730      	adds	r7, #48	; 0x30
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000020 	.word	0x20000020
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000010 	.word	0x20000010
 8000f0c:	1ffff800 	.word	0x1ffff800

08000f10 <platform_init>:

UART_HandleTypeDef UartHandle;


void platform_init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b090      	sub	sp, #64	; 0x40
 8000f14:	af00      	add	r7, sp, #0
	//HAL_Init();

	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 8000f16:	2303      	movs	r3, #3
 8000f18:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 8000f1a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f1e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState       = RCC_HSI_OFF;
 8000f20:	2300      	movs	r3, #0
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLL_NONE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f8cd 	bl	80010cc <HAL_RCC_OscConfig>

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000f32:	230f      	movs	r3, #15
 8000f34:	603b      	str	r3, [r7, #0]
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8000f36:	2301      	movs	r3, #1
 8000f38:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
	uint32_t flash_latency = 5;
 8000f46:	2305      	movs	r3, #5
 8000f48:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, flash_latency);
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 ffa6 	bl	8001ea0 <HAL_RCC_ClockConfig>
}
 8000f54:	bf00      	nop
 8000f56:	3740      	adds	r7, #64	; 0x40
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <init_uart>:

void init_uart(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b088      	sub	sp, #32
 8000f60:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8000f62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f66:	60fb      	str	r3, [r7, #12]
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	613b      	str	r3, [r7, #16]
	GpioInit.Pull      = GPIO_PULLUP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	61bb      	str	r3, [r7, #24]
	GpioInit.Alternate = GPIO_AF7_USART1;
 8000f74:	2307      	movs	r3, #7
 8000f76:	61fb      	str	r3, [r7, #28]
	__GPIOA_CLK_ENABLE();
 8000f78:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <init_uart+0x94>)
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <init_uart+0x94>)
 8000f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f82:	6153      	str	r3, [r2, #20]
 8000f84:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <init_uart+0x94>)
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	4619      	mov	r1, r3
 8000f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9a:	f001 f927 	bl	80021ec <HAL_GPIO_Init>

	UartHandle.Instance        = USART1;
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <init_uart+0x98>)
 8000fa0:	4a15      	ldr	r2, [pc, #84]	; (8000ff8 <init_uart+0x9c>)
 8000fa2:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate   = 38400;
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <init_uart+0x98>)
 8000fa6:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000faa:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <init_uart+0x98>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <init_uart+0x98>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <init_uart+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <init_uart+0x98>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <init_uart+0x98>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
	__USART1_CLK_ENABLE();
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <init_uart+0x94>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	4a08      	ldr	r2, [pc, #32]	; (8000ff0 <init_uart+0x94>)
 8000fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd4:	6193      	str	r3, [r2, #24]
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <init_uart+0x94>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]
	HAL_UART_Init(&UartHandle);
 8000fe2:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <init_uart+0x98>)
 8000fe4:	f001 fcdf 	bl	80029a6 <HAL_UART_Init>
}
 8000fe8:	bf00      	nop
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	200027e4 	.word	0x200027e4
 8000ff8:	40013800 	.word	0x40013800

08000ffc <trigger_setup>:

void trigger_setup(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <trigger_setup+0x54>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <trigger_setup+0x54>)
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	6153      	str	r3, [r2, #20]
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <trigger_setup+0x54>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
	
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_12;
 800101a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101e:	607b      	str	r3, [r7, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8001020:	2301      	movs	r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001034:	f001 f8da 	bl	80021ec <HAL_GPIO_Init>
	
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800103e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001042:	f001 fa51 	bl	80024e8 <HAL_GPIO_WritePin>
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000

08001054 <trigger_high>:

void trigger_high(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800105e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001062:	f001 fa41 	bl	80024e8 <HAL_GPIO_WritePin>
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}

0800106a <trigger_low>:

void trigger_low(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001078:	f001 fa36 	bl	80024e8 <HAL_GPIO_WritePin>
}   
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_GetTick>:
{
	hal_sys_tick = 0;
	return HAL_OK;
}
uint32_t HAL_GetTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
	return hal_sys_tick++;
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <HAL_GetTick+0x18>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	4903      	ldr	r1, [pc, #12]	; (8001098 <HAL_GetTick+0x18>)
 800108c:	600a      	str	r2, [r1, #0]
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	20000480 	.word	0x20000480

0800109c <HAL_RCC_GetSysClockFreq>:

#define UART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
                                     USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8)) /*!< UART or USART CR1 fields of parameters set by UART_SetConfig API */

uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <HAL_RCC_GetSysClockFreq+0x14>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000030 	.word	0x20000030

080010b4 <HAL_RCC_GetPCLK1Freq>:

uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000030 	.word	0x20000030

080010cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 80010d8:	2300      	movs	r3, #0
 80010da:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 816e 	beq.w	80013ca <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010ee:	4bb5      	ldr	r3, [pc, #724]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 030c 	and.w	r3, r3, #12
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d00c      	beq.n	8001114 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010fa:	4bb2      	ldr	r3, [pc, #712]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f003 030c 	and.w	r3, r3, #12
 8001102:	2b08      	cmp	r3, #8
 8001104:	d15a      	bne.n	80011bc <HAL_RCC_OscConfig+0xf0>
 8001106:	4baf      	ldr	r3, [pc, #700]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800110e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001112:	d153      	bne.n	80011bc <HAL_RCC_OscConfig+0xf0>
 8001114:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001118:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001120:	fa93 f3a3 	rbit	r3, r3
 8001124:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001128:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112c:	fab3 f383 	clz	r3, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	095b      	lsrs	r3, r3, #5
 8001134:	b2db      	uxtb	r3, r3
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d102      	bne.n	8001146 <HAL_RCC_OscConfig+0x7a>
 8001140:	4ba0      	ldr	r3, [pc, #640]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	e015      	b.n	8001172 <HAL_RCC_OscConfig+0xa6>
 8001146:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800114a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001152:	fa93 f3a3 	rbit	r3, r3
 8001156:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800115a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800115e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001162:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001166:	fa93 f3a3 	rbit	r3, r3
 800116a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800116e:	4b95      	ldr	r3, [pc, #596]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 8001170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001172:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001176:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800117a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800117e:	fa92 f2a2 	rbit	r2, r2
 8001182:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8001186:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800118a:	fab2 f282 	clz	r2, r2
 800118e:	b252      	sxtb	r2, r2
 8001190:	f042 0220 	orr.w	r2, r2, #32
 8001194:	b252      	sxtb	r2, r2
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	f002 021f 	and.w	r2, r2, #31
 800119c:	2101      	movs	r1, #1
 800119e:	fa01 f202 	lsl.w	r2, r1, r2
 80011a2:	4013      	ands	r3, r2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	f000 810f 	beq.w	80013c8 <HAL_RCC_OscConfig+0x2fc>
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f040 8109 	bne.w	80013c8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	f000 be6b 	b.w	8001e92 <HAL_RCC_OscConfig+0xdc6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c6:	d106      	bne.n	80011d6 <HAL_RCC_OscConfig+0x10a>
 80011c8:	4b7e      	ldr	r3, [pc, #504]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a7d      	ldr	r2, [pc, #500]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 80011ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	e030      	b.n	8001238 <HAL_RCC_OscConfig+0x16c>
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d10c      	bne.n	80011fa <HAL_RCC_OscConfig+0x12e>
 80011e0:	4b78      	ldr	r3, [pc, #480]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a77      	ldr	r2, [pc, #476]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 80011e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4b75      	ldr	r3, [pc, #468]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a74      	ldr	r2, [pc, #464]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 80011f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	e01e      	b.n	8001238 <HAL_RCC_OscConfig+0x16c>
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001204:	d10c      	bne.n	8001220 <HAL_RCC_OscConfig+0x154>
 8001206:	4b6f      	ldr	r3, [pc, #444]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a6e      	ldr	r2, [pc, #440]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 800120c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	4b6c      	ldr	r3, [pc, #432]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a6b      	ldr	r2, [pc, #428]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 8001218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e00b      	b.n	8001238 <HAL_RCC_OscConfig+0x16c>
 8001220:	4b68      	ldr	r3, [pc, #416]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a67      	ldr	r2, [pc, #412]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 8001226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b65      	ldr	r3, [pc, #404]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a64      	ldr	r2, [pc, #400]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 8001232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001236:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001238:	4b62      	ldr	r3, [pc, #392]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 800123a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123c:	f023 020f 	bic.w	r2, r3, #15
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	495f      	ldr	r1, [pc, #380]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 8001248:	4313      	orrs	r3, r2
 800124a:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d05a      	beq.n	800130c <HAL_RCC_OscConfig+0x240>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001256:	f7ff ff13 	bl	8001080 <HAL_GetTick>
 800125a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	e00a      	b.n	8001276 <HAL_RCC_OscConfig+0x1aa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001260:	f7ff ff0e 	bl	8001080 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	2b64      	cmp	r3, #100	; 0x64
 800126e:	d902      	bls.n	8001276 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001270:	2303      	movs	r3, #3
 8001272:	f000 be0e 	b.w	8001e92 <HAL_RCC_OscConfig+0xdc6>
 8001276:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800127a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001282:	fa93 f3a3 	rbit	r3, r3
 8001286:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 800128a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	fab3 f383 	clz	r3, r3
 8001292:	b2db      	uxtb	r3, r3
 8001294:	095b      	lsrs	r3, r3, #5
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d102      	bne.n	80012a8 <HAL_RCC_OscConfig+0x1dc>
 80012a2:	4b48      	ldr	r3, [pc, #288]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	e015      	b.n	80012d4 <HAL_RCC_OscConfig+0x208>
 80012a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ac:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80012bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012c0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80012c4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80012c8:	fa93 f3a3 	rbit	r3, r3
 80012cc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80012d0:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012d8:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80012dc:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80012e0:	fa92 f2a2 	rbit	r2, r2
 80012e4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 80012e8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80012ec:	fab2 f282 	clz	r2, r2
 80012f0:	b252      	sxtb	r2, r2
 80012f2:	f042 0220 	orr.w	r2, r2, #32
 80012f6:	b252      	sxtb	r2, r2
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	f002 021f 	and.w	r2, r2, #31
 80012fe:	2101      	movs	r1, #1
 8001300:	fa01 f202 	lsl.w	r2, r1, r2
 8001304:	4013      	ands	r3, r2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0aa      	beq.n	8001260 <HAL_RCC_OscConfig+0x194>
 800130a:	e05e      	b.n	80013ca <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff feb8 	bl	8001080 <HAL_GetTick>
 8001310:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001314:	e00a      	b.n	800132c <HAL_RCC_OscConfig+0x260>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001316:	f7ff feb3 	bl	8001080 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b64      	cmp	r3, #100	; 0x64
 8001324:	d902      	bls.n	800132c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	f000 bdb3 	b.w	8001e92 <HAL_RCC_OscConfig+0xdc6>
 800132c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001330:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001338:	fa93 f3a3 	rbit	r3, r3
 800133c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8001340:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001344:	fab3 f383 	clz	r3, r3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	b2db      	uxtb	r3, r3
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b01      	cmp	r3, #1
 8001356:	d102      	bne.n	800135e <HAL_RCC_OscConfig+0x292>
 8001358:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	e015      	b.n	800138a <HAL_RCC_OscConfig+0x2be>
 800135e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001362:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001366:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800136a:	fa93 f3a3 	rbit	r3, r3
 800136e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001372:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001376:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800137a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800137e:	fa93 f3a3 	rbit	r3, r3
 8001382:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_RCC_OscConfig+0x2f8>)
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800138e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001392:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001396:	fa92 f2a2 	rbit	r2, r2
 800139a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 800139e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80013a2:	fab2 f282 	clz	r2, r2
 80013a6:	b252      	sxtb	r2, r2
 80013a8:	f042 0220 	orr.w	r2, r2, #32
 80013ac:	b252      	sxtb	r2, r2
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	f002 021f 	and.w	r2, r2, #31
 80013b4:	2101      	movs	r1, #1
 80013b6:	fa01 f202 	lsl.w	r2, r1, r2
 80013ba:	4013      	ands	r3, r2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1aa      	bne.n	8001316 <HAL_RCC_OscConfig+0x24a>
 80013c0:	e003      	b.n	80013ca <HAL_RCC_OscConfig+0x2fe>
 80013c2:	bf00      	nop
 80013c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 8170 	beq.w	80016ba <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013da:	4bd0      	ldr	r3, [pc, #832]	; (800171c <HAL_RCC_OscConfig+0x650>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013e6:	4bcd      	ldr	r3, [pc, #820]	; (800171c <HAL_RCC_OscConfig+0x650>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d16d      	bne.n	80014ce <HAL_RCC_OscConfig+0x402>
 80013f2:	4bca      	ldr	r3, [pc, #808]	; (800171c <HAL_RCC_OscConfig+0x650>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d167      	bne.n	80014ce <HAL_RCC_OscConfig+0x402>
 80013fe:	2302      	movs	r3, #2
 8001400:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001404:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001408:	fa93 f3a3 	rbit	r3, r3
 800140c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8001410:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001414:	fab3 f383 	clz	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	095b      	lsrs	r3, r3, #5
 800141c:	b2db      	uxtb	r3, r3
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b01      	cmp	r3, #1
 8001426:	d102      	bne.n	800142e <HAL_RCC_OscConfig+0x362>
 8001428:	4bbc      	ldr	r3, [pc, #752]	; (800171c <HAL_RCC_OscConfig+0x650>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	e013      	b.n	8001456 <HAL_RCC_OscConfig+0x38a>
 800142e:	2302      	movs	r3, #2
 8001430:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001434:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001438:	fa93 f3a3 	rbit	r3, r3
 800143c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001440:	2302      	movs	r3, #2
 8001442:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001446:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800144a:	fa93 f3a3 	rbit	r3, r3
 800144e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001452:	4bb2      	ldr	r3, [pc, #712]	; (800171c <HAL_RCC_OscConfig+0x650>)
 8001454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001456:	2202      	movs	r2, #2
 8001458:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800145c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001460:	fa92 f2a2 	rbit	r2, r2
 8001464:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8001468:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800146c:	fab2 f282 	clz	r2, r2
 8001470:	b252      	sxtb	r2, r2
 8001472:	f042 0220 	orr.w	r2, r2, #32
 8001476:	b252      	sxtb	r2, r2
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	f002 021f 	and.w	r2, r2, #31
 800147e:	2101      	movs	r1, #1
 8001480:	fa01 f202 	lsl.w	r2, r1, r2
 8001484:	4013      	ands	r3, r2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <HAL_RCC_OscConfig+0x3ce>
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d002      	beq.n	800149a <HAL_RCC_OscConfig+0x3ce>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	f000 bcfc 	b.w	8001e92 <HAL_RCC_OscConfig+0xdc6>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149a:	4ba0      	ldr	r3, [pc, #640]	; (800171c <HAL_RCC_OscConfig+0x650>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6959      	ldr	r1, [r3, #20]
 80014a8:	23f8      	movs	r3, #248	; 0xf8
 80014aa:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ae:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80014b2:	fa93 f3a3 	rbit	r3, r3
 80014b6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 80014ba:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80014be:	fab3 f383 	clz	r3, r3
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	4995      	ldr	r1, [pc, #596]	; (800171c <HAL_RCC_OscConfig+0x650>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014cc:	e0f5      	b.n	80016ba <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 8085 	beq.w	80015e4 <HAL_RCC_OscConfig+0x518>
 80014da:	2301      	movs	r3, #1
 80014dc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80014e4:	fa93 f3a3 	rbit	r3, r3
 80014e8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 80014ec:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f0:	fab3 f383 	clz	r3, r3
 80014f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	461a      	mov	r2, r3
 8001500:	2301      	movs	r3, #1
 8001502:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fdbc 	bl	8001080 <HAL_GetTick>
 8001508:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150c:	e00a      	b.n	8001524 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800150e:	f7ff fdb7 	bl	8001080 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d902      	bls.n	8001524 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	f000 bcb7 	b.w	8001e92 <HAL_RCC_OscConfig+0xdc6>
 8001524:	2302      	movs	r3, #2
 8001526:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800152e:	fa93 f3a3 	rbit	r3, r3
 8001532:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8001536:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153a:	fab3 f383 	clz	r3, r3
 800153e:	b2db      	uxtb	r3, r3
 8001540:	095b      	lsrs	r3, r3, #5
 8001542:	b2db      	uxtb	r3, r3
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b01      	cmp	r3, #1
 800154c:	d102      	bne.n	8001554 <HAL_RCC_OscConfig+0x488>
 800154e:	4b73      	ldr	r3, [pc, #460]	; (800171c <HAL_RCC_OscConfig+0x650>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	e013      	b.n	800157c <HAL_RCC_OscConfig+0x4b0>
 8001554:	2302      	movs	r3, #2
 8001556:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800155a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800155e:	fa93 f3a3 	rbit	r3, r3
 8001562:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001566:	2302      	movs	r3, #2
 8001568:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800156c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001570:	fa93 f3a3 	rbit	r3, r3
 8001574:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001578:	4b68      	ldr	r3, [pc, #416]	; (800171c <HAL_RCC_OscConfig+0x650>)
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	2202      	movs	r2, #2
 800157e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001582:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001586:	fa92 f2a2 	rbit	r2, r2
 800158a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 800158e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001592:	fab2 f282 	clz	r2, r2
 8001596:	b252      	sxtb	r2, r2
 8001598:	f042 0220 	orr.w	r2, r2, #32
 800159c:	b252      	sxtb	r2, r2
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	f002 021f 	and.w	r2, r2, #31
 80015a4:	2101      	movs	r1, #1
 80015a6:	fa01 f202 	lsl.w	r2, r1, r2
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0ae      	beq.n	800150e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b0:	4b5a      	ldr	r3, [pc, #360]	; (800171c <HAL_RCC_OscConfig+0x650>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6959      	ldr	r1, [r3, #20]
 80015be:	23f8      	movs	r3, #248	; 0xf8
 80015c0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80015c8:	fa93 f3a3 	rbit	r3, r3
 80015cc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 80015d0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80015d4:	fab3 f383 	clz	r3, r3
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	494f      	ldr	r1, [pc, #316]	; (800171c <HAL_RCC_OscConfig+0x650>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	600b      	str	r3, [r1, #0]
 80015e2:	e06a      	b.n	80016ba <HAL_RCC_OscConfig+0x5ee>
 80015e4:	2301      	movs	r3, #1
 80015e6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ea:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80015ee:	fa93 f3a3 	rbit	r3, r3
 80015f2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 80015f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015fa:	fab3 f383 	clz	r3, r3
 80015fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001602:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	461a      	mov	r2, r3
 800160a:	2300      	movs	r3, #0
 800160c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7ff fd37 	bl	8001080 <HAL_GetTick>
 8001612:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001616:	e00a      	b.n	800162e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001618:	f7ff fd32 	bl	8001080 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d902      	bls.n	800162e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	f000 bc32 	b.w	8001e92 <HAL_RCC_OscConfig+0xdc6>
 800162e:	2302      	movs	r3, #2
 8001630:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001634:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001638:	fa93 f3a3 	rbit	r3, r3
 800163c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8001640:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001644:	fab3 f383 	clz	r3, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	095b      	lsrs	r3, r3, #5
 800164c:	b2db      	uxtb	r3, r3
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d102      	bne.n	800165e <HAL_RCC_OscConfig+0x592>
 8001658:	4b30      	ldr	r3, [pc, #192]	; (800171c <HAL_RCC_OscConfig+0x650>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	e013      	b.n	8001686 <HAL_RCC_OscConfig+0x5ba>
 800165e:	2302      	movs	r3, #2
 8001660:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001664:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001668:	fa93 f3a3 	rbit	r3, r3
 800166c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001670:	2302      	movs	r3, #2
 8001672:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001676:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800167a:	fa93 f3a3 	rbit	r3, r3
 800167e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001682:	4b26      	ldr	r3, [pc, #152]	; (800171c <HAL_RCC_OscConfig+0x650>)
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	2202      	movs	r2, #2
 8001688:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800168c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001690:	fa92 f2a2 	rbit	r2, r2
 8001694:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001698:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800169c:	fab2 f282 	clz	r2, r2
 80016a0:	b252      	sxtb	r2, r2
 80016a2:	f042 0220 	orr.w	r2, r2, #32
 80016a6:	b252      	sxtb	r2, r2
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	f002 021f 	and.w	r2, r2, #31
 80016ae:	2101      	movs	r1, #1
 80016b0:	fa01 f202 	lsl.w	r2, r1, r2
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1ae      	bne.n	8001618 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 80d8 	beq.w	800187a <HAL_RCC_OscConfig+0x7ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d067      	beq.n	80017a4 <HAL_RCC_OscConfig+0x6d8>
 80016d4:	2301      	movs	r3, #1
 80016d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016de:	fa93 f3a3 	rbit	r3, r3
 80016e2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 80016e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ea:	fab3 f383 	clz	r3, r3
 80016ee:	461a      	mov	r2, r3
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_RCC_OscConfig+0x654>)
 80016f2:	4413      	add	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	461a      	mov	r2, r3
 80016f8:	2301      	movs	r3, #1
 80016fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fc:	f7ff fcc0 	bl	8001080 <HAL_GetTick>
 8001700:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001704:	e00e      	b.n	8001724 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001706:	f7ff fcbb 	bl	8001080 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d906      	bls.n	8001724 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e3bb      	b.n	8001e92 <HAL_RCC_OscConfig+0xdc6>
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000
 8001720:	10908120 	.word	0x10908120
 8001724:	2302      	movs	r3, #2
 8001726:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800172a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800172e:	fa93 f3a3 	rbit	r3, r3
 8001732:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001736:	2302      	movs	r3, #2
 8001738:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800173c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001740:	fa93 f2a3 	rbit	r2, r3
 8001744:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800174e:	2202      	movs	r2, #2
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	fa93 f2a3 	rbit	r2, r3
 800175c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001760:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001762:	4ba5      	ldr	r3, [pc, #660]	; (80019f8 <HAL_RCC_OscConfig+0x92c>)
 8001764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001766:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800176a:	2102      	movs	r1, #2
 800176c:	6019      	str	r1, [r3, #0]
 800176e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	fa93 f1a3 	rbit	r1, r3
 8001778:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800177c:	6019      	str	r1, [r3, #0]
  return(result);
 800177e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	fab3 f383 	clz	r3, r3
 8001788:	b25b      	sxtb	r3, r3
 800178a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800178e:	b25b      	sxtb	r3, r3
 8001790:	b2db      	uxtb	r3, r3
 8001792:	f003 031f 	and.w	r3, r3, #31
 8001796:	2101      	movs	r1, #1
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	4013      	ands	r3, r2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0b1      	beq.n	8001706 <HAL_RCC_OscConfig+0x63a>
 80017a2:	e06a      	b.n	800187a <HAL_RCC_OscConfig+0x7ae>
 80017a4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017a8:	2201      	movs	r2, #1
 80017aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	fa93 f2a3 	rbit	r2, r3
 80017b6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80017ba:	601a      	str	r2, [r3, #0]
  return(result);
 80017bc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80017c0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c2:	fab3 f383 	clz	r3, r3
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b8c      	ldr	r3, [pc, #560]	; (80019fc <HAL_RCC_OscConfig+0x930>)
 80017ca:	4413      	add	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	461a      	mov	r2, r3
 80017d0:	2300      	movs	r3, #0
 80017d2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d4:	f7ff fc54 	bl	8001080 <HAL_GetTick>
 80017d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017dc:	e009      	b.n	80017f2 <HAL_RCC_OscConfig+0x726>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017de:	f7ff fc4f 	bl	8001080 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e34f      	b.n	8001e92 <HAL_RCC_OscConfig+0xdc6>
 80017f2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017f6:	2202      	movs	r2, #2
 80017f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	fa93 f2a3 	rbit	r2, r3
 8001804:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800180e:	2202      	movs	r2, #2
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	fa93 f2a3 	rbit	r2, r3
 800181c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001826:	2202      	movs	r2, #2
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	fa93 f2a3 	rbit	r2, r3
 8001834:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001838:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183a:	4b6f      	ldr	r3, [pc, #444]	; (80019f8 <HAL_RCC_OscConfig+0x92c>)
 800183c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800183e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001842:	2102      	movs	r1, #2
 8001844:	6019      	str	r1, [r3, #0]
 8001846:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	fa93 f1a3 	rbit	r1, r3
 8001850:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001854:	6019      	str	r1, [r3, #0]
  return(result);
 8001856:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	fab3 f383 	clz	r3, r3
 8001860:	b25b      	sxtb	r3, r3
 8001862:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001866:	b25b      	sxtb	r3, r3
 8001868:	b2db      	uxtb	r3, r3
 800186a:	f003 031f 	and.w	r3, r3, #31
 800186e:	2101      	movs	r1, #1
 8001870:	fa01 f303 	lsl.w	r3, r1, r3
 8001874:	4013      	ands	r3, r2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1b1      	bne.n	80017de <HAL_RCC_OscConfig+0x712>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 8159 	beq.w	8001b3c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001890:	4b59      	ldr	r3, [pc, #356]	; (80019f8 <HAL_RCC_OscConfig+0x92c>)
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d112      	bne.n	80018c2 <HAL_RCC_OscConfig+0x7f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189c:	4b56      	ldr	r3, [pc, #344]	; (80019f8 <HAL_RCC_OscConfig+0x92c>)
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	4a55      	ldr	r2, [pc, #340]	; (80019f8 <HAL_RCC_OscConfig+0x92c>)
 80018a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a6:	61d3      	str	r3, [r2, #28]
 80018a8:	4b53      	ldr	r3, [pc, #332]	; (80019f8 <HAL_RCC_OscConfig+0x92c>)
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80018bc:	2301      	movs	r3, #1
 80018be:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c2:	4b4f      	ldr	r3, [pc, #316]	; (8001a00 <HAL_RCC_OscConfig+0x934>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d11a      	bne.n	8001904 <HAL_RCC_OscConfig+0x838>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ce:	4b4c      	ldr	r3, [pc, #304]	; (8001a00 <HAL_RCC_OscConfig+0x934>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a4b      	ldr	r2, [pc, #300]	; (8001a00 <HAL_RCC_OscConfig+0x934>)
 80018d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018da:	f7ff fbd1 	bl	8001080 <HAL_GetTick>
 80018de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e2:	e009      	b.n	80018f8 <HAL_RCC_OscConfig+0x82c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e4:	f7ff fbcc 	bl	8001080 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b64      	cmp	r3, #100	; 0x64
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x82c>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e2cc      	b.n	8001e92 <HAL_RCC_OscConfig+0xdc6>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f8:	4b41      	ldr	r3, [pc, #260]	; (8001a00 <HAL_RCC_OscConfig+0x934>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0ef      	beq.n	80018e4 <HAL_RCC_OscConfig+0x818>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d106      	bne.n	800191c <HAL_RCC_OscConfig+0x850>
 800190e:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <HAL_RCC_OscConfig+0x92c>)
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	4a39      	ldr	r2, [pc, #228]	; (80019f8 <HAL_RCC_OscConfig+0x92c>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6213      	str	r3, [r2, #32]
 800191a:	e02f      	b.n	800197c <HAL_RCC_OscConfig+0x8b0>
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0x874>
 8001926:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <HAL_RCC_OscConfig+0x92c>)
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	4a33      	ldr	r2, [pc, #204]	; (80019f8 <HAL_RCC_OscConfig+0x92c>)
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	6213      	str	r3, [r2, #32]
 8001932:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <HAL_RCC_OscConfig+0x92c>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	4a30      	ldr	r2, [pc, #192]	; (80019f8 <HAL_RCC_OscConfig+0x92c>)
 8001938:	f023 0304 	bic.w	r3, r3, #4
 800193c:	6213      	str	r3, [r2, #32]
 800193e:	e01d      	b.n	800197c <HAL_RCC_OscConfig+0x8b0>
 8001940:	1d3b      	adds	r3, r7, #4
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	2b05      	cmp	r3, #5
 8001948:	d10c      	bne.n	8001964 <HAL_RCC_OscConfig+0x898>
 800194a:	4b2b      	ldr	r3, [pc, #172]	; (80019f8 <HAL_RCC_OscConfig+0x92c>)
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	4a2a      	ldr	r2, [pc, #168]	; (80019f8 <HAL_RCC_OscConfig+0x92c>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6213      	str	r3, [r2, #32]
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <HAL_RCC_OscConfig+0x92c>)
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	4a27      	ldr	r2, [pc, #156]	; (80019f8 <HAL_RCC_OscConfig+0x92c>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6213      	str	r3, [r2, #32]
 8001962:	e00b      	b.n	800197c <HAL_RCC_OscConfig+0x8b0>
 8001964:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <HAL_RCC_OscConfig+0x92c>)
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	4a23      	ldr	r2, [pc, #140]	; (80019f8 <HAL_RCC_OscConfig+0x92c>)
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	6213      	str	r3, [r2, #32]
 8001970:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <HAL_RCC_OscConfig+0x92c>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	4a20      	ldr	r2, [pc, #128]	; (80019f8 <HAL_RCC_OscConfig+0x92c>)
 8001976:	f023 0304 	bic.w	r3, r3, #4
 800197a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d06b      	beq.n	8001a5e <HAL_RCC_OscConfig+0x992>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001986:	f7ff fb7b 	bl	8001080 <HAL_GetTick>
 800198a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198e:	e00b      	b.n	80019a8 <HAL_RCC_OscConfig+0x8dc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001990:	f7ff fb76 	bl	8001080 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x8dc>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e274      	b.n	8001e92 <HAL_RCC_OscConfig+0xdc6>
 80019a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019ac:	2202      	movs	r2, #2
 80019ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	fa93 f2a3 	rbit	r2, r3
 80019ba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80019c4:	2202      	movs	r2, #2
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	fa93 f2a3 	rbit	r2, r3
 80019d2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80019d6:	601a      	str	r2, [r3, #0]
  return(result);
 80019d8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80019dc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019de:	fab3 f383 	clz	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	095b      	lsrs	r3, r3, #5
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d108      	bne.n	8001a04 <HAL_RCC_OscConfig+0x938>
 80019f2:	4b01      	ldr	r3, [pc, #4]	; (80019f8 <HAL_RCC_OscConfig+0x92c>)
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	e013      	b.n	8001a20 <HAL_RCC_OscConfig+0x954>
 80019f8:	40021000 	.word	0x40021000
 80019fc:	10908120 	.word	0x10908120
 8001a00:	40007000 	.word	0x40007000
 8001a04:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a08:	2202      	movs	r2, #2
 8001a0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	fa93 f2a3 	rbit	r2, r3
 8001a16:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	4bbb      	ldr	r3, [pc, #748]	; (8001d0c <HAL_RCC_OscConfig+0xc40>)
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001a24:	2102      	movs	r1, #2
 8001a26:	6011      	str	r1, [r2, #0]
 8001a28:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	fa92 f1a2 	rbit	r1, r2
 8001a32:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a36:	6011      	str	r1, [r2, #0]
  return(result);
 8001a38:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	fab2 f282 	clz	r2, r2
 8001a42:	b252      	sxtb	r2, r2
 8001a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a48:	b252      	sxtb	r2, r2
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	f002 021f 	and.w	r2, r2, #31
 8001a50:	2101      	movs	r1, #1
 8001a52:	fa01 f202 	lsl.w	r2, r1, r2
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d099      	beq.n	8001990 <HAL_RCC_OscConfig+0x8c4>
 8001a5c:	e064      	b.n	8001b28 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5e:	f7ff fb0f 	bl	8001080 <HAL_GetTick>
 8001a62:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a66:	e00b      	b.n	8001a80 <HAL_RCC_OscConfig+0x9b4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a68:	f7ff fb0a 	bl	8001080 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x9b4>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e208      	b.n	8001e92 <HAL_RCC_OscConfig+0xdc6>
 8001a80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a84:	2202      	movs	r2, #2
 8001a86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	fa93 f2a3 	rbit	r2, r3
 8001a92:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	fa93 f2a3 	rbit	r2, r3
 8001aaa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001aae:	601a      	str	r2, [r3, #0]
  return(result);
 8001ab0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001ab4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	095b      	lsrs	r3, r3, #5
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d102      	bne.n	8001ad0 <HAL_RCC_OscConfig+0xa04>
 8001aca:	4b90      	ldr	r3, [pc, #576]	; (8001d0c <HAL_RCC_OscConfig+0xc40>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	e00d      	b.n	8001aec <HAL_RCC_OscConfig+0xa20>
 8001ad0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	fa93 f2a3 	rbit	r2, r3
 8001ae2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	4b88      	ldr	r3, [pc, #544]	; (8001d0c <HAL_RCC_OscConfig+0xc40>)
 8001aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aec:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001af0:	2102      	movs	r1, #2
 8001af2:	6011      	str	r1, [r2, #0]
 8001af4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	fa92 f1a2 	rbit	r1, r2
 8001afe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b02:	6011      	str	r1, [r2, #0]
  return(result);
 8001b04:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	fab2 f282 	clz	r2, r2
 8001b0e:	b252      	sxtb	r2, r2
 8001b10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b14:	b252      	sxtb	r2, r2
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	f002 021f 	and.w	r2, r2, #31
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d19f      	bne.n	8001a68 <HAL_RCC_OscConfig+0x99c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b28:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d105      	bne.n	8001b3c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b30:	4b76      	ldr	r3, [pc, #472]	; (8001d0c <HAL_RCC_OscConfig+0xc40>)
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	4a75      	ldr	r2, [pc, #468]	; (8001d0c <HAL_RCC_OscConfig+0xc40>)
 8001b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 81a4 	beq.w	8001e90 <HAL_RCC_OscConfig+0xdc4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b48:	4b70      	ldr	r3, [pc, #448]	; (8001d0c <HAL_RCC_OscConfig+0xc40>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 030c 	and.w	r3, r3, #12
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	f000 819b 	beq.w	8001e8c <HAL_RCC_OscConfig+0xdc0>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	69db      	ldr	r3, [r3, #28]
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	f040 8113 	bne.w	8001d88 <HAL_RCC_OscConfig+0xcbc>
 8001b62:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	fa93 f2a3 	rbit	r2, r3
 8001b76:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b7a:	601a      	str	r2, [r3, #0]
  return(result);
 8001b7c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b80:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b82:	fab3 f383 	clz	r3, r3
 8001b86:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b8a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	461a      	mov	r2, r3
 8001b92:	2300      	movs	r3, #0
 8001b94:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b96:	f7ff fa73 	bl	8001080 <HAL_GetTick>
 8001b9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9e:	e009      	b.n	8001bb4 <HAL_RCC_OscConfig+0xae8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff fa6e 	bl	8001080 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0xae8>
          {
            return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e16e      	b.n	8001e92 <HAL_RCC_OscConfig+0xdc6>
 8001bb4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	fa93 f2a3 	rbit	r2, r3
 8001bc8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001bcc:	601a      	str	r2, [r3, #0]
  return(result);
 8001bce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001bd2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd4:	fab3 f383 	clz	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d102      	bne.n	8001bee <HAL_RCC_OscConfig+0xb22>
 8001be8:	4b48      	ldr	r3, [pc, #288]	; (8001d0c <HAL_RCC_OscConfig+0xc40>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	e01b      	b.n	8001c26 <HAL_RCC_OscConfig+0xb5a>
 8001bee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bf2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bf6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	fa93 f2a3 	rbit	r2, r3
 8001c02:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	fa93 f2a3 	rbit	r2, r3
 8001c1c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	4b3a      	ldr	r3, [pc, #232]	; (8001d0c <HAL_RCC_OscConfig+0xc40>)
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001c2a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c2e:	6011      	str	r1, [r2, #0]
 8001c30:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001c34:	6812      	ldr	r2, [r2, #0]
 8001c36:	fa92 f1a2 	rbit	r1, r2
 8001c3a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c3e:	6011      	str	r1, [r2, #0]
  return(result);
 8001c40:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c44:	6812      	ldr	r2, [r2, #0]
 8001c46:	fab2 f282 	clz	r2, r2
 8001c4a:	b252      	sxtb	r2, r2
 8001c4c:	f042 0220 	orr.w	r2, r2, #32
 8001c50:	b252      	sxtb	r2, r2
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	f002 021f 	and.w	r2, r2, #31
 8001c58:	2101      	movs	r1, #1
 8001c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5e:	4013      	ands	r3, r2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d19d      	bne.n	8001ba0 <HAL_RCC_OscConfig+0xad4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c64:	4b29      	ldr	r3, [pc, #164]	; (8001d0c <HAL_RCC_OscConfig+0xc40>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c72:	1d3b      	adds	r3, r7, #4
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	430b      	orrs	r3, r1
 8001c7a:	4924      	ldr	r1, [pc, #144]	; (8001d0c <HAL_RCC_OscConfig+0xc40>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	604b      	str	r3, [r1, #4]
 8001c80:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	fa93 f2a3 	rbit	r2, r3
 8001c94:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c98:	601a      	str	r2, [r3, #0]
  return(result);
 8001c9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c9e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca0:	fab3 f383 	clz	r3, r3
 8001ca4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ca8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	461a      	mov	r2, r3
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7ff f9e4 	bl	8001080 <HAL_GetTick>
 8001cb8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cbc:	e009      	b.n	8001cd2 <HAL_RCC_OscConfig+0xc06>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cbe:	f7ff f9df 	bl	8001080 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0xc06>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e0df      	b.n	8001e92 <HAL_RCC_OscConfig+0xdc6>
 8001cd2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cd6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	fa93 f2a3 	rbit	r2, r3
 8001ce6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cea:	601a      	str	r2, [r3, #0]
  return(result);
 8001cec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cf0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf2:	fab3 f383 	clz	r3, r3
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	095b      	lsrs	r3, r3, #5
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d104      	bne.n	8001d10 <HAL_RCC_OscConfig+0xc44>
 8001d06:	4b01      	ldr	r3, [pc, #4]	; (8001d0c <HAL_RCC_OscConfig+0xc40>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	e01d      	b.n	8001d48 <HAL_RCC_OscConfig+0xc7c>
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	fa93 f2a3 	rbit	r2, r3
 8001d24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	fa93 f2a3 	rbit	r2, r3
 8001d3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	4b55      	ldr	r3, [pc, #340]	; (8001e9c <HAL_RCC_OscConfig+0xdd0>)
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001d4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d50:	6011      	str	r1, [r2, #0]
 8001d52:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	fa92 f1a2 	rbit	r1, r2
 8001d5c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d60:	6011      	str	r1, [r2, #0]
  return(result);
 8001d62:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	fab2 f282 	clz	r2, r2
 8001d6c:	b252      	sxtb	r2, r2
 8001d6e:	f042 0220 	orr.w	r2, r2, #32
 8001d72:	b252      	sxtb	r2, r2
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	f002 021f 	and.w	r2, r2, #31
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d80:	4013      	ands	r3, r2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d09b      	beq.n	8001cbe <HAL_RCC_OscConfig+0xbf2>
 8001d86:	e083      	b.n	8001e90 <HAL_RCC_OscConfig+0xdc4>
 8001d88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	fa93 f2a3 	rbit	r2, r3
 8001d9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001da0:	601a      	str	r2, [r3, #0]
  return(result);
 8001da2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001da6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da8:	fab3 f383 	clz	r3, r3
 8001dac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001db0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	461a      	mov	r2, r3
 8001db8:	2300      	movs	r3, #0
 8001dba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff f960 	bl	8001080 <HAL_GetTick>
 8001dc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc4:	e009      	b.n	8001dda <HAL_RCC_OscConfig+0xd0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7ff f95b 	bl	8001080 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xd0e>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e05b      	b.n	8001e92 <HAL_RCC_OscConfig+0xdc6>
 8001dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dde:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001de2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	fa93 f2a3 	rbit	r2, r3
 8001dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001df2:	601a      	str	r2, [r3, #0]
  return(result);
 8001df4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001df8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	095b      	lsrs	r3, r3, #5
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d102      	bne.n	8001e14 <HAL_RCC_OscConfig+0xd48>
 8001e0e:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <HAL_RCC_OscConfig+0xdd0>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	e01b      	b.n	8001e4c <HAL_RCC_OscConfig+0xd80>
 8001e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	fa93 f2a3 	rbit	r2, r3
 8001e28:	f107 0320 	add.w	r3, r7, #32
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f107 031c 	add.w	r3, r7, #28
 8001e32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	f107 031c 	add.w	r3, r7, #28
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	fa93 f2a3 	rbit	r2, r3
 8001e42:	f107 0318 	add.w	r3, r7, #24
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <HAL_RCC_OscConfig+0xdd0>)
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	f107 0214 	add.w	r2, r7, #20
 8001e50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e54:	6011      	str	r1, [r2, #0]
 8001e56:	f107 0214 	add.w	r2, r7, #20
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	fa92 f1a2 	rbit	r1, r2
 8001e60:	f107 0210 	add.w	r2, r7, #16
 8001e64:	6011      	str	r1, [r2, #0]
  return(result);
 8001e66:	f107 0210 	add.w	r2, r7, #16
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	fab2 f282 	clz	r2, r2
 8001e70:	b252      	sxtb	r2, r2
 8001e72:	f042 0220 	orr.w	r2, r2, #32
 8001e76:	b252      	sxtb	r2, r2
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	f002 021f 	and.w	r2, r2, #31
 8001e7e:	2101      	movs	r1, #1
 8001e80:	fa01 f202 	lsl.w	r2, r1, r2
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d19d      	bne.n	8001dc6 <HAL_RCC_OscConfig+0xcfa>
 8001e8a:	e001      	b.n	8001e90 <HAL_RCC_OscConfig+0xdc4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_RCC_OscConfig+0xdc6>
    }
  }
  
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000

08001ea0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b09e      	sub	sp, #120	; 0x78
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001eae:	4ba7      	ldr	r3, [pc, #668]	; (800214c <HAL_RCC_ClockConfig+0x2ac>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d910      	bls.n	8001ede <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebc:	4ba3      	ldr	r3, [pc, #652]	; (800214c <HAL_RCC_ClockConfig+0x2ac>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f023 0207 	bic.w	r2, r3, #7
 8001ec4:	49a1      	ldr	r1, [pc, #644]	; (800214c <HAL_RCC_ClockConfig+0x2ac>)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ecc:	4b9f      	ldr	r3, [pc, #636]	; (800214c <HAL_RCC_ClockConfig+0x2ac>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d001      	beq.n	8001ede <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e172      	b.n	80021c4 <HAL_RCC_ClockConfig+0x324>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d008      	beq.n	8001efc <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eea:	4b99      	ldr	r3, [pc, #612]	; (8002150 <HAL_RCC_ClockConfig+0x2b0>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	4996      	ldr	r1, [pc, #600]	; (8002150 <HAL_RCC_ClockConfig+0x2b0>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 8109 	beq.w	800211c <HAL_RCC_ClockConfig+0x27c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d13d      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xee>
 8001f12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f16:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f1a:	fa93 f3a3 	rbit	r3, r3
 8001f1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8001f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	095b      	lsrs	r3, r3, #5
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d102      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x9c>
 8001f36:	4b86      	ldr	r3, [pc, #536]	; (8002150 <HAL_RCC_ClockConfig+0x2b0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	e00f      	b.n	8001f5c <HAL_RCC_ClockConfig+0xbc>
 8001f3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	667b      	str	r3, [r7, #100]	; 0x64
 8001f4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f4e:	663b      	str	r3, [r7, #96]	; 0x60
 8001f50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f52:	fa93 f3a3 	rbit	r3, r3
 8001f56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f58:	4b7d      	ldr	r3, [pc, #500]	; (8002150 <HAL_RCC_ClockConfig+0x2b0>)
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f60:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f64:	fa92 f2a2 	rbit	r2, r2
 8001f68:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001f6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f6c:	fab2 f282 	clz	r2, r2
 8001f70:	b252      	sxtb	r2, r2
 8001f72:	f042 0220 	orr.w	r2, r2, #32
 8001f76:	b252      	sxtb	r2, r2
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	f002 021f 	and.w	r2, r2, #31
 8001f7e:	2101      	movs	r1, #1
 8001f80:	fa01 f202 	lsl.w	r2, r1, r2
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d17d      	bne.n	8002086 <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e11a      	b.n	80021c4 <HAL_RCC_ClockConfig+0x324>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d13d      	bne.n	8002012 <HAL_RCC_ClockConfig+0x172>
 8001f96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f9a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa6:	fab3 f383 	clz	r3, r3
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	095b      	lsrs	r3, r3, #5
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	f043 0301 	orr.w	r3, r3, #1
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d102      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x120>
 8001fba:	4b65      	ldr	r3, [pc, #404]	; (8002150 <HAL_RCC_ClockConfig+0x2b0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	e00f      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x140>
 8001fc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fc4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8001fce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8001fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fdc:	4b5c      	ldr	r3, [pc, #368]	; (8002150 <HAL_RCC_ClockConfig+0x2b0>)
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fe4:	63ba      	str	r2, [r7, #56]	; 0x38
 8001fe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fe8:	fa92 f2a2 	rbit	r2, r2
 8001fec:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8001fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ff0:	fab2 f282 	clz	r2, r2
 8001ff4:	b252      	sxtb	r2, r2
 8001ff6:	f042 0220 	orr.w	r2, r2, #32
 8001ffa:	b252      	sxtb	r2, r2
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	f002 021f 	and.w	r2, r2, #31
 8002002:	2101      	movs	r1, #1
 8002004:	fa01 f202 	lsl.w	r2, r1, r2
 8002008:	4013      	ands	r3, r2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d13b      	bne.n	8002086 <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0d8      	b.n	80021c4 <HAL_RCC_ClockConfig+0x324>
 8002012:	2302      	movs	r3, #2
 8002014:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002018:	fa93 f3a3 	rbit	r3, r3
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800201e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002020:	fab3 f383 	clz	r3, r3
 8002024:	b2db      	uxtb	r3, r3
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	b2db      	uxtb	r3, r3
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b01      	cmp	r3, #1
 8002032:	d102      	bne.n	800203a <HAL_RCC_ClockConfig+0x19a>
 8002034:	4b46      	ldr	r3, [pc, #280]	; (8002150 <HAL_RCC_ClockConfig+0x2b0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	e00d      	b.n	8002056 <HAL_RCC_ClockConfig+0x1b6>
 800203a:	2302      	movs	r3, #2
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002040:	fa93 f3a3 	rbit	r3, r3
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
 8002046:	2302      	movs	r3, #2
 8002048:	623b      	str	r3, [r7, #32]
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	fa93 f3a3 	rbit	r3, r3
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	4b3f      	ldr	r3, [pc, #252]	; (8002150 <HAL_RCC_ClockConfig+0x2b0>)
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	2202      	movs	r2, #2
 8002058:	61ba      	str	r2, [r7, #24]
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	fa92 f2a2 	rbit	r2, r2
 8002060:	617a      	str	r2, [r7, #20]
  return(result);
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	fab2 f282 	clz	r2, r2
 8002068:	b252      	sxtb	r2, r2
 800206a:	f042 0220 	orr.w	r2, r2, #32
 800206e:	b252      	sxtb	r2, r2
 8002070:	b2d2      	uxtb	r2, r2
 8002072:	f002 021f 	and.w	r2, r2, #31
 8002076:	2101      	movs	r1, #1
 8002078:	fa01 f202 	lsl.w	r2, r1, r2
 800207c:	4013      	ands	r3, r2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCC_ClockConfig+0x1e6>
      {
        return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e09e      	b.n	80021c4 <HAL_RCC_ClockConfig+0x324>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002086:	4b32      	ldr	r3, [pc, #200]	; (8002150 <HAL_RCC_ClockConfig+0x2b0>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f023 0203 	bic.w	r2, r3, #3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	492f      	ldr	r1, [pc, #188]	; (8002150 <HAL_RCC_ClockConfig+0x2b0>)
 8002094:	4313      	orrs	r3, r2
 8002096:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002098:	f7fe fff2 	bl	8001080 <HAL_GetTick>
 800209c:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d112      	bne.n	80020cc <HAL_RCC_ClockConfig+0x22c>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020a6:	e00a      	b.n	80020be <HAL_RCC_ClockConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a8:	f7fe ffea 	bl	8001080 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e082      	b.n	80021c4 <HAL_RCC_ClockConfig+0x324>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020be:	4b24      	ldr	r3, [pc, #144]	; (8002150 <HAL_RCC_ClockConfig+0x2b0>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d1ee      	bne.n	80020a8 <HAL_RCC_ClockConfig+0x208>
 80020ca:	e027      	b.n	800211c <HAL_RCC_ClockConfig+0x27c>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d11d      	bne.n	8002110 <HAL_RCC_ClockConfig+0x270>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020d4:	e00a      	b.n	80020ec <HAL_RCC_ClockConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d6:	f7fe ffd3 	bl	8001080 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_ClockConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e06b      	b.n	80021c4 <HAL_RCC_ClockConfig+0x324>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ec:	4b18      	ldr	r3, [pc, #96]	; (8002150 <HAL_RCC_ClockConfig+0x2b0>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d1ee      	bne.n	80020d6 <HAL_RCC_ClockConfig+0x236>
 80020f8:	e010      	b.n	800211c <HAL_RCC_ClockConfig+0x27c>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020fa:	f7fe ffc1 	bl	8001080 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	; 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_ClockConfig+0x270>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e059      	b.n	80021c4 <HAL_RCC_ClockConfig+0x324>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <HAL_RCC_ClockConfig+0x2b0>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1ee      	bne.n	80020fa <HAL_RCC_ClockConfig+0x25a>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_ClockConfig+0x2ac>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d214      	bcs.n	8002154 <HAL_RCC_ClockConfig+0x2b4>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <HAL_RCC_ClockConfig+0x2ac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 0207 	bic.w	r2, r3, #7
 8002132:	4906      	ldr	r1, [pc, #24]	; (800214c <HAL_RCC_ClockConfig+0x2ac>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800213a:	4b04      	ldr	r3, [pc, #16]	; (800214c <HAL_RCC_ClockConfig+0x2ac>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x2b4>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e03b      	b.n	80021c4 <HAL_RCC_ClockConfig+0x324>
 800214c:	40022000 	.word	0x40022000
 8002150:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_RCC_ClockConfig+0x2d2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002160:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <HAL_RCC_ClockConfig+0x32c>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4917      	ldr	r1, [pc, #92]	; (80021cc <HAL_RCC_ClockConfig+0x32c>)
 800216e:	4313      	orrs	r3, r2
 8002170:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <HAL_RCC_ClockConfig+0x2f2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800217e:	4b13      	ldr	r3, [pc, #76]	; (80021cc <HAL_RCC_ClockConfig+0x32c>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	490f      	ldr	r1, [pc, #60]	; (80021cc <HAL_RCC_ClockConfig+0x32c>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002192:	f7fe ff83 	bl	800109c <HAL_RCC_GetSysClockFreq>
 8002196:	4601      	mov	r1, r0
 8002198:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <HAL_RCC_ClockConfig+0x32c>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021a0:	23f0      	movs	r3, #240	; 0xf0
 80021a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	fa22 f303 	lsr.w	r3, r2, r3
 80021b6:	4a06      	ldr	r2, [pc, #24]	; (80021d0 <HAL_RCC_ClockConfig+0x330>)
 80021b8:	5cd3      	ldrb	r3, [r2, r3]
 80021ba:	fa21 f303 	lsr.w	r3, r1, r3
 80021be:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <HAL_RCC_ClockConfig+0x334>)
 80021c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3778      	adds	r7, #120	; 0x78
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40021000 	.word	0x40021000
 80021d0:	08005af8 	.word	0x08005af8
 80021d4:	20000030 	.word	0x20000030

080021d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  //return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
  return 7372800;
 80021dc:	f44f 03e1 	mov.w	r3, #7372800	; 0x708000
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	0000      	movs	r0, r0

080021ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b087      	sub	sp, #28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002202:	e154      	b.n	80024ae <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	2101      	movs	r1, #1
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	fa01 f303 	lsl.w	r3, r1, r3
 8002210:	4013      	ands	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8146 	beq.w	80024a8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b02      	cmp	r3, #2
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x40>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	2b12      	cmp	r3, #18
 800222a:	d123      	bne.n	8002274 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	08da      	lsrs	r2, r3, #3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3208      	adds	r2, #8
 8002234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	220f      	movs	r2, #15
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4313      	orrs	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	08da      	lsrs	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3208      	adds	r2, #8
 800226e:	6939      	ldr	r1, [r7, #16]
 8002270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0203 	and.w	r2, r3, #3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d00b      	beq.n	80022c8 <HAL_GPIO_Init+0xdc>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d007      	beq.n	80022c8 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022bc:	2b11      	cmp	r3, #17
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b12      	cmp	r3, #18
 80022c6:	d130      	bne.n	800232a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2203      	movs	r2, #3
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022fe:	2201      	movs	r2, #1
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43db      	mvns	r3, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	091b      	lsrs	r3, r3, #4
 8002314:	f003 0201 	and.w	r2, r3, #1
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	2203      	movs	r2, #3
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43db      	mvns	r3, r3
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	4013      	ands	r3, r2
 8002340:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 80a0 	beq.w	80024a8 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002368:	4b58      	ldr	r3, [pc, #352]	; (80024cc <HAL_GPIO_Init+0x2e0>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	4a57      	ldr	r2, [pc, #348]	; (80024cc <HAL_GPIO_Init+0x2e0>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6193      	str	r3, [r2, #24]
 8002374:	4b55      	ldr	r3, [pc, #340]	; (80024cc <HAL_GPIO_Init+0x2e0>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002380:	4a53      	ldr	r2, [pc, #332]	; (80024d0 <HAL_GPIO_Init+0x2e4>)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	3302      	adds	r3, #2
 8002388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	220f      	movs	r2, #15
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023aa:	d019      	beq.n	80023e0 <HAL_GPIO_Init+0x1f4>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a49      	ldr	r2, [pc, #292]	; (80024d4 <HAL_GPIO_Init+0x2e8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d013      	beq.n	80023dc <HAL_GPIO_Init+0x1f0>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a48      	ldr	r2, [pc, #288]	; (80024d8 <HAL_GPIO_Init+0x2ec>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d00d      	beq.n	80023d8 <HAL_GPIO_Init+0x1ec>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a47      	ldr	r2, [pc, #284]	; (80024dc <HAL_GPIO_Init+0x2f0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d007      	beq.n	80023d4 <HAL_GPIO_Init+0x1e8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a46      	ldr	r2, [pc, #280]	; (80024e0 <HAL_GPIO_Init+0x2f4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d101      	bne.n	80023d0 <HAL_GPIO_Init+0x1e4>
 80023cc:	2304      	movs	r3, #4
 80023ce:	e008      	b.n	80023e2 <HAL_GPIO_Init+0x1f6>
 80023d0:	2305      	movs	r3, #5
 80023d2:	e006      	b.n	80023e2 <HAL_GPIO_Init+0x1f6>
 80023d4:	2303      	movs	r3, #3
 80023d6:	e004      	b.n	80023e2 <HAL_GPIO_Init+0x1f6>
 80023d8:	2302      	movs	r3, #2
 80023da:	e002      	b.n	80023e2 <HAL_GPIO_Init+0x1f6>
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <HAL_GPIO_Init+0x1f6>
 80023e0:	2300      	movs	r3, #0
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	f002 0203 	and.w	r2, r2, #3
 80023e8:	0092      	lsls	r2, r2, #2
 80023ea:	4093      	lsls	r3, r2
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80023f2:	4937      	ldr	r1, [pc, #220]	; (80024d0 <HAL_GPIO_Init+0x2e4>)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	089b      	lsrs	r3, r3, #2
 80023f8:	3302      	adds	r3, #2
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002400:	4b38      	ldr	r3, [pc, #224]	; (80024e4 <HAL_GPIO_Init+0x2f8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	43db      	mvns	r3, r3
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	4013      	ands	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002424:	4a2f      	ldr	r2, [pc, #188]	; (80024e4 <HAL_GPIO_Init+0x2f8>)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800242a:	4b2e      	ldr	r3, [pc, #184]	; (80024e4 <HAL_GPIO_Init+0x2f8>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	43db      	mvns	r3, r3
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	4013      	ands	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800244e:	4a25      	ldr	r2, [pc, #148]	; (80024e4 <HAL_GPIO_Init+0x2f8>)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_GPIO_Init+0x2f8>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	43db      	mvns	r3, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002478:	4a1a      	ldr	r2, [pc, #104]	; (80024e4 <HAL_GPIO_Init+0x2f8>)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800247e:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <HAL_GPIO_Init+0x2f8>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	43db      	mvns	r3, r3
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	4013      	ands	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024a2:	4a10      	ldr	r2, [pc, #64]	; (80024e4 <HAL_GPIO_Init+0x2f8>)
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	3301      	adds	r3, #1
 80024ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f47f aea3 	bne.w	8002204 <HAL_GPIO_Init+0x18>
  }
}
 80024be:	bf00      	nop
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40010000 	.word	0x40010000
 80024d4:	48000400 	.word	0x48000400
 80024d8:	48000800 	.word	0x48000800
 80024dc:	48000c00 	.word	0x48000c00
 80024e0:	48001000 	.word	0x48001000
 80024e4:	40010400 	.word	0x40010400

080024e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	807b      	strh	r3, [r7, #2]
 80024f4:	4613      	mov	r3, r2
 80024f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f8:	787b      	ldrb	r3, [r7, #1]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024fe:	887a      	ldrh	r2, [r7, #2]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002504:	e002      	b.n	800250c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002506:	887a      	ldrh	r2, [r7, #2]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002524:	2310      	movs	r3, #16
 8002526:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002528:	2300      	movs	r3, #0
 800252a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 800252c:	2300      	movs	r3, #0
 800252e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	431a      	orrs	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	4313      	orrs	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002556:	f023 030c 	bic.w	r3, r3, #12
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6812      	ldr	r2, [r2, #0]
 800255e:	68f9      	ldr	r1, [r7, #12]
 8002560:	430b      	orrs	r3, r1
 8002562:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699a      	ldr	r2, [r3, #24]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4313      	orrs	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	430a      	orrs	r2, r1
 8002598:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4ab4      	ldr	r2, [pc, #720]	; (8002870 <UART_SetConfig+0x358>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d121      	bne.n	80025e8 <UART_SetConfig+0xd0>
 80025a4:	4bb3      	ldr	r3, [pc, #716]	; (8002874 <UART_SetConfig+0x35c>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	d817      	bhi.n	80025e0 <UART_SetConfig+0xc8>
 80025b0:	a201      	add	r2, pc, #4	; (adr r2, 80025b8 <UART_SetConfig+0xa0>)
 80025b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b6:	bf00      	nop
 80025b8:	080025c9 	.word	0x080025c9
 80025bc:	080025d5 	.word	0x080025d5
 80025c0:	080025db 	.word	0x080025db
 80025c4:	080025cf 	.word	0x080025cf
 80025c8:	2301      	movs	r3, #1
 80025ca:	75fb      	strb	r3, [r7, #23]
 80025cc:	e0b2      	b.n	8002734 <UART_SetConfig+0x21c>
 80025ce:	2302      	movs	r3, #2
 80025d0:	75fb      	strb	r3, [r7, #23]
 80025d2:	e0af      	b.n	8002734 <UART_SetConfig+0x21c>
 80025d4:	2304      	movs	r3, #4
 80025d6:	75fb      	strb	r3, [r7, #23]
 80025d8:	e0ac      	b.n	8002734 <UART_SetConfig+0x21c>
 80025da:	2308      	movs	r3, #8
 80025dc:	75fb      	strb	r3, [r7, #23]
 80025de:	e0a9      	b.n	8002734 <UART_SetConfig+0x21c>
 80025e0:	2310      	movs	r3, #16
 80025e2:	75fb      	strb	r3, [r7, #23]
 80025e4:	bf00      	nop
 80025e6:	e0a5      	b.n	8002734 <UART_SetConfig+0x21c>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4aa2      	ldr	r2, [pc, #648]	; (8002878 <UART_SetConfig+0x360>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d123      	bne.n	800263a <UART_SetConfig+0x122>
 80025f2:	4ba0      	ldr	r3, [pc, #640]	; (8002874 <UART_SetConfig+0x35c>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fe:	d012      	beq.n	8002626 <UART_SetConfig+0x10e>
 8002600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002604:	d802      	bhi.n	800260c <UART_SetConfig+0xf4>
 8002606:	2b00      	cmp	r3, #0
 8002608:	d007      	beq.n	800261a <UART_SetConfig+0x102>
 800260a:	e012      	b.n	8002632 <UART_SetConfig+0x11a>
 800260c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002610:	d00c      	beq.n	800262c <UART_SetConfig+0x114>
 8002612:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002616:	d003      	beq.n	8002620 <UART_SetConfig+0x108>
 8002618:	e00b      	b.n	8002632 <UART_SetConfig+0x11a>
 800261a:	2300      	movs	r3, #0
 800261c:	75fb      	strb	r3, [r7, #23]
 800261e:	e089      	b.n	8002734 <UART_SetConfig+0x21c>
 8002620:	2302      	movs	r3, #2
 8002622:	75fb      	strb	r3, [r7, #23]
 8002624:	e086      	b.n	8002734 <UART_SetConfig+0x21c>
 8002626:	2304      	movs	r3, #4
 8002628:	75fb      	strb	r3, [r7, #23]
 800262a:	e083      	b.n	8002734 <UART_SetConfig+0x21c>
 800262c:	2308      	movs	r3, #8
 800262e:	75fb      	strb	r3, [r7, #23]
 8002630:	e080      	b.n	8002734 <UART_SetConfig+0x21c>
 8002632:	2310      	movs	r3, #16
 8002634:	75fb      	strb	r3, [r7, #23]
 8002636:	bf00      	nop
 8002638:	e07c      	b.n	8002734 <UART_SetConfig+0x21c>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a8f      	ldr	r2, [pc, #572]	; (800287c <UART_SetConfig+0x364>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d123      	bne.n	800268c <UART_SetConfig+0x174>
 8002644:	4b8b      	ldr	r3, [pc, #556]	; (8002874 <UART_SetConfig+0x35c>)
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800264c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002650:	d012      	beq.n	8002678 <UART_SetConfig+0x160>
 8002652:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002656:	d802      	bhi.n	800265e <UART_SetConfig+0x146>
 8002658:	2b00      	cmp	r3, #0
 800265a:	d007      	beq.n	800266c <UART_SetConfig+0x154>
 800265c:	e012      	b.n	8002684 <UART_SetConfig+0x16c>
 800265e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002662:	d00c      	beq.n	800267e <UART_SetConfig+0x166>
 8002664:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002668:	d003      	beq.n	8002672 <UART_SetConfig+0x15a>
 800266a:	e00b      	b.n	8002684 <UART_SetConfig+0x16c>
 800266c:	2300      	movs	r3, #0
 800266e:	75fb      	strb	r3, [r7, #23]
 8002670:	e060      	b.n	8002734 <UART_SetConfig+0x21c>
 8002672:	2302      	movs	r3, #2
 8002674:	75fb      	strb	r3, [r7, #23]
 8002676:	e05d      	b.n	8002734 <UART_SetConfig+0x21c>
 8002678:	2304      	movs	r3, #4
 800267a:	75fb      	strb	r3, [r7, #23]
 800267c:	e05a      	b.n	8002734 <UART_SetConfig+0x21c>
 800267e:	2308      	movs	r3, #8
 8002680:	75fb      	strb	r3, [r7, #23]
 8002682:	e057      	b.n	8002734 <UART_SetConfig+0x21c>
 8002684:	2310      	movs	r3, #16
 8002686:	75fb      	strb	r3, [r7, #23]
 8002688:	bf00      	nop
 800268a:	e053      	b.n	8002734 <UART_SetConfig+0x21c>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a7b      	ldr	r2, [pc, #492]	; (8002880 <UART_SetConfig+0x368>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d123      	bne.n	80026de <UART_SetConfig+0x1c6>
 8002696:	4b77      	ldr	r3, [pc, #476]	; (8002874 <UART_SetConfig+0x35c>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d012      	beq.n	80026ca <UART_SetConfig+0x1b2>
 80026a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a8:	d802      	bhi.n	80026b0 <UART_SetConfig+0x198>
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d007      	beq.n	80026be <UART_SetConfig+0x1a6>
 80026ae:	e012      	b.n	80026d6 <UART_SetConfig+0x1be>
 80026b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026b4:	d00c      	beq.n	80026d0 <UART_SetConfig+0x1b8>
 80026b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026ba:	d003      	beq.n	80026c4 <UART_SetConfig+0x1ac>
 80026bc:	e00b      	b.n	80026d6 <UART_SetConfig+0x1be>
 80026be:	2300      	movs	r3, #0
 80026c0:	75fb      	strb	r3, [r7, #23]
 80026c2:	e037      	b.n	8002734 <UART_SetConfig+0x21c>
 80026c4:	2302      	movs	r3, #2
 80026c6:	75fb      	strb	r3, [r7, #23]
 80026c8:	e034      	b.n	8002734 <UART_SetConfig+0x21c>
 80026ca:	2304      	movs	r3, #4
 80026cc:	75fb      	strb	r3, [r7, #23]
 80026ce:	e031      	b.n	8002734 <UART_SetConfig+0x21c>
 80026d0:	2308      	movs	r3, #8
 80026d2:	75fb      	strb	r3, [r7, #23]
 80026d4:	e02e      	b.n	8002734 <UART_SetConfig+0x21c>
 80026d6:	2310      	movs	r3, #16
 80026d8:	75fb      	strb	r3, [r7, #23]
 80026da:	bf00      	nop
 80026dc:	e02a      	b.n	8002734 <UART_SetConfig+0x21c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a68      	ldr	r2, [pc, #416]	; (8002884 <UART_SetConfig+0x36c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d123      	bne.n	8002730 <UART_SetConfig+0x218>
 80026e8:	4b62      	ldr	r3, [pc, #392]	; (8002874 <UART_SetConfig+0x35c>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80026f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f4:	d012      	beq.n	800271c <UART_SetConfig+0x204>
 80026f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026fa:	d802      	bhi.n	8002702 <UART_SetConfig+0x1ea>
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <UART_SetConfig+0x1f8>
 8002700:	e012      	b.n	8002728 <UART_SetConfig+0x210>
 8002702:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002706:	d00c      	beq.n	8002722 <UART_SetConfig+0x20a>
 8002708:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800270c:	d003      	beq.n	8002716 <UART_SetConfig+0x1fe>
 800270e:	e00b      	b.n	8002728 <UART_SetConfig+0x210>
 8002710:	2300      	movs	r3, #0
 8002712:	75fb      	strb	r3, [r7, #23]
 8002714:	e00e      	b.n	8002734 <UART_SetConfig+0x21c>
 8002716:	2302      	movs	r3, #2
 8002718:	75fb      	strb	r3, [r7, #23]
 800271a:	e00b      	b.n	8002734 <UART_SetConfig+0x21c>
 800271c:	2304      	movs	r3, #4
 800271e:	75fb      	strb	r3, [r7, #23]
 8002720:	e008      	b.n	8002734 <UART_SetConfig+0x21c>
 8002722:	2308      	movs	r3, #8
 8002724:	75fb      	strb	r3, [r7, #23]
 8002726:	e005      	b.n	8002734 <UART_SetConfig+0x21c>
 8002728:	2310      	movs	r3, #16
 800272a:	75fb      	strb	r3, [r7, #23]
 800272c:	bf00      	nop
 800272e:	e001      	b.n	8002734 <UART_SetConfig+0x21c>
 8002730:	2310      	movs	r3, #16
 8002732:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800273c:	d16f      	bne.n	800281e <UART_SetConfig+0x306>
  {
    switch (clocksource)
 800273e:	7dfb      	ldrb	r3, [r7, #23]
 8002740:	2b08      	cmp	r3, #8
 8002742:	d857      	bhi.n	80027f4 <UART_SetConfig+0x2dc>
 8002744:	a201      	add	r2, pc, #4	; (adr r2, 800274c <UART_SetConfig+0x234>)
 8002746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274a:	bf00      	nop
 800274c:	08002771 	.word	0x08002771
 8002750:	0800278d 	.word	0x0800278d
 8002754:	080027a9 	.word	0x080027a9
 8002758:	080027f5 	.word	0x080027f5
 800275c:	080027c3 	.word	0x080027c3
 8002760:	080027f5 	.word	0x080027f5
 8002764:	080027f5 	.word	0x080027f5
 8002768:	080027f5 	.word	0x080027f5
 800276c:	080027df 	.word	0x080027df
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002770:	f7fe fca0 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 8002774:	4603      	mov	r3, r0
 8002776:	005a      	lsls	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	085b      	lsrs	r3, r3, #1
 800277e:	441a      	add	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	82bb      	strh	r3, [r7, #20]
        break;
 800278a:	e036      	b.n	80027fa <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800278c:	f7ff fd24 	bl	80021d8 <HAL_RCC_GetPCLK2Freq>
 8002790:	4603      	mov	r3, r0
 8002792:	005a      	lsls	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	085b      	lsrs	r3, r3, #1
 800279a:	441a      	add	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a4:	82bb      	strh	r3, [r7, #20]
        break;
 80027a6:	e028      	b.n	80027fa <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	085b      	lsrs	r3, r3, #1
 80027ae:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80027b2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6852      	ldr	r2, [r2, #4]
 80027ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80027be:	82bb      	strh	r3, [r7, #20]
        break;
 80027c0:	e01b      	b.n	80027fa <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80027c2:	f7fe fc6b 	bl	800109c <HAL_RCC_GetSysClockFreq>
 80027c6:	4603      	mov	r3, r0
 80027c8:	005a      	lsls	r2, r3, #1
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	085b      	lsrs	r3, r3, #1
 80027d0:	441a      	add	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027da:	82bb      	strh	r3, [r7, #20]
        break;
 80027dc:	e00d      	b.n	80027fa <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	085b      	lsrs	r3, r3, #1
 80027e4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f0:	82bb      	strh	r3, [r7, #20]
        break;
 80027f2:	e002      	b.n	80027fa <UART_SetConfig+0x2e2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	74fb      	strb	r3, [r7, #19]
        break;
 80027f8:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80027fa:	8abb      	ldrh	r3, [r7, #20]
 80027fc:	f023 030f 	bic.w	r3, r3, #15
 8002800:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002802:	8abb      	ldrh	r3, [r7, #20]
 8002804:	105b      	asrs	r3, r3, #1
 8002806:	b29b      	uxth	r3, r3
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	b29a      	uxth	r2, r3
 800280e:	897b      	ldrh	r3, [r7, #10]
 8002810:	4313      	orrs	r3, r2
 8002812:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	897a      	ldrh	r2, [r7, #10]
 800281a:	60da      	str	r2, [r3, #12]
 800281c:	e075      	b.n	800290a <UART_SetConfig+0x3f2>
  }
  else
  {
    switch (clocksource)
 800281e:	7dfb      	ldrb	r3, [r7, #23]
 8002820:	2b08      	cmp	r3, #8
 8002822:	d86f      	bhi.n	8002904 <UART_SetConfig+0x3ec>
 8002824:	a201      	add	r2, pc, #4	; (adr r2, 800282c <UART_SetConfig+0x314>)
 8002826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282a:	bf00      	nop
 800282c:	08002851 	.word	0x08002851
 8002830:	08002889 	.word	0x08002889
 8002834:	080028a9 	.word	0x080028a9
 8002838:	08002905 	.word	0x08002905
 800283c:	080028c9 	.word	0x080028c9
 8002840:	08002905 	.word	0x08002905
 8002844:	08002905 	.word	0x08002905
 8002848:	08002905 	.word	0x08002905
 800284c:	080028e9 	.word	0x080028e9
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002850:	f7fe fc30 	bl	80010b4 <HAL_RCC_GetPCLK1Freq>
 8002854:	4602      	mov	r2, r0
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	085b      	lsrs	r3, r3, #1
 800285c:	441a      	add	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	fbb2 f3f3 	udiv	r3, r2, r3
 8002866:	b29a      	uxth	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	60da      	str	r2, [r3, #12]
        break;
 800286e:	e04c      	b.n	800290a <UART_SetConfig+0x3f2>
 8002870:	40013800 	.word	0x40013800
 8002874:	40021000 	.word	0x40021000
 8002878:	40004400 	.word	0x40004400
 800287c:	40004800 	.word	0x40004800
 8002880:	40004c00 	.word	0x40004c00
 8002884:	40005000 	.word	0x40005000
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002888:	f7ff fca6 	bl	80021d8 <HAL_RCC_GetPCLK2Freq>
 800288c:	4602      	mov	r2, r0
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	085b      	lsrs	r3, r3, #1
 8002894:	441a      	add	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	fbb2 f3f3 	udiv	r3, r2, r3
 800289e:	b29a      	uxth	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60da      	str	r2, [r3, #12]
        break;
 80028a6:	e030      	b.n	800290a <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	085b      	lsrs	r3, r3, #1
 80028ae:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80028b2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6852      	ldr	r2, [r2, #4]
 80028ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80028be:	b29a      	uxth	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60da      	str	r2, [r3, #12]
        break;
 80028c6:	e020      	b.n	800290a <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80028c8:	f7fe fbe8 	bl	800109c <HAL_RCC_GetSysClockFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	085b      	lsrs	r3, r3, #1
 80028d4:	441a      	add	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	fbb2 f3f3 	udiv	r3, r2, r3
 80028de:	b29a      	uxth	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60da      	str	r2, [r3, #12]
        break;
 80028e6:	e010      	b.n	800290a <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	085b      	lsrs	r3, r3, #1
 80028ee:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	60da      	str	r2, [r3, #12]
        break;
 8002902:	e002      	b.n	800290a <UART_SetConfig+0x3f2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	74fb      	strb	r3, [r7, #19]
        break;
 8002908:	bf00      	nop
    }
  }

  return ret;
 800290a:	7cfb      	ldrb	r3, [r7, #19]

}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af02      	add	r7, sp, #8
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002926:	f7fe fbab 	bl	8001080 <HAL_GetTick>
 800292a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b08      	cmp	r3, #8
 8002938:	d10e      	bne.n	8002958 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800293a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f873 	bl	8002a34 <UART_WaitOnFlagUntilTimeout>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e022      	b.n	800299e <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b04      	cmp	r3, #4
 8002964:	d10e      	bne.n	8002984 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002966:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f85d 	bl	8002a34 <UART_WaitOnFlagUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e00c      	b.n	800299e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e039      	b.n	8002a2c <HAL_UART_Init+0x86>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d103      	bne.n	80029cc <HAL_UART_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    //HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2224      	movs	r2, #36	; 0x24
 80029d0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0201 	bic.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff fd97 	bl	8002518 <UART_SetConfig>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e01b      	b.n	8002a2c <HAL_UART_Init+0x86>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a12:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return UART_CheckIdleState(huart);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff ff75 	bl	8002914 <UART_CheckIdleState>
 8002a2a:	4603      	mov	r3, r0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	4613      	mov	r3, r2
 8002a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a44:	e02c      	b.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4c:	d028      	beq.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d007      	beq.n	8002a64 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a54:	f7fe fb14 	bl	8001080 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d21d      	bcs.n	8002aa0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002a72:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0201 	bic.w	r2, r2, #1
 8002a82:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2220      	movs	r2, #32
 8002a88:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e00f      	b.n	8002ac0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	69da      	ldr	r2, [r3, #28]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	bf0c      	ite	eq
 8002ab0:	2301      	moveq	r3, #1
 8002ab2:	2300      	movne	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d0c3      	beq.n	8002a46 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <can_return_error>:
	ADC_RET_ADC_STOP = -5,
	ADC_RET_PIN_INIT = -6
} adc_return_t;

//////////////////////////CAN/////////////////////////////////
static can_return_t can_return_error(HAL_StatusTypeDef canError) {
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
	can_return_t r_error;
	switch (canError) {
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d007      	beq.n	8002ae8 <can_return_error+0x20>
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	d002      	beq.n	8002ae2 <can_return_error+0x1a>
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d006      	beq.n	8002aee <can_return_error+0x26>
 8002ae0:	e008      	b.n	8002af4 <can_return_error+0x2c>
	case HAL_TIMEOUT:
		r_error = CAN_RET_TIMEOUT;
 8002ae2:	23fd      	movs	r3, #253	; 0xfd
 8002ae4:	73fb      	strb	r3, [r7, #15]
		break;
 8002ae6:	e007      	b.n	8002af8 <can_return_error+0x30>
	case HAL_BUSY:
		r_error = CAN_RET_BUSY;
 8002ae8:	23fc      	movs	r3, #252	; 0xfc
 8002aea:	73fb      	strb	r3, [r7, #15]
		break;
 8002aec:	e004      	b.n	8002af8 <can_return_error+0x30>
	case HAL_ERROR:
		r_error = CAN_RET_ERROR;
 8002aee:	23fb      	movs	r3, #251	; 0xfb
 8002af0:	73fb      	strb	r3, [r7, #15]
		break;
 8002af2:	e001      	b.n	8002af8 <can_return_error+0x30>
	default:
		r_error = CAN_RET_ERROR_UNKNOWN;
 8002af4:	23fa      	movs	r3, #250	; 0xfa
 8002af6:	73fb      	strb	r3, [r7, #15]
	}
	return r_error;
 8002af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <init_can>:

int init_can(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b092      	sub	sp, #72	; 0x48
 8002b0c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef rval;
	CAN_FilterConfTypeDef sFilterConfig;

	myhcan.Instance = CAN;
 8002b0e:	4b49      	ldr	r3, [pc, #292]	; (8002c34 <init_can+0x12c>)
 8002b10:	4a49      	ldr	r2, [pc, #292]	; (8002c38 <init_can+0x130>)
 8002b12:	601a      	str	r2, [r3, #0]
	myhcan.Init.Prescaler = 8;
 8002b14:	4b47      	ldr	r3, [pc, #284]	; (8002c34 <init_can+0x12c>)
 8002b16:	2208      	movs	r2, #8
 8002b18:	605a      	str	r2, [r3, #4]
	myhcan.Init.Mode = CAN_MODE_NORMAL;
 8002b1a:	4b46      	ldr	r3, [pc, #280]	; (8002c34 <init_can+0x12c>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
	myhcan.Init.SJW = CAN_SJW_1TQ;
 8002b20:	4b44      	ldr	r3, [pc, #272]	; (8002c34 <init_can+0x12c>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	60da      	str	r2, [r3, #12]
	myhcan.Init.BS1 = CAN_BS1_2TQ;
 8002b26:	4b43      	ldr	r3, [pc, #268]	; (8002c34 <init_can+0x12c>)
 8002b28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b2c:	611a      	str	r2, [r3, #16]
	myhcan.Init.BS2 = CAN_BS2_1TQ;
 8002b2e:	4b41      	ldr	r3, [pc, #260]	; (8002c34 <init_can+0x12c>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	615a      	str	r2, [r3, #20]
	myhcan.Init.TTCM = DISABLE;
 8002b34:	4b3f      	ldr	r3, [pc, #252]	; (8002c34 <init_can+0x12c>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	619a      	str	r2, [r3, #24]
	myhcan.Init.ABOM = DISABLE;
 8002b3a:	4b3e      	ldr	r3, [pc, #248]	; (8002c34 <init_can+0x12c>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	61da      	str	r2, [r3, #28]
	myhcan.Init.AWUM = DISABLE;
 8002b40:	4b3c      	ldr	r3, [pc, #240]	; (8002c34 <init_can+0x12c>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	621a      	str	r2, [r3, #32]
	myhcan.Init.NART = DISABLE;
 8002b46:	4b3b      	ldr	r3, [pc, #236]	; (8002c34 <init_can+0x12c>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	625a      	str	r2, [r3, #36]	; 0x24
	myhcan.Init.RFLM = DISABLE;
 8002b4c:	4b39      	ldr	r3, [pc, #228]	; (8002c34 <init_can+0x12c>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	629a      	str	r2, [r3, #40]	; 0x28
	myhcan.Init.TXFP = DISABLE;
 8002b52:	4b38      	ldr	r3, [pc, #224]	; (8002c34 <init_can+0x12c>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	62da      	str	r2, [r3, #44]	; 0x2c
	
	GPIO_InitTypeDef GPIO_InitStruct;
	/* Peripheral clock enable */
	__HAL_RCC_CAN1_CLK_ENABLE()
 8002b58:	4b38      	ldr	r3, [pc, #224]	; (8002c3c <init_can+0x134>)
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	4a37      	ldr	r2, [pc, #220]	; (8002c3c <init_can+0x134>)
 8002b5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b62:	61d3      	str	r3, [r2, #28]
 8002b64:	4b35      	ldr	r3, [pc, #212]	; (8002c3c <init_can+0x134>)
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6c:	607b      	str	r3, [r7, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002b70:	4b32      	ldr	r3, [pc, #200]	; (8002c3c <init_can+0x134>)
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	4a31      	ldr	r2, [pc, #196]	; (8002c3c <init_can+0x134>)
 8002b76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b7a:	6153      	str	r3, [r2, #20]
 8002b7c:	4b2f      	ldr	r3, [pc, #188]	; (8002c3c <init_can+0x134>)
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b84:	603b      	str	r3, [r7, #0]
 8002b86:	683b      	ldr	r3, [r7, #0]

	/**CAN GPIO Configuration
	 PB8     ------> CAN_RX
	 PB9     ------> CAN_TX
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8002b88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b8c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b96:	2303      	movs	r3, #3
 8002b98:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8002b9a:	2309      	movs	r3, #9
 8002b9c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b9e:	f107 0308 	add.w	r3, r7, #8
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4826      	ldr	r0, [pc, #152]	; (8002c40 <init_can+0x138>)
 8002ba6:	f7ff fb21 	bl	80021ec <HAL_GPIO_Init>

	rval = HAL_CAN_Init(&myhcan);
 8002baa:	4822      	ldr	r0, [pc, #136]	; (8002c34 <init_can+0x12c>)
 8002bac:	f001 f911 	bl	8003dd2 <HAL_CAN_Init>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (rval != HAL_OK)
 8002bb6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <init_can+0xbc>
		return -1;
 8002bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc2:	e033      	b.n	8002c2c <init_can+0x124>


	/*##-2- Configure the CAN Filter ###########################################*/
	sFilterConfig.FilterNumber = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	637b      	str	r3, [r7, #52]	; 0x34
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	63bb      	str	r3, [r7, #56]	; 0x38
	sFilterConfig.FilterIdHigh = 0x0000;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdLow = 0x0000;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterFIFOAssignment = 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterActivation = ENABLE;
 8002be4:	2301      	movs	r3, #1
 8002be6:	63fb      	str	r3, [r7, #60]	; 0x3c
	sFilterConfig.BankNumber = 14;
 8002be8:	230e      	movs	r3, #14
 8002bea:	643b      	str	r3, [r7, #64]	; 0x40

	if (HAL_CAN_ConfigFilter(&myhcan, &sFilterConfig) != HAL_OK) {
 8002bec:	f107 031c 	add.w	r3, r7, #28
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4810      	ldr	r0, [pc, #64]	; (8002c34 <init_can+0x12c>)
 8002bf4:	f001 fa02 	bl	8003ffc <HAL_CAN_ConfigFilter>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <init_can+0xfc>
		/* Filter configuration Error */
		//Error_Handler();
		return -1;
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002c02:	e013      	b.n	8002c2c <init_can+0x124>
	}
	msg.StdId = 0x124; //1BC;
 8002c04:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <init_can+0x13c>)
 8002c06:	f44f 7292 	mov.w	r2, #292	; 0x124
 8002c0a:	601a      	str	r2, [r3, #0]
	msg.ExtId = 0x12345ABA;
 8002c0c:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <init_can+0x13c>)
 8002c0e:	4a0e      	ldr	r2, [pc, #56]	; (8002c48 <init_can+0x140>)
 8002c10:	605a      	str	r2, [r3, #4]
	msg.IDE = CAN_ID_EXT;
 8002c12:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <init_can+0x13c>)
 8002c14:	2204      	movs	r2, #4
 8002c16:	609a      	str	r2, [r3, #8]
	msg.RTR = CAN_RTR_DATA;
 8002c18:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <init_can+0x13c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	60da      	str	r2, [r3, #12]

	myhcan.pTxMsg = &msg;
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <init_can+0x12c>)
 8002c20:	4a08      	ldr	r2, [pc, #32]	; (8002c44 <init_can+0x13c>)
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
	myhcan.pRxMsg = &RxMessage;
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <init_can+0x12c>)
 8002c26:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <init_can+0x144>)
 8002c28:	635a      	str	r2, [r3, #52]	; 0x34
	return 0;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3748      	adds	r7, #72	; 0x48
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000488 	.word	0x20000488
 8002c38:	40006400 	.word	0x40006400
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	48000400 	.word	0x48000400
 8002c44:	200004c8 	.word	0x200004c8
 8002c48:	12345aba 	.word	0x12345aba
 8002c4c:	200004e4 	.word	0x200004e4

08002c50 <write_can>:

int write_can(uint32_t addr, uint8_t *data, int len)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef canError;
	int index;

	if (len > 8) {
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	dd02      	ble.n	8002c68 <write_can+0x18>
		return (CAN_RET_TOO_MUCH_DATA);
 8002c62:	f06f 0301 	mvn.w	r3, #1
 8002c66:	e04f      	b.n	8002d08 <write_can+0xb8>
	}
	msg.DLC = len;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a29      	ldr	r2, [pc, #164]	; (8002d10 <write_can+0xc0>)
 8002c6c:	6113      	str	r3, [r2, #16]
	for (index = 0; index <= len; index++) {
 8002c6e:	2300      	movs	r3, #0
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	e00f      	b.n	8002c94 <write_can+0x44>
		if (index >= 8) {
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b07      	cmp	r3, #7
 8002c78:	dc11      	bgt.n	8002c9e <write_can+0x4e>
			break;
		}
		msg.Data[index] = *data++;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	60ba      	str	r2, [r7, #8]
 8002c80:	7819      	ldrb	r1, [r3, #0]
 8002c82:	4a23      	ldr	r2, [pc, #140]	; (8002d10 <write_can+0xc0>)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	4413      	add	r3, r2
 8002c88:	3314      	adds	r3, #20
 8002c8a:	460a      	mov	r2, r1
 8002c8c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index <= len; index++) {
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	3301      	adds	r3, #1
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	ddeb      	ble.n	8002c74 <write_can+0x24>
 8002c9c:	e000      	b.n	8002ca0 <write_can+0x50>
			break;
 8002c9e:	bf00      	nop
	}
	if (addr <= 0x7FF) {
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ca6:	d206      	bcs.n	8002cb6 <write_can+0x66>
		msg.StdId = addr;
 8002ca8:	4a19      	ldr	r2, [pc, #100]	; (8002d10 <write_can+0xc0>)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6013      	str	r3, [r2, #0]
		msg.IDE = CAN_ID_STD;
 8002cae:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <write_can+0xc0>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	e00d      	b.n	8002cd2 <write_can+0x82>
	} else if (addr <= 0x1FFFFFFF) {
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cbc:	d206      	bcs.n	8002ccc <write_can+0x7c>
		msg.ExtId = addr;
 8002cbe:	4a14      	ldr	r2, [pc, #80]	; (8002d10 <write_can+0xc0>)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6053      	str	r3, [r2, #4]
		msg.IDE = CAN_ID_EXT;
 8002cc4:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <write_can+0xc0>)
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	609a      	str	r2, [r3, #8]
 8002cca:	e002      	b.n	8002cd2 <write_can+0x82>
	} else {
		return (CAN_RET_BAD_ADDRESS);
 8002ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd0:	e01a      	b.n	8002d08 <write_can+0xb8>
	}

	// Transmit the data.
	canError = HAL_CAN_Transmit(&myhcan, 100);
 8002cd2:	2164      	movs	r1, #100	; 0x64
 8002cd4:	480f      	ldr	r0, [pc, #60]	; (8002d14 <write_can+0xc4>)
 8002cd6:	f001 fa91 	bl	80041fc <HAL_CAN_Transmit>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	74fb      	strb	r3, [r7, #19]

	if (myhcan.State == HAL_CAN_STATE_TIMEOUT) {
 8002cde:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <write_can+0xc4>)
 8002ce0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d104      	bne.n	8002cf4 <write_can+0xa4>
		//restart bus?
		HAL_CAN_DeInit(&myhcan);
 8002cea:	480a      	ldr	r0, [pc, #40]	; (8002d14 <write_can+0xc4>)
 8002cec:	f001 fa55 	bl	800419a <HAL_CAN_DeInit>
		init_can();
 8002cf0:	f7ff ff0a 	bl	8002b08 <init_can>
	}
	if (canError == HAL_OK) {
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <write_can+0xae>
		return (index);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	e004      	b.n	8002d08 <write_can+0xb8>
	}
	return (can_return_error(canError));
 8002cfe:	7cfb      	ldrb	r3, [r7, #19]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fee1 	bl	8002ac8 <can_return_error>
 8002d06:	4603      	mov	r3, r0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	200004c8 	.word	0x200004c8
 8002d14:	20000488 	.word	0x20000488

08002d18 <HAL_ADC_MspInit>:

/////////////////////////ADC/////////////////////////////
#define ADC_READ_TIMEOUT 500
static ADC_HandleTypeDef myadc;
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 8002d20:	bf00      	nop
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <init_adc>:

int init_adc(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08e      	sub	sp, #56	; 0x38
 8002d30:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef gpio;
	gpio.Pin = GPIO_PIN_14;
 8002d32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24
	gpio.Mode = GPIO_MODE_ANALOG;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio.Pull = GPIO_NOPULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d40:	2303      	movs	r3, #3
 8002d42:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &gpio);
 8002d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d48:	4619      	mov	r1, r3
 8002d4a:	483c      	ldr	r0, [pc, #240]	; (8002e3c <init_adc+0x110>)
 8002d4c:	f7ff fa4e 	bl	80021ec <HAL_GPIO_Init>
	
	__HAL_RCC_ADC34_CLK_ENABLE();
 8002d50:	4b3b      	ldr	r3, [pc, #236]	; (8002e40 <init_adc+0x114>)
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	4a3a      	ldr	r2, [pc, #232]	; (8002e40 <init_adc+0x114>)
 8002d56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d5a:	6153      	str	r3, [r2, #20]
 8002d5c:	4b38      	ldr	r3, [pc, #224]	; (8002e40 <init_adc+0x114>)
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d64:	60bb      	str	r3, [r7, #8]
 8002d66:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002d68:	4b35      	ldr	r3, [pc, #212]	; (8002e40 <init_adc+0x114>)
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	4a34      	ldr	r2, [pc, #208]	; (8002e40 <init_adc+0x114>)
 8002d6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d72:	6153      	str	r3, [r2, #20]
 8002d74:	4b32      	ldr	r3, [pc, #200]	; (8002e40 <init_adc+0x114>)
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d7c:	607b      	str	r3, [r7, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]

	//init_ADC_pin();
	myadc.Instance = ADC4;
 8002d80:	4b30      	ldr	r3, [pc, #192]	; (8002e44 <init_adc+0x118>)
 8002d82:	4a31      	ldr	r2, [pc, #196]	; (8002e48 <init_adc+0x11c>)
 8002d84:	601a      	str	r2, [r3, #0]

	myadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4; //div by 4 rec for 12 and 10 bit
 8002d86:	4b2f      	ldr	r3, [pc, #188]	; (8002e44 <init_adc+0x118>)
 8002d88:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002d8c:	605a      	str	r2, [r3, #4]
	myadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002d8e:	4b2d      	ldr	r3, [pc, #180]	; (8002e44 <init_adc+0x118>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	609a      	str	r2, [r3, #8]
	myadc.Init.DataAlign = ADC_DATAALIGN_RIGHT; //lsb at bit 0
 8002d94:	4b2b      	ldr	r3, [pc, #172]	; (8002e44 <init_adc+0x118>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	60da      	str	r2, [r3, #12]
	myadc.Init.ScanConvMode = ADC_SCAN_ENABLE; //just one channel needed, so no scanning
 8002d9a:	4b2a      	ldr	r3, [pc, #168]	; (8002e44 <init_adc+0x118>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	611a      	str	r2, [r3, #16]
	myadc.Init.EOCSelection = DISABLE;//ADC_EOC_SINGLE_CONV; //does this matter with one channel?
 8002da0:	4b28      	ldr	r3, [pc, #160]	; (8002e44 <init_adc+0x118>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	615a      	str	r2, [r3, #20]
	myadc.Init.LowPowerAutoWait = DISABLE;
 8002da6:	4b27      	ldr	r3, [pc, #156]	; (8002e44 <init_adc+0x118>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	619a      	str	r2, [r3, #24]
	myadc.Init.ContinuousConvMode = ENABLE; //single mode now
 8002dac:	4b25      	ldr	r3, [pc, #148]	; (8002e44 <init_adc+0x118>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	61da      	str	r2, [r3, #28]
	myadc.Init.NbrOfConversion = 1; //does this matter for single channel?
 8002db2:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <init_adc+0x118>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	621a      	str	r2, [r3, #32]
	myadc.Init.DiscontinuousConvMode = DISABLE; //discarded with continuous mode
 8002db8:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <init_adc+0x118>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	625a      	str	r2, [r3, #36]	; 0x24
	myadc.Init.NbrOfDiscConversion = 1; //discarded without Discont mode
 8002dbe:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <init_adc+0x118>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	629a      	str	r2, [r3, #40]	; 0x28
	myadc.Init.ExternalTrigConv = ADC_SOFTWARE_START; //start ADC with software, not ext trigger
 8002dc4:	4b1f      	ldr	r3, [pc, #124]	; (8002e44 <init_adc+0x118>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	62da      	str	r2, [r3, #44]	; 0x2c
	myadc.Init.ExternalTrigConvEdge = 0; //discarded with software start
 8002dca:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <init_adc+0x118>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	; 0x30
	myadc.Init.DMAContinuousRequests = DISABLE;
 8002dd0:	4b1c      	ldr	r3, [pc, #112]	; (8002e44 <init_adc+0x118>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	635a      	str	r2, [r3, #52]	; 0x34
	myadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN; //overwrite if data not read before next conversion is done
 8002dd6:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <init_adc+0x118>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	639a      	str	r2, [r3, #56]	; 0x38

	if (HAL_ADC_Init(&myadc) != HAL_OK) {
 8002ddc:	4819      	ldr	r0, [pc, #100]	; (8002e44 <init_adc+0x118>)
 8002dde:	f000 f853 	bl	8002e88 <HAL_ADC_Init>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <init_adc+0xc2>
		//send error message
		return ADC_RET_ADC_INIT;
 8002de8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dec:	e021      	b.n	8002e32 <init_adc+0x106>
	}

	ADC_ChannelConfTypeDef channel;
	channel.Channel = ADC_CHANNEL_4; //PB14
 8002dee:	2304      	movs	r3, #4
 8002df0:	60fb      	str	r3, [r7, #12]
	channel.Rank = ADC_REGULAR_RANK_1; //single conversion, does this matter?
 8002df2:	2301      	movs	r3, #1
 8002df4:	613b      	str	r3, [r7, #16]
	channel.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8002df6:	2304      	movs	r3, #4
 8002df8:	617b      	str	r3, [r7, #20]
	channel.SingleDiff = ADC_SINGLE_ENDED;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
	channel.OffsetNumber = ADC_OFFSET_NONE;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
	channel.Offset = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	623b      	str	r3, [r7, #32]

	if (HAL_ADC_ConfigChannel(&myadc, &channel) != HAL_OK) {
 8002e06:	f107 030c 	add.w	r3, r7, #12
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	480d      	ldr	r0, [pc, #52]	; (8002e44 <init_adc+0x118>)
 8002e0e:	f000 fc37 	bl	8003680 <HAL_ADC_ConfigChannel>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <init_adc+0xf2>
		//send error
		return ADC_RET_CHANNEL_INIT;
 8002e18:	f06f 0301 	mvn.w	r3, #1
 8002e1c:	e009      	b.n	8002e32 <init_adc+0x106>
	}

	if (HAL_ADC_Start(&myadc) != HAL_OK) {
 8002e1e:	4809      	ldr	r0, [pc, #36]	; (8002e44 <init_adc+0x118>)
 8002e20:	f000 fa10 	bl	8003244 <HAL_ADC_Start>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <init_adc+0x104>
			return ADC_RET_ADC_START;
 8002e2a:	f06f 0302 	mvn.w	r3, #2
 8002e2e:	e000      	b.n	8002e32 <init_adc+0x106>
	}

	return 0;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3738      	adds	r7, #56	; 0x38
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	48000400 	.word	0x48000400
 8002e40:	40021000 	.word	0x40021000
 8002e44:	20000508 	.word	0x20000508
 8002e48:	50000500 	.word	0x50000500

08002e4c <read_adc>:

int read_adc(uint16_t *val)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	if (HAL_ADC_PollForConversion(&myadc, ADC_READ_TIMEOUT) == HAL_OK) {
 8002e54:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002e58:	480a      	ldr	r0, [pc, #40]	; (8002e84 <read_adc+0x38>)
 8002e5a:	f000 fb09 	bl	8003470 <HAL_ADC_PollForConversion>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d108      	bne.n	8002e76 <read_adc+0x2a>
		//good to read
		*val = HAL_ADC_GetValue(&myadc);
 8002e64:	4807      	ldr	r0, [pc, #28]	; (8002e84 <read_adc+0x38>)
 8002e66:	f000 fbfd 	bl	8003664 <HAL_ADC_GetValue>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	801a      	strh	r2, [r3, #0]
	} else {
		//error
		return ADC_RET_ADC_TIMEOUT;
	}

	return 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	e001      	b.n	8002e7a <read_adc+0x2e>
		return ADC_RET_ADC_TIMEOUT;
 8002e76:	f06f 0303 	mvn.w	r3, #3
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000508 	.word	0x20000508

08002e88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b09c      	sub	sp, #112	; 0x70
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e90:	2300      	movs	r3, #0
 8002e92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	66bb      	str	r3, [r7, #104]	; 0x68
  __IO uint32_t wait_loop_index = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e1c6      	b.n	8003236 <HAL_ADC_Init+0x3ae>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d175      	bne.n	8002fa6 <HAL_ADC_Init+0x11e>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d152      	bne.n	8002f68 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	651a      	str	r2, [r3, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7ff ff1b 	bl	8002d18 <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d13b      	bne.n	8002f68 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 ff0f 	bl	8003d14 <ADC_Disable>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d12f      	bne.n	8002f68 <HAL_ADC_Init+0xe0>
 8002f08:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d12b      	bne.n	8002f68 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f18:	f023 0302 	bic.w	r3, r3, #2
 8002f1c:	f043 0202 	orr.w	r2, r3, #2
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	645a      	str	r2, [r3, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f32:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f42:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f44:	4b85      	ldr	r3, [pc, #532]	; (800315c <HAL_ADC_Init+0x2d4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a85      	ldr	r2, [pc, #532]	; (8003160 <HAL_ADC_Init+0x2d8>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	0c9a      	lsrs	r2, r3, #18
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8002f5a:	e002      	b.n	8002f62 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f9      	bne.n	8002f5c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d006      	beq.n	8002f84 <HAL_ADC_Init+0xfc>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d010      	beq.n	8002fa6 <HAL_ADC_Init+0x11e>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f88:	f023 0312 	bic.w	r3, r3, #18
 8002f8c:	f043 0210 	orr.w	r2, r3, #16
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f98:	f043 0201 	orr.w	r2, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f040 8134 	bne.w	800321c <HAL_ADC_Init+0x394>
 8002fb4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f040 812f 	bne.w	800321c <HAL_ADC_Init+0x394>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f040 8127 	bne.w	800321c <HAL_ADC_Init+0x394>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002fd6:	f043 0202 	orr.w	r2, r3, #2
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fe6:	d004      	beq.n	8002ff2 <HAL_ADC_Init+0x16a>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a5d      	ldr	r2, [pc, #372]	; (8003164 <HAL_ADC_Init+0x2dc>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d101      	bne.n	8002ff6 <HAL_ADC_Init+0x16e>
 8002ff2:	4b5d      	ldr	r3, [pc, #372]	; (8003168 <HAL_ADC_Init+0x2e0>)
 8002ff4:	e000      	b.n	8002ff8 <HAL_ADC_Init+0x170>
 8002ff6:	4b5d      	ldr	r3, [pc, #372]	; (800316c <HAL_ADC_Init+0x2e4>)
 8002ff8:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003002:	d102      	bne.n	800300a <HAL_ADC_Init+0x182>
 8003004:	4b57      	ldr	r3, [pc, #348]	; (8003164 <HAL_ADC_Init+0x2dc>)
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	e01a      	b.n	8003040 <HAL_ADC_Init+0x1b8>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a55      	ldr	r2, [pc, #340]	; (8003164 <HAL_ADC_Init+0x2dc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d103      	bne.n	800301c <HAL_ADC_Init+0x194>
 8003014:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	e011      	b.n	8003040 <HAL_ADC_Init+0x1b8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a53      	ldr	r2, [pc, #332]	; (8003170 <HAL_ADC_Init+0x2e8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d102      	bne.n	800302c <HAL_ADC_Init+0x1a4>
 8003026:	4b53      	ldr	r3, [pc, #332]	; (8003174 <HAL_ADC_Init+0x2ec>)
 8003028:	613b      	str	r3, [r7, #16]
 800302a:	e009      	b.n	8003040 <HAL_ADC_Init+0x1b8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a50      	ldr	r2, [pc, #320]	; (8003174 <HAL_ADC_Init+0x2ec>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d102      	bne.n	800303c <HAL_ADC_Init+0x1b4>
 8003036:	4b4e      	ldr	r3, [pc, #312]	; (8003170 <HAL_ADC_Init+0x2e8>)
 8003038:	613b      	str	r3, [r7, #16]
 800303a:	e001      	b.n	8003040 <HAL_ADC_Init+0x1b8>
 800303c:	2300      	movs	r3, #0
 800303e:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d108      	bne.n	8003060 <HAL_ADC_Init+0x1d8>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_ADC_Init+0x1d8>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <HAL_ADC_Init+0x1da>
 8003060:	2300      	movs	r3, #0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d11c      	bne.n	80030a0 <HAL_ADC_Init+0x218>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003066:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8003068:	2b00      	cmp	r3, #0
 800306a:	d010      	beq.n	800308e <HAL_ADC_Init+0x206>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	2b01      	cmp	r3, #1
 8003076:	d107      	bne.n	8003088 <HAL_ADC_Init+0x200>
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_ADC_Init+0x200>
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <HAL_ADC_Init+0x202>
 8003088:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800308a:	2b00      	cmp	r3, #0
 800308c:	d108      	bne.n	80030a0 <HAL_ADC_Init+0x218>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800308e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	431a      	orrs	r2, r3
 800309c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800309e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	035b      	lsls	r3, r3, #13
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030aa:	2a01      	cmp	r2, #1
 80030ac:	d002      	beq.n	80030b4 <HAL_ADC_Init+0x22c>
 80030ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030b2:	e000      	b.n	80030b6 <HAL_ADC_Init+0x22e>
 80030b4:	2200      	movs	r2, #0
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80030c6:	4313      	orrs	r3, r2
 80030c8:	66bb      	str	r3, [r7, #104]	; 0x68
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d11b      	bne.n	800310a <HAL_ADC_Init+0x282>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <HAL_ADC_Init+0x266>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030de:	3b01      	subs	r3, #1
 80030e0:	045a      	lsls	r2, r3, #17
 80030e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80030ec:	e00d      	b.n	800310a <HAL_ADC_Init+0x282>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80030f6:	f043 0220 	orr.w	r2, r3, #32
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003102:	f043 0201 	orr.w	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310e:	2b01      	cmp	r3, #1
 8003110:	d03a      	beq.n	8003188 <HAL_ADC_Init+0x300>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a16      	ldr	r2, [pc, #88]	; (8003170 <HAL_ADC_Init+0x2e8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d004      	beq.n	8003126 <HAL_ADC_Init+0x29e>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a14      	ldr	r2, [pc, #80]	; (8003174 <HAL_ADC_Init+0x2ec>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d128      	bne.n	8003178 <HAL_ADC_Init+0x2f0>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312a:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800312e:	d012      	beq.n	8003156 <HAL_ADC_Init+0x2ce>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003138:	d00a      	beq.n	8003150 <HAL_ADC_Init+0x2c8>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8003142:	d002      	beq.n	800314a <HAL_ADC_Init+0x2c2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003148:	e018      	b.n	800317c <HAL_ADC_Init+0x2f4>
 800314a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800314e:	e015      	b.n	800317c <HAL_ADC_Init+0x2f4>
 8003150:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003154:	e012      	b.n	800317c <HAL_ADC_Init+0x2f4>
 8003156:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800315a:	e00f      	b.n	800317c <HAL_ADC_Init+0x2f4>
 800315c:	20000030 	.word	0x20000030
 8003160:	431bde83 	.word	0x431bde83
 8003164:	50000100 	.word	0x50000100
 8003168:	50000300 	.word	0x50000300
 800316c:	50000700 	.word	0x50000700
 8003170:	50000400 	.word	0x50000400
 8003174:	50000500 	.word	0x50000500
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003180:	4313      	orrs	r3, r2
 8003182:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003184:	4313      	orrs	r3, r2
 8003186:	66bb      	str	r3, [r7, #104]	; 0x68
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
 8003192:	2b00      	cmp	r3, #0
 8003194:	d113      	bne.n	80031be <HAL_ADC_Init+0x336>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031a4:	f023 0302 	bic.w	r3, r3, #2
 80031a8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	039a      	lsls	r2, r3, #14
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	4313      	orrs	r3, r2
 80031b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80031ba:	4313      	orrs	r3, r2
 80031bc:	66bb      	str	r3, [r7, #104]	; 0x68
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	4b1e      	ldr	r3, [pc, #120]	; (8003240 <HAL_ADC_Init+0x3b8>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6812      	ldr	r2, [r2, #0]
 80031cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80031ce:	430b      	orrs	r3, r1
 80031d0:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d10c      	bne.n	80031f4 <HAL_ADC_Init+0x36c>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e0:	f023 010f 	bic.w	r1, r3, #15
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	1e5a      	subs	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
 80031f2:	e007      	b.n	8003204 <HAL_ADC_Init+0x37c>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 020f 	bic.w	r2, r2, #15
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800320e:	f023 0303 	bic.w	r3, r3, #3
 8003212:	f043 0201 	orr.w	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	645a      	str	r2, [r3, #68]	; 0x44
 800321a:	e00a      	b.n	8003232 <HAL_ADC_Init+0x3aa>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003220:	f023 0312 	bic.w	r3, r3, #18
 8003224:	f043 0210 	orr.w	r2, r3, #16
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800322c:	2301      	movs	r3, #1
 800322e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003232:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8003236:	4618      	mov	r0, r3
 8003238:	3770      	adds	r7, #112	; 0x70
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	fff0c007 	.word	0xfff0c007

08003244 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800324c:	2300      	movs	r3, #0
 800324e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	f040 80f8 	bne.w	8003450 <HAL_ADC_Start+0x20c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_ADC_Start+0x2a>
 800326a:	2302      	movs	r3, #2
 800326c:	e0f3      	b.n	8003456 <HAL_ADC_Start+0x212>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fcee 	bl	8003c58 <ADC_Enable>
 800327c:	4603      	mov	r3, r0
 800327e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	2b00      	cmp	r3, #0
 8003284:	f040 80df 	bne.w	8003446 <HAL_ADC_Start+0x202>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032a4:	d004      	beq.n	80032b0 <HAL_ADC_Start+0x6c>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a6d      	ldr	r2, [pc, #436]	; (8003460 <HAL_ADC_Start+0x21c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d106      	bne.n	80032be <HAL_ADC_Start+0x7a>
 80032b0:	4b6c      	ldr	r3, [pc, #432]	; (8003464 <HAL_ADC_Start+0x220>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 031f 	and.w	r3, r3, #31
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d010      	beq.n	80032de <HAL_ADC_Start+0x9a>
 80032bc:	e005      	b.n	80032ca <HAL_ADC_Start+0x86>
 80032be:	4b6a      	ldr	r3, [pc, #424]	; (8003468 <HAL_ADC_Start+0x224>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 031f 	and.w	r3, r3, #31
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_ADC_Start+0x9a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032d2:	d004      	beq.n	80032de <HAL_ADC_Start+0x9a>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a64      	ldr	r2, [pc, #400]	; (800346c <HAL_ADC_Start+0x228>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d115      	bne.n	800330a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d036      	beq.n	8003366 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003300:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	645a      	str	r2, [r3, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8003308:	e02d      	b.n	8003366 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800331e:	d004      	beq.n	800332a <HAL_ADC_Start+0xe6>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a4e      	ldr	r2, [pc, #312]	; (8003460 <HAL_ADC_Start+0x21c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d10a      	bne.n	8003340 <HAL_ADC_Start+0xfc>
 800332a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf14      	ite	ne
 8003338:	2301      	movne	r3, #1
 800333a:	2300      	moveq	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	e008      	b.n	8003352 <HAL_ADC_Start+0x10e>
 8003340:	4b4a      	ldr	r3, [pc, #296]	; (800346c <HAL_ADC_Start+0x228>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	bf14      	ite	ne
 800334c:	2301      	movne	r3, #1
 800334e:	2300      	moveq	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d007      	beq.n	8003366 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800335e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d006      	beq.n	8003380 <HAL_ADC_Start+0x13c>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003376:	f023 0206 	bic.w	r2, r3, #6
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	649a      	str	r2, [r3, #72]	; 0x48
 800337e:	e002      	b.n	8003386 <HAL_ADC_Start+0x142>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	649a      	str	r2, [r3, #72]	; 0x48
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	221c      	movs	r2, #28
 8003394:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800339e:	d004      	beq.n	80033aa <HAL_ADC_Start+0x166>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a2e      	ldr	r2, [pc, #184]	; (8003460 <HAL_ADC_Start+0x21c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d106      	bne.n	80033b8 <HAL_ADC_Start+0x174>
 80033aa:	4b2e      	ldr	r3, [pc, #184]	; (8003464 <HAL_ADC_Start+0x220>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 031f 	and.w	r3, r3, #31
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d03e      	beq.n	8003434 <HAL_ADC_Start+0x1f0>
 80033b6:	e005      	b.n	80033c4 <HAL_ADC_Start+0x180>
 80033b8:	4b2b      	ldr	r3, [pc, #172]	; (8003468 <HAL_ADC_Start+0x224>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 031f 	and.w	r3, r3, #31
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d037      	beq.n	8003434 <HAL_ADC_Start+0x1f0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033cc:	d004      	beq.n	80033d8 <HAL_ADC_Start+0x194>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a23      	ldr	r2, [pc, #140]	; (8003460 <HAL_ADC_Start+0x21c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d106      	bne.n	80033e6 <HAL_ADC_Start+0x1a2>
 80033d8:	4b22      	ldr	r3, [pc, #136]	; (8003464 <HAL_ADC_Start+0x220>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f003 031f 	and.w	r3, r3, #31
 80033e0:	2b05      	cmp	r3, #5
 80033e2:	d027      	beq.n	8003434 <HAL_ADC_Start+0x1f0>
 80033e4:	e005      	b.n	80033f2 <HAL_ADC_Start+0x1ae>
 80033e6:	4b20      	ldr	r3, [pc, #128]	; (8003468 <HAL_ADC_Start+0x224>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 031f 	and.w	r3, r3, #31
 80033ee:	2b05      	cmp	r3, #5
 80033f0:	d020      	beq.n	8003434 <HAL_ADC_Start+0x1f0>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033fa:	d004      	beq.n	8003406 <HAL_ADC_Start+0x1c2>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a17      	ldr	r2, [pc, #92]	; (8003460 <HAL_ADC_Start+0x21c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d106      	bne.n	8003414 <HAL_ADC_Start+0x1d0>
 8003406:	4b17      	ldr	r3, [pc, #92]	; (8003464 <HAL_ADC_Start+0x220>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 031f 	and.w	r3, r3, #31
 800340e:	2b09      	cmp	r3, #9
 8003410:	d010      	beq.n	8003434 <HAL_ADC_Start+0x1f0>
 8003412:	e005      	b.n	8003420 <HAL_ADC_Start+0x1dc>
 8003414:	4b14      	ldr	r3, [pc, #80]	; (8003468 <HAL_ADC_Start+0x224>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	2b09      	cmp	r3, #9
 800341e:	d009      	beq.n	8003434 <HAL_ADC_Start+0x1f0>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003428:	d004      	beq.n	8003434 <HAL_ADC_Start+0x1f0>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a0f      	ldr	r2, [pc, #60]	; (800346c <HAL_ADC_Start+0x228>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d10f      	bne.n	8003454 <HAL_ADC_Start+0x210>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0204 	orr.w	r2, r2, #4
 8003442:	609a      	str	r2, [r3, #8]
 8003444:	e006      	b.n	8003454 <HAL_ADC_Start+0x210>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800344e:	e001      	b.n	8003454 <HAL_ADC_Start+0x210>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003450:	2302      	movs	r3, #2
 8003452:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003454:	7bfb      	ldrb	r3, [r7, #15]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	50000100 	.word	0x50000100
 8003464:	50000300 	.word	0x50000300
 8003468:	50000700 	.word	0x50000700
 800346c:	50000400 	.word	0x50000400

08003470 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b086      	sub	sp, #24
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	2b08      	cmp	r3, #8
 8003484:	d102      	bne.n	800348c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003486:	2308      	movs	r3, #8
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	e03a      	b.n	8003502 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003494:	d004      	beq.n	80034a0 <HAL_ADC_PollForConversion+0x30>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a6e      	ldr	r2, [pc, #440]	; (8003654 <HAL_ADC_PollForConversion+0x1e4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d101      	bne.n	80034a4 <HAL_ADC_PollForConversion+0x34>
 80034a0:	4b6d      	ldr	r3, [pc, #436]	; (8003658 <HAL_ADC_PollForConversion+0x1e8>)
 80034a2:	e000      	b.n	80034a6 <HAL_ADC_PollForConversion+0x36>
 80034a4:	4b6d      	ldr	r3, [pc, #436]	; (800365c <HAL_ADC_PollForConversion+0x1ec>)
 80034a6:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d112      	bne.n	80034da <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d01d      	beq.n	80034fe <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	f043 0220 	orr.w	r2, r3, #32
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e0b8      	b.n	800364c <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00b      	beq.n	80034fe <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	f043 0220 	orr.w	r2, r3, #32
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0a6      	b.n	800364c <HAL_ADC_PollForConversion+0x1dc>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80034fe:	230c      	movs	r3, #12
 8003500:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800350a:	d004      	beq.n	8003516 <HAL_ADC_PollForConversion+0xa6>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a50      	ldr	r2, [pc, #320]	; (8003654 <HAL_ADC_PollForConversion+0x1e4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d106      	bne.n	8003524 <HAL_ADC_PollForConversion+0xb4>
 8003516:	4b50      	ldr	r3, [pc, #320]	; (8003658 <HAL_ADC_PollForConversion+0x1e8>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 031f 	and.w	r3, r3, #31
 800351e:	2b00      	cmp	r3, #0
 8003520:	d010      	beq.n	8003544 <HAL_ADC_PollForConversion+0xd4>
 8003522:	e005      	b.n	8003530 <HAL_ADC_PollForConversion+0xc0>
 8003524:	4b4d      	ldr	r3, [pc, #308]	; (800365c <HAL_ADC_PollForConversion+0x1ec>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	2b00      	cmp	r3, #0
 800352e:	d009      	beq.n	8003544 <HAL_ADC_PollForConversion+0xd4>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003538:	d004      	beq.n	8003544 <HAL_ADC_PollForConversion+0xd4>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a48      	ldr	r2, [pc, #288]	; (8003660 <HAL_ADC_PollForConversion+0x1f0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d104      	bne.n	800354e <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	e00f      	b.n	800356e <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003556:	d004      	beq.n	8003562 <HAL_ADC_PollForConversion+0xf2>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a3d      	ldr	r2, [pc, #244]	; (8003654 <HAL_ADC_PollForConversion+0x1e4>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d102      	bne.n	8003568 <HAL_ADC_PollForConversion+0xf8>
 8003562:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003566:	e000      	b.n	800356a <HAL_ADC_PollForConversion+0xfa>
 8003568:	4b3d      	ldr	r3, [pc, #244]	; (8003660 <HAL_ADC_PollForConversion+0x1f0>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 800356e:	f7fd fd87 	bl	8001080 <HAL_GetTick>
 8003572:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003574:	e01a      	b.n	80035ac <HAL_ADC_PollForConversion+0x13c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d016      	beq.n	80035ac <HAL_ADC_PollForConversion+0x13c>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d007      	beq.n	8003594 <HAL_ADC_PollForConversion+0x124>
 8003584:	f7fd fd7c 	bl	8001080 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	429a      	cmp	r2, r3
 8003592:	d20b      	bcs.n	80035ac <HAL_ADC_PollForConversion+0x13c>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003598:	f043 0204 	orr.w	r2, r3, #4
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e04f      	b.n	800364c <HAL_ADC_PollForConversion+0x1dc>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0dd      	beq.n	8003576 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d131      	bne.n	8003638 <HAL_ADC_PollForConversion+0x1c8>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d12c      	bne.n	8003638 <HAL_ADC_PollForConversion+0x1c8>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d125      	bne.n	8003638 <HAL_ADC_PollForConversion+0x1c8>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d112      	bne.n	8003620 <HAL_ADC_PollForConversion+0x1b0>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	645a      	str	r2, [r3, #68]	; 0x44
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800360a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d112      	bne.n	8003638 <HAL_ADC_PollForConversion+0x1c8>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	f043 0201 	orr.w	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	645a      	str	r2, [r3, #68]	; 0x44
 800361e:	e00b      	b.n	8003638 <HAL_ADC_PollForConversion+0x1c8>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	f043 0220 	orr.w	r2, r3, #32
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003630:	f043 0201 	orr.w	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	649a      	str	r2, [r3, #72]	; 0x48
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d103      	bne.n	800364a <HAL_ADC_PollForConversion+0x1da>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	50000100 	.word	0x50000100
 8003658:	50000300 	.word	0x50000300
 800365c:	50000700 	.word	0x50000700
 8003660:	50000400 	.word	0x50000400

08003664 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003672:	4618      	mov	r0, r3
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	0000      	movs	r0, r0

08003680 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003680:	b480      	push	{r7}
 8003682:	b09d      	sub	sp, #116	; 0x74
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x22>
 800369e:	2302      	movs	r3, #2
 80036a0:	e2cb      	b.n	8003c3a <HAL_ADC_ConfigChannel+0x5ba>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f040 82af 	bne.w	8003c18 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d81c      	bhi.n	80036fc <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	4413      	add	r3, r2
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	461a      	mov	r2, r3
 80036d6:	231f      	movs	r3, #31
 80036d8:	4093      	lsls	r3, r2
 80036da:	43db      	mvns	r3, r3
 80036dc:	4019      	ands	r1, r3
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	4413      	add	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	fa00 f203 	lsl.w	r2, r0, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30
 80036fa:	e063      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2b09      	cmp	r3, #9
 8003702:	d81e      	bhi.n	8003742 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	4413      	add	r3, r2
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	3b1e      	subs	r3, #30
 8003718:	221f      	movs	r2, #31
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	4019      	ands	r1, r3
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	4413      	add	r3, r2
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	3b1e      	subs	r3, #30
 8003734:	fa00 f203 	lsl.w	r2, r0, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	635a      	str	r2, [r3, #52]	; 0x34
 8003740:	e040      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b0e      	cmp	r3, #14
 8003748:	d81e      	bhi.n	8003788 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	4413      	add	r3, r2
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	3b3c      	subs	r3, #60	; 0x3c
 800375e:	221f      	movs	r2, #31
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43db      	mvns	r3, r3
 8003766:	4019      	ands	r1, r3
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	4413      	add	r3, r2
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	3b3c      	subs	r3, #60	; 0x3c
 800377a:	fa00 f203 	lsl.w	r2, r0, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	639a      	str	r2, [r3, #56]	; 0x38
 8003786:	e01d      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	3b5a      	subs	r3, #90	; 0x5a
 800379c:	221f      	movs	r2, #31
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	4019      	ands	r1, r3
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	4413      	add	r3, r2
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	3b5a      	subs	r3, #90	; 0x5a
 80037b8:	fa00 f203 	lsl.w	r2, r0, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f040 80e5 	bne.w	800399e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b09      	cmp	r3, #9
 80037da:	d91c      	bls.n	8003816 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6999      	ldr	r1, [r3, #24]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	4613      	mov	r3, r2
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	4413      	add	r3, r2
 80037ec:	3b1e      	subs	r3, #30
 80037ee:	2207      	movs	r2, #7
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	4019      	ands	r1, r3
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	6898      	ldr	r0, [r3, #8]
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	4613      	mov	r3, r2
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	4413      	add	r3, r2
 8003806:	3b1e      	subs	r3, #30
 8003808:	fa00 f203 	lsl.w	r2, r0, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	619a      	str	r2, [r3, #24]
 8003814:	e019      	b.n	800384a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6959      	ldr	r1, [r3, #20]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4613      	mov	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	2207      	movs	r2, #7
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	4019      	ands	r1, r3
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	6898      	ldr	r0, [r3, #8]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4613      	mov	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4413      	add	r3, r2
 800383e:	fa00 f203 	lsl.w	r2, r0, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	695a      	ldr	r2, [r3, #20]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	08db      	lsrs	r3, r3, #3
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	66bb      	str	r3, [r7, #104]	; 0x68
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	3b01      	subs	r3, #1
 8003868:	2b03      	cmp	r3, #3
 800386a:	d84f      	bhi.n	800390c <HAL_ADC_ConfigChannel+0x28c>
 800386c:	a201      	add	r2, pc, #4	; (adr r2, 8003874 <HAL_ADC_ConfigChannel+0x1f4>)
 800386e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003872:	bf00      	nop
 8003874:	08003885 	.word	0x08003885
 8003878:	080038a7 	.word	0x080038a7
 800387c:	080038c9 	.word	0x080038c9
 8003880:	080038eb 	.word	0x080038eb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800388a:	4b9f      	ldr	r3, [pc, #636]	; (8003b08 <HAL_ADC_ConfigChannel+0x488>)
 800388c:	4013      	ands	r3, r2
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	6812      	ldr	r2, [r2, #0]
 8003892:	0691      	lsls	r1, r2, #26
 8003894:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003896:	430a      	orrs	r2, r1
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80038a2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80038a4:	e07e      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80038ac:	4b96      	ldr	r3, [pc, #600]	; (8003b08 <HAL_ADC_ConfigChannel+0x488>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	6812      	ldr	r2, [r2, #0]
 80038b4:	0691      	lsls	r1, r2, #26
 80038b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038b8:	430a      	orrs	r2, r1
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80038c4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80038c6:	e06d      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80038ce:	4b8e      	ldr	r3, [pc, #568]	; (8003b08 <HAL_ADC_ConfigChannel+0x488>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	0691      	lsls	r1, r2, #26
 80038d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038da:	430a      	orrs	r2, r1
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80038e6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80038e8:	e05c      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80038f0:	4b85      	ldr	r3, [pc, #532]	; (8003b08 <HAL_ADC_ConfigChannel+0x488>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	0691      	lsls	r1, r2, #26
 80038fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038fc:	430a      	orrs	r2, r1
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003908:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800390a:	e04b      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003912:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	069b      	lsls	r3, r3, #26
 800391c:	429a      	cmp	r2, r3
 800391e:	d107      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800392e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003936:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	069b      	lsls	r3, r3, #26
 8003940:	429a      	cmp	r2, r3
 8003942:	d107      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003952:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800395a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	069b      	lsls	r3, r3, #26
 8003964:	429a      	cmp	r2, r3
 8003966:	d107      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003976:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800397e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	069b      	lsls	r3, r3, #26
 8003988:	429a      	cmp	r2, r3
 800398a:	d10a      	bne.n	80039a2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800399a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800399c:	e001      	b.n	80039a2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800399e:	bf00      	nop
 80039a0:	e000      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x324>
      break;
 80039a2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d108      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x344>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x344>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <HAL_ADC_ConfigChannel+0x346>
 80039c4:	2300      	movs	r3, #0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f040 8131 	bne.w	8003c2e <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d00f      	beq.n	80039f4 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2201      	movs	r2, #1
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43da      	mvns	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	400a      	ands	r2, r1
 80039ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80039f2:	e049      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2201      	movs	r2, #1
 8003a02:	409a      	lsls	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2b09      	cmp	r3, #9
 8003a14:	d91c      	bls.n	8003a50 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6999      	ldr	r1, [r3, #24]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4613      	mov	r3, r2
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	4413      	add	r3, r2
 8003a26:	3b1b      	subs	r3, #27
 8003a28:	2207      	movs	r2, #7
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	4019      	ands	r1, r3
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	6898      	ldr	r0, [r3, #8]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	4413      	add	r3, r2
 8003a40:	3b1b      	subs	r3, #27
 8003a42:	fa00 f203 	lsl.w	r2, r0, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	619a      	str	r2, [r3, #24]
 8003a4e:	e01b      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6959      	ldr	r1, [r3, #20]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	4413      	add	r3, r2
 8003a62:	2207      	movs	r2, #7
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	4019      	ands	r1, r3
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	6898      	ldr	r0, [r3, #8]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	1c5a      	adds	r2, r3, #1
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a90:	d004      	beq.n	8003a9c <HAL_ADC_ConfigChannel+0x41c>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a1d      	ldr	r2, [pc, #116]	; (8003b0c <HAL_ADC_ConfigChannel+0x48c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d101      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x420>
 8003a9c:	4b1c      	ldr	r3, [pc, #112]	; (8003b10 <HAL_ADC_ConfigChannel+0x490>)
 8003a9e:	e000      	b.n	8003aa2 <HAL_ADC_ConfigChannel+0x422>
 8003aa0:	4b1c      	ldr	r3, [pc, #112]	; (8003b14 <HAL_ADC_ConfigChannel+0x494>)
 8003aa2:	667b      	str	r3, [r7, #100]	; 0x64
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d105      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d015      	beq.n	8003ae4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003abc:	2b11      	cmp	r3, #17
 8003abe:	d105      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00b      	beq.n	8003ae4 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003ad0:	2b12      	cmp	r3, #18
 8003ad2:	f040 80ac 	bne.w	8003c2e <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003ad6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f040 80a5 	bne.w	8003c2e <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aec:	d102      	bne.n	8003af4 <HAL_ADC_ConfigChannel+0x474>
 8003aee:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <HAL_ADC_ConfigChannel+0x48c>)
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	e023      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x4bc>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a04      	ldr	r2, [pc, #16]	; (8003b0c <HAL_ADC_ConfigChannel+0x48c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d10c      	bne.n	8003b18 <HAL_ADC_ConfigChannel+0x498>
 8003afe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b02:	613b      	str	r3, [r7, #16]
 8003b04:	e01a      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x4bc>
 8003b06:	bf00      	nop
 8003b08:	83fff000 	.word	0x83fff000
 8003b0c:	50000100 	.word	0x50000100
 8003b10:	50000300 	.word	0x50000300
 8003b14:	50000700 	.word	0x50000700
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a4a      	ldr	r2, [pc, #296]	; (8003c48 <HAL_ADC_ConfigChannel+0x5c8>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d102      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x4a8>
 8003b22:	4b4a      	ldr	r3, [pc, #296]	; (8003c4c <HAL_ADC_ConfigChannel+0x5cc>)
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	e009      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x4bc>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a47      	ldr	r2, [pc, #284]	; (8003c4c <HAL_ADC_ConfigChannel+0x5cc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d102      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x4b8>
 8003b32:	4b45      	ldr	r3, [pc, #276]	; (8003c48 <HAL_ADC_ConfigChannel+0x5c8>)
 8003b34:	613b      	str	r3, [r7, #16]
 8003b36:	e001      	b.n	8003b3c <HAL_ADC_ConfigChannel+0x4bc>
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d108      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x4dc>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d101      	bne.n	8003b5c <HAL_ADC_ConfigChannel+0x4dc>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x4de>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d150      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003b62:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d010      	beq.n	8003b8a <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d107      	bne.n	8003b84 <HAL_ADC_ConfigChannel+0x504>
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_ADC_ConfigChannel+0x504>
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <HAL_ADC_ConfigChannel+0x506>
 8003b84:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d13c      	bne.n	8003c04 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b10      	cmp	r3, #16
 8003b90:	d11d      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x54e>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b9a:	d118      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ba4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ba6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ba8:	4b29      	ldr	r3, [pc, #164]	; (8003c50 <HAL_ADC_ConfigChannel+0x5d0>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a29      	ldr	r2, [pc, #164]	; (8003c54 <HAL_ADC_ConfigChannel+0x5d4>)
 8003bae:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb2:	0c9a      	lsrs	r2, r3, #18
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4413      	add	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8003bbe:	e002      	b.n	8003bc6 <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1f9      	bne.n	8003bc0 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003bcc:	e02e      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b11      	cmp	r3, #17
 8003bd4:	d10b      	bne.n	8003bee <HAL_ADC_ConfigChannel+0x56e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bde:	d106      	bne.n	8003bee <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003be0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bea:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003bec:	e01e      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b12      	cmp	r3, #18
 8003bf4:	d11a      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003bf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003bfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c00:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003c02:	e013      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c08:	f043 0220 	orr.w	r2, r3, #32
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	645a      	str	r2, [r3, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003c16:	e00a      	b.n	8003c2e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1c:	f043 0220 	orr.w	r2, r3, #32
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003c2a:	e000      	b.n	8003c2e <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003c2c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8003c36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3774      	adds	r7, #116	; 0x74
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	50000400 	.word	0x50000400
 8003c4c:	50000500 	.word	0x50000500
 8003c50:	20000030 	.word	0x20000030
 8003c54:	431bde83 	.word	0x431bde83

08003c58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d108      	bne.n	8003c84 <ADC_Enable+0x2c>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <ADC_Enable+0x2c>
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <ADC_Enable+0x2e>
 8003c84:	2300      	movs	r3, #0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d13c      	bne.n	8003d04 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	4b1f      	ldr	r3, [pc, #124]	; (8003d10 <ADC_Enable+0xb8>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00d      	beq.n	8003cb4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9c:	f043 0210 	orr.w	r2, r3, #16
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca8:	f043 0201 	orr.w	r2, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e028      	b.n	8003d06 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8003cc4:	f7fd f9dc 	bl	8001080 <HAL_GetTick>
 8003cc8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003cca:	e014      	b.n	8003cf6 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ccc:	f7fd f9d8 	bl	8001080 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d90d      	bls.n	8003cf6 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cde:	f043 0210 	orr.w	r2, r3, #16
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cea:	f043 0201 	orr.w	r2, r3, #1
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e007      	b.n	8003d06 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d1e3      	bne.n	8003ccc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	8000003f 	.word	0x8000003f

08003d14 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d108      	bne.n	8003d40 <ADC_Disable+0x2c>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d101      	bne.n	8003d40 <ADC_Disable+0x2c>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <ADC_Disable+0x2e>
 8003d40:	2300      	movs	r3, #0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d040      	beq.n	8003dc8 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f003 030d 	and.w	r3, r3, #13
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d10f      	bne.n	8003d74 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0202 	orr.w	r2, r2, #2
 8003d62:	609a      	str	r2, [r3, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2203      	movs	r2, #3
 8003d6a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003d6c:	f7fd f988 	bl	8001080 <HAL_GetTick>
 8003d70:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003d72:	e022      	b.n	8003dba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d78:	f043 0210 	orr.w	r2, r3, #16
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d84:	f043 0201 	orr.w	r2, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e01c      	b.n	8003dca <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d90:	f7fd f976 	bl	8001080 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d90d      	bls.n	8003dba <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da2:	f043 0210 	orr.w	r2, r3, #16
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dae:	f043 0201 	orr.w	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e007      	b.n	8003dca <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1e3      	bne.n	8003d90 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_CAN_Init>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *             the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	60bb      	str	r3, [r7, #8]
  
  /* Check CAN handle */
  if(hcan == NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_CAN_Init+0x1a>
  {
     return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e103      	b.n	8003ff4 <HAL_CAN_Init+0x222>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  
  if(hcan->State == HAL_CAN_STATE_RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d106      	bne.n	8003e06 <HAL_CAN_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f9e7 	bl	80041d4 <HAL_CAN_MspInit>

  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2202      	movs	r2, #2
 8003e0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Exit from sleep mode */
  hcan->Instance->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0202 	bic.w	r2, r2, #2
 8003e1c:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  hcan->Instance->MCR |= CAN_MCR_INRQ ;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0201 	orr.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();   
 8003e2e:	f7fd f927 	bl	8001080 <HAL_GetTick>
 8003e32:	60b8      	str	r0, [r7, #8]
  
  /* Wait the acknowledge */
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8003e34:	e011      	b.n	8003e5a <HAL_CAN_Init+0x88>
  {
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8003e36:	f7fd f923 	bl	8001080 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e44:	d909      	bls.n	8003e5a <HAL_CAN_Init+0x88>
    {
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2203      	movs	r2, #3
 8003e4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e0cc      	b.n	8003ff4 <HAL_CAN_Init+0x222>
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d1e6      	bne.n	8003e36 <HAL_CAN_Init+0x64>
    }
  }

  /* Check acknowledge */
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	f040 80ad 	bne.w	8003fd2 <HAL_CAN_Init+0x200>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	699b      	ldr	r3, [r3, #24]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d108      	bne.n	8003e92 <HAL_CAN_Init+0xc0>
    {
      hcan->Instance->MCR |= CAN_MCR_TTCM;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	e007      	b.n	8003ea2 <HAL_CAN_Init+0xd0>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ea0:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d108      	bne.n	8003ebc <HAL_CAN_Init+0xea>
    {
      hcan->Instance->MCR |= CAN_MCR_ABOM;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	e007      	b.n	8003ecc <HAL_CAN_Init+0xfa>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eca:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d108      	bne.n	8003ee6 <HAL_CAN_Init+0x114>
    {
      hcan->Instance->MCR |= CAN_MCR_AWUM;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0220 	orr.w	r2, r2, #32
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	e007      	b.n	8003ef6 <HAL_CAN_Init+0x124>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0220 	bic.w	r2, r2, #32
 8003ef4:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d108      	bne.n	8003f10 <HAL_CAN_Init+0x13e>
    {
      hcan->Instance->MCR |= CAN_MCR_NART;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 0210 	orr.w	r2, r2, #16
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	e007      	b.n	8003f20 <HAL_CAN_Init+0x14e>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_NART;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0210 	bic.w	r2, r2, #16
 8003f1e:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d108      	bne.n	8003f3a <HAL_CAN_Init+0x168>
    {
      hcan->Instance->MCR |= CAN_MCR_RFLM;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0208 	orr.w	r2, r2, #8
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	e007      	b.n	8003f4a <HAL_CAN_Init+0x178>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0208 	bic.w	r2, r2, #8
 8003f48:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d108      	bne.n	8003f64 <HAL_CAN_Init+0x192>
    {
      hcan->Instance->MCR |= CAN_MCR_TXFP;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f042 0204 	orr.w	r2, r2, #4
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	e007      	b.n	8003f74 <HAL_CAN_Init+0x1a2>
    }
    else
    {
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0204 	bic.w	r2, r2, #4
 8003f72:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689a      	ldr	r2, [r3, #8]
                ((uint32_t)hcan->Init.SJW) | \
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8003f7c:	431a      	orrs	r2, r3
                ((uint32_t)hcan->Init.BS1) | \
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
                ((uint32_t)hcan->Init.SJW) | \
 8003f82:	431a      	orrs	r2, r3
                ((uint32_t)hcan->Init.BS2) | \
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	695b      	ldr	r3, [r3, #20]
                ((uint32_t)hcan->Init.BS1) | \
 8003f88:	ea42 0103 	orr.w	r1, r2, r3
               ((uint32_t)hcan->Init.Prescaler - 1U);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	1e5a      	subs	r2, r3, #1
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
                ((uint32_t)hcan->Init.BS2) | \
 8003f96:	430a      	orrs	r2, r1
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8003f98:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f022 0201 	bic.w	r2, r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();   
 8003faa:	f7fd f869 	bl	8001080 <HAL_GetTick>
 8003fae:	60b8      	str	r0, [r7, #8]
   
    /* Wait the acknowledge */
    while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8003fb0:	bf00      	nop
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d0f8      	beq.n	8003fb2 <HAL_CAN_Init+0x1e0>
//         return HAL_TIMEOUT;
//      }
    }

    /* Check acknowledged */
    if ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d001      	beq.n	8003fd2 <HAL_CAN_Init+0x200>
    {
      status = CAN_INITSTATUS_SUCCESS;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	60fb      	str	r3, [r7, #12]
    }
  }
 
  if(status == CAN_INITSTATUS_SUCCESS)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d108      	bne.n	8003fea <HAL_CAN_Init+0x218>
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
    /* Return function status */
    return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	e004      	b.n	8003ff4 <HAL_CAN_Init+0x222>
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2204      	movs	r2, #4
 8003fee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Return function status */
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
  }
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig: pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(sFilterConfig->FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	2201      	movs	r2, #1
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  hcan->Instance->FMR |= (uint32_t)CAN_FMR_FINIT;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Filter Deactivation */
  hcan->Instance->FA1R &= ~(uint32_t)filternbrbitpos;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	43da      	mvns	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	400a      	ands	r2, r1
 800403c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d127      	bne.n	8004098 <HAL_CAN_ConfigFilter+0x9c>
  {
    /* 16-bit scale for the filter */
    hcan->Instance->FS1R &= ~(uint32_t)filternbrbitpos;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	43da      	mvns	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	400a      	ands	r2, r1
 800405a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	b299      	uxth	r1, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	6952      	ldr	r2, [r2, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004072:	4301      	orrs	r1, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8004074:	3248      	adds	r2, #72	; 0x48
 8004076:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	b29a      	uxth	r2, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6819      	ldr	r1, [r3, #0]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800408e:	4302      	orrs	r2, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8004090:	3348      	adds	r3, #72	; 0x48
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	440b      	add	r3, r1
 8004096:	605a      	str	r2, [r3, #4]
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d126      	bne.n	80040ee <HAL_CAN_ConfigFilter+0xf2>
  {
    /* 32-bit scale for the filter */
    hcan->Instance->FS1R |= filternbrbitpos;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f8d3 120c 	ldr.w	r1, [r3, #524]	; 0x20c
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	b299      	uxth	r1, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	6952      	ldr	r2, [r2, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040c8:	4301      	orrs	r1, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80040ca:	3248      	adds	r2, #72	; 0x48
 80040cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	b29a      	uxth	r2, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6819      	ldr	r1, [r3, #0]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040e4:	4302      	orrs	r2, r0
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80040e6:	3348      	adds	r3, #72	; 0x48
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	440b      	add	r3, r1
 80040ec:	605a      	str	r2, [r3, #4]
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10b      	bne.n	800410e <HAL_CAN_ConfigFilter+0x112>
  {
    /*Id/Mask mode for the filter*/
    hcan->Instance->FM1R &= ~(uint32_t)filternbrbitpos;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	43da      	mvns	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	400a      	ands	r2, r1
 8004108:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800410c:	e009      	b.n	8004122 <HAL_CAN_ConfigFilter+0x126>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    hcan->Instance->FM1R |= (uint32_t)filternbrbitpos;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f8d3 1204 	ldr.w	r1, [r3, #516]	; 0x204
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	430a      	orrs	r2, r1
 800411e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10a      	bne.n	8004140 <HAL_CAN_ConfigFilter+0x144>
  {
    /* FIFO 0 assignation for the filter */
    hcan->Instance->FFA1R &= ~(uint32_t)filternbrbitpos;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	43da      	mvns	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	400a      	ands	r2, r1
 800413c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO1)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d109      	bne.n	800415c <HAL_CAN_ConfigFilter+0x160>
  {
    /* FIFO 1 assignation for the filter */
    hcan->Instance->FFA1R |= (uint32_t)filternbrbitpos;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f8d3 1214 	ldr.w	r1, [r3, #532]	; 0x214
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	430a      	orrs	r2, r1
 8004158:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d109      	bne.n	8004178 <HAL_CAN_ConfigFilter+0x17c>
  {
    hcan->Instance->FA1R |= filternbrbitpos;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8d3 121c 	ldr.w	r1, [r3, #540]	; 0x21c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	430a      	orrs	r2, r1
 8004174:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  hcan->Instance->FMR &= ~((uint32_t)CAN_FMR_FINIT);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Return function status */
  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HAL_CAN_DeInit>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef* hcan)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b082      	sub	sp, #8
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if(hcan == NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_CAN_DeInit+0x12>
  {
     return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e00f      	b.n	80041cc <HAL_CAN_DeInit+0x32>
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
  
  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* DeInit the low level hardware */
  HAL_CAN_MspDeInit(hcan);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f817 	bl	80041e8 <HAL_CAN_MspDeInit>
  
  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hcan);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_CAN_MspInit>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval None
  */
__weak void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspInit could be implemented in the user file
   */ 
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_CAN_MspDeInit>:
  * @param  hcan: pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.  
  * @retval None
  */
__weak void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_MspDeInit could be implemented in the user file
   */ 
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_CAN_Transmit>:
  *         the configuration information for the specified CAN.  
  * @param  Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Transmit(CAN_HandleTypeDef* hcan, uint32_t Timeout)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  uint32_t transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
 8004206:	2304      	movs	r3, #4
 8004208:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 800420a:	2300      	movs	r3, #0
 800420c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004218:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800421c:	d010      	beq.n	8004240 <HAL_CAN_Transmit+0x44>
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8004228:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800422c:	d008      	beq.n	8004240 <HAL_CAN_Transmit+0x44>
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8004238:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800423c:	f040 816b 	bne.w	8004516 <HAL_CAN_Transmit+0x31a>
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004246:	2b01      	cmp	r3, #1
 8004248:	d101      	bne.n	800424e <HAL_CAN_Transmit+0x52>
 800424a:	2302      	movs	r3, #2
 800424c:	e168      	b.n	8004520 <HAL_CAN_Transmit+0x324>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    if(hcan->State == HAL_CAN_STATE_BUSY_RX)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b22      	cmp	r3, #34	; 0x22
 8004260:	d104      	bne.n	800426c <HAL_CAN_Transmit+0x70>
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_TX_RX;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2232      	movs	r2, #50	; 0x32
 8004266:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800426a:	e003      	b.n	8004274 <HAL_CAN_Transmit+0x78>
    }
    else
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_TX;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2212      	movs	r2, #18
 8004270:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }

    /* Select one empty transmit mailbox */
    if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_CAN_Transmit+0x8c>
    {
      transmitmailbox = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	e00b      	b.n	80042a0 <HAL_CAN_Transmit+0xa4>
    }
    else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <HAL_CAN_Transmit+0xa0>
    {
      transmitmailbox = 1U;
 8004296:	2301      	movs	r3, #1
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	e001      	b.n	80042a0 <HAL_CAN_Transmit+0xa4>
    }
    else
    {
      transmitmailbox = 2U;
 800429c:	2302      	movs	r3, #2
 800429e:	60fb      	str	r3, [r7, #12]
    }

    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	3318      	adds	r3, #24
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	4413      	add	r3, r2
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6811      	ldr	r1, [r2, #0]
 80042b2:	f003 0201 	and.w	r2, r3, #1
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3318      	adds	r3, #24
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	440b      	add	r3, r1
 80042be:	601a      	str	r2, [r3, #0]
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d117      	bne.n	80042fa <HAL_CAN_Transmit+0xfe>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << 21U) | \
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3318      	adds	r3, #24
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	4413      	add	r3, r2
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	0559      	lsls	r1, r3, #21
                                                  hcan->pTxMsg->RTR);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e4:	68db      	ldr	r3, [r3, #12]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << 21U) | \
 80042e6:	430b      	orrs	r3, r1
 80042e8:	6879      	ldr	r1, [r7, #4]
 80042ea:	6809      	ldr	r1, [r1, #0]
 80042ec:	431a      	orrs	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3318      	adds	r3, #24
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	440b      	add	r3, r1
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	e01a      	b.n	8004330 <HAL_CAN_Transmit+0x134>
    }
    else
    {
      assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3U) | \
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3318      	adds	r3, #24
 8004302:	011b      	lsls	r3, r3, #4
 8004304:	4413      	add	r3, r2
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	00d9      	lsls	r1, r3, #3
                                                  hcan->pTxMsg->IDE | \
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	689b      	ldr	r3, [r3, #8]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3U) | \
 8004316:	4319      	orrs	r1, r3
                                                  hcan->pTxMsg->RTR);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	68db      	ldr	r3, [r3, #12]
                                                  hcan->pTxMsg->IDE | \
 800431e:	430b      	orrs	r3, r1
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3U) | \
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	6809      	ldr	r1, [r1, #0]
 8004324:	431a      	orrs	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	3318      	adds	r3, #24
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	440b      	add	r3, r1
 800432e:	601a      	str	r2, [r3, #0]
    }
    
    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004334:	691a      	ldr	r2, [r3, #16]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433a:	f002 020f 	and.w	r2, r2, #15
 800433e:	611a      	str	r2, [r3, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	3318      	adds	r3, #24
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	4413      	add	r3, r2
 800434c:	3304      	adds	r3, #4
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6811      	ldr	r1, [r2, #0]
 8004354:	f023 020f 	bic.w	r2, r3, #15
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3318      	adds	r3, #24
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	440b      	add	r3, r1
 8004360:	3304      	adds	r3, #4
 8004362:	601a      	str	r2, [r3, #0]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	3318      	adds	r3, #24
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	4413      	add	r3, r2
 8004370:	3304      	adds	r3, #4
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	6809      	ldr	r1, [r1, #0]
 800437e:	431a      	orrs	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3318      	adds	r3, #24
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	440b      	add	r3, r1
 8004388:	3304      	adds	r3, #4
 800438a:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << 24U) | 
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004390:	7ddb      	ldrb	r3, [r3, #23]
 8004392:	061a      	lsls	r2, r3, #24
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	7d9b      	ldrb	r3, [r3, #22]
 800439a:	041b      	lsls	r3, r3, #16
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	7d5b      	ldrb	r3, [r3, #21]
 80043a4:	021b      	lsls	r3, r3, #8
 80043a6:	4313      	orrs	r3, r2
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043ac:	7d12      	ldrb	r2, [r2, #20]
 80043ae:	4610      	mov	r0, r2
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6811      	ldr	r1, [r2, #0]
 80043b4:	ea43 0200 	orr.w	r2, r3, r0
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	440b      	add	r3, r1
 80043be:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80043c2:	601a      	str	r2, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[2] << 16U) |
                                                                ((uint32_t)hcan->pTxMsg->Data[1] << 8U) | 
                                                                ((uint32_t)hcan->pTxMsg->Data[0]     )  );
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << 24U) | 
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	7edb      	ldrb	r3, [r3, #27]
 80043ca:	061a      	lsls	r2, r3, #24
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	7e9b      	ldrb	r3, [r3, #26]
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	431a      	orrs	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	7e5b      	ldrb	r3, [r3, #25]
 80043dc:	021b      	lsls	r3, r3, #8
 80043de:	4313      	orrs	r3, r2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043e4:	7e12      	ldrb	r2, [r2, #24]
 80043e6:	4610      	mov	r0, r2
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6811      	ldr	r1, [r2, #0]
 80043ec:	ea43 0200 	orr.w	r2, r3, r0
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	440b      	add	r3, r1
 80043f6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80043fa:	601a      	str	r2, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[6] << 16U) |
                                                                ((uint32_t)hcan->pTxMsg->Data[5] << 8U) |
                                                                ((uint32_t)hcan->pTxMsg->Data[4]     )  );

    /* Request transmission */
    SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	3318      	adds	r3, #24
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	4413      	add	r3, r2
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6811      	ldr	r1, [r2, #0]
 800440e:	f043 0201 	orr.w	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3318      	adds	r3, #24
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	440b      	add	r3, r1
 800441a:	601a      	str	r2, [r3, #0]
  
    /* Get tick */
    tickstart = HAL_GetTick();   
 800441c:	f7fc fe30 	bl	8001080 <HAL_GetTick>
 8004420:	60b8      	str	r0, [r7, #8]
  
    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8004422:	e038      	b.n	8004496 <HAL_CAN_Transmit+0x29a>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442a:	d034      	beq.n	8004496 <HAL_CAN_Transmit+0x29a>
      {
        if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <HAL_CAN_Transmit+0x246>
 8004432:	f7fc fe25 	bl	8001080 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d229      	bcs.n	8004496 <HAL_CAN_Transmit+0x29a>
        {
          hcan->State = HAL_CAN_STATE_TIMEOUT;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2203      	movs	r2, #3
 8004446:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Cancel transmission */
          __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d108      	bne.n	8004462 <HAL_CAN_Transmit+0x266>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800445e:	609a      	str	r2, [r3, #8]
 8004460:	e013      	b.n	800448a <HAL_CAN_Transmit+0x28e>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d108      	bne.n	800447a <HAL_CAN_Transmit+0x27e>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004476:	609a      	str	r2, [r3, #8]
 8004478:	e007      	b.n	800448a <HAL_CAN_Transmit+0x28e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004488:	609a      	str	r2, [r3, #8]

          /* Process unlocked */
          __HAL_UNLOCK(hcan);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e044      	b.n	8004520 <HAL_CAN_Transmit+0x324>
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10b      	bne.n	80044b4 <HAL_CAN_Transmit+0x2b8>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	4b21      	ldr	r3, [pc, #132]	; (8004528 <HAL_CAN_Transmit+0x32c>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	4a20      	ldr	r2, [pc, #128]	; (8004528 <HAL_CAN_Transmit+0x32c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	bf14      	ite	ne
 80044ac:	2301      	movne	r3, #1
 80044ae:	2300      	moveq	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	e019      	b.n	80044e8 <HAL_CAN_Transmit+0x2ec>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d10b      	bne.n	80044d2 <HAL_CAN_Transmit+0x2d6>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	4b1a      	ldr	r3, [pc, #104]	; (800452c <HAL_CAN_Transmit+0x330>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	4a19      	ldr	r2, [pc, #100]	; (800452c <HAL_CAN_Transmit+0x330>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	bf14      	ite	ne
 80044ca:	2301      	movne	r3, #1
 80044cc:	2300      	moveq	r3, #0
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	e00a      	b.n	80044e8 <HAL_CAN_Transmit+0x2ec>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	4b15      	ldr	r3, [pc, #84]	; (8004530 <HAL_CAN_Transmit+0x334>)
 80044da:	4013      	ands	r3, r2
 80044dc:	4a14      	ldr	r2, [pc, #80]	; (8004530 <HAL_CAN_Transmit+0x334>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	bf14      	ite	ne
 80044e2:	2301      	movne	r3, #1
 80044e4:	2300      	moveq	r3, #0
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d19b      	bne.n	8004424 <HAL_CAN_Transmit+0x228>
        }
      }
    }
    if(hcan->State == HAL_CAN_STATE_BUSY_TX_RX) 
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b32      	cmp	r3, #50	; 0x32
 80044f6:	d104      	bne.n	8004502 <HAL_CAN_Transmit+0x306>
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_BUSY_RX;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2222      	movs	r2, #34	; 0x22
 80044fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8004500:	e003      	b.n	800450a <HAL_CAN_Transmit+0x30e>
    }
    else
    {
      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    }
    
    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    /* Return function status */
    return HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	e004      	b.n	8004520 <HAL_CAN_Transmit+0x324>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR; 
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2204      	movs	r2, #4
 800451a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Return function status */
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
  }
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	04000003 	.word	0x04000003
 800452c:	08000300 	.word	0x08000300
 8004530:	10030000 	.word	0x10030000

08004534 <aes_indep_init>:
#include "mbedtls/aes.h"

mbedtls_aes_context ctx;

void aes_indep_init(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
	mbedtls_aes_init(&ctx);
 8004538:	4802      	ldr	r0, [pc, #8]	; (8004544 <aes_indep_init+0x10>)
 800453a:	f000 f9e1 	bl	8004900 <mbedtls_aes_init>
}
 800453e:	bf00      	nop
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20002854 	.word	0x20002854

08004548 <aes_indep_key>:

void aes_indep_key(uint8_t * key)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
	mbedtls_aes_setkey_enc(&ctx, key, 128);
 8004550:	2280      	movs	r2, #128	; 0x80
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	4803      	ldr	r0, [pc, #12]	; (8004564 <aes_indep_key+0x1c>)
 8004556:	f000 f9e1 	bl	800491c <mbedtls_aes_setkey_enc>
}
 800455a:	bf00      	nop
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20002854 	.word	0x20002854

08004568 <aes_indep_enc>:

void aes_indep_enc(uint8_t * pt)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
	mbedtls_aes_crypt_ecb(&ctx, MBEDTLS_AES_ENCRYPT, pt, pt); /* encrypting the data block */
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	2101      	movs	r1, #1
 8004576:	4803      	ldr	r0, [pc, #12]	; (8004584 <aes_indep_enc+0x1c>)
 8004578:	f001 f96e 	bl	8005858 <mbedtls_aes_crypt_ecb>
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	20002854 	.word	0x20002854

08004588 <aes_gen_tables>:
#define MUL(x,y) ( ( x && y ) ? pow[(log[x]+log[y]) % 255] : 0 )

static int aes_init_done = 0;

static void aes_gen_tables( void )
{
 8004588:	b480      	push	{r7}
 800458a:	b087      	sub	sp, #28
 800458c:	af00      	add	r7, sp, #0
    /*int log[256];*/
    
    /* Avoid allocating huge temporary tables onto stack, causes
       possible overflow on certain targets
     */
    int * pow = (int *) RT2;
 800458e:	4ba4      	ldr	r3, [pc, #656]	; (8004820 <aes_gen_tables+0x298>)
 8004590:	60fb      	str	r3, [r7, #12]
    int * log = (int *) RT3;
 8004592:	4ba4      	ldr	r3, [pc, #656]	; (8004824 <aes_gen_tables+0x29c>)
 8004594:	60bb      	str	r3, [r7, #8]

    /*
     * compute pow and log tables over GF(2^8)
     */
    for( i = 0, x = 1; i < 256; i++ )
 8004596:	2300      	movs	r3, #0
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	2301      	movs	r3, #1
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	e01d      	b.n	80045dc <aes_gen_tables+0x54>
    {
        pow[i] = x;
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	601a      	str	r2, [r3, #0]
        log[x] = i;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	4413      	add	r3, r2
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	601a      	str	r2, [r3, #0]
        x = ( x ^ XTIME( x ) ) & 0xFF;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80045c2:	2a00      	cmp	r2, #0
 80045c4:	d001      	beq.n	80045ca <aes_gen_tables+0x42>
 80045c6:	221b      	movs	r2, #27
 80045c8:	e000      	b.n	80045cc <aes_gen_tables+0x44>
 80045ca:	2200      	movs	r2, #0
 80045cc:	405a      	eors	r2, r3
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4053      	eors	r3, r2
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	613b      	str	r3, [r7, #16]
    for( i = 0, x = 1; i < 256; i++ )
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	3301      	adds	r3, #1
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2bff      	cmp	r3, #255	; 0xff
 80045e0:	ddde      	ble.n	80045a0 <aes_gen_tables+0x18>
    }

    /*
     * calculate the round constants
     */
    for( i = 0, x = 1; i < 10; i++ )
 80045e2:	2300      	movs	r3, #0
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	2301      	movs	r3, #1
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	e014      	b.n	8004616 <aes_gen_tables+0x8e>
    {
        RCON[i] = (uint32_t) x;
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	498e      	ldr	r1, [pc, #568]	; (8004828 <aes_gen_tables+0x2a0>)
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        x = XTIME( x ) & 0xFF;
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8004600:	2a00      	cmp	r2, #0
 8004602:	d001      	beq.n	8004608 <aes_gen_tables+0x80>
 8004604:	221b      	movs	r2, #27
 8004606:	e000      	b.n	800460a <aes_gen_tables+0x82>
 8004608:	2200      	movs	r2, #0
 800460a:	4053      	eors	r3, r2
 800460c:	b2db      	uxtb	r3, r3
 800460e:	613b      	str	r3, [r7, #16]
    for( i = 0, x = 1; i < 10; i++ )
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	3301      	adds	r3, #1
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b09      	cmp	r3, #9
 800461a:	dde7      	ble.n	80045ec <aes_gen_tables+0x64>
    }

    /*
     * generate the forward and reverse S-boxes
     */
    FSb[0x00] = 0x63;
 800461c:	4b83      	ldr	r3, [pc, #524]	; (800482c <aes_gen_tables+0x2a4>)
 800461e:	2263      	movs	r2, #99	; 0x63
 8004620:	701a      	strb	r2, [r3, #0]
    RSb[0x63] = 0x00;
 8004622:	4b83      	ldr	r3, [pc, #524]	; (8004830 <aes_gen_tables+0x2a8>)
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63

    for( i = 1; i < 256; i++ )
 800462a:	2301      	movs	r3, #1
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	e04c      	b.n	80046ca <aes_gen_tables+0x142>
    {
        x = pow[255 - log[i]];
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	4413      	add	r3, r2
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4413      	add	r3, r2
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	613b      	str	r3, [r7, #16]

        y  = x; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	607b      	str	r3, [r7, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	005a      	lsls	r2, r3, #1
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	11db      	asrs	r3, r3, #7
 8004654:	4313      	orrs	r3, r2
 8004656:	b2db      	uxtb	r3, r3
 8004658:	607b      	str	r3, [r7, #4]
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 800465a:	693a      	ldr	r2, [r7, #16]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4053      	eors	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	005a      	lsls	r2, r3, #1
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	11db      	asrs	r3, r3, #7
 800466a:	4313      	orrs	r3, r2
 800466c:	b2db      	uxtb	r3, r3
 800466e:	607b      	str	r3, [r7, #4]
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4053      	eors	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	005a      	lsls	r2, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	11db      	asrs	r3, r3, #7
 8004680:	4313      	orrs	r3, r2
 8004682:	b2db      	uxtb	r3, r3
 8004684:	607b      	str	r3, [r7, #4]
        x ^= y; y = ( ( y << 1 ) | ( y >> 7 ) ) & 0xFF;
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4053      	eors	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	005a      	lsls	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	11db      	asrs	r3, r3, #7
 8004696:	4313      	orrs	r3, r2
 8004698:	b2db      	uxtb	r3, r3
 800469a:	607b      	str	r3, [r7, #4]
        x ^= y ^ 0x63;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f083 0363 	eor.w	r3, r3, #99	; 0x63
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4053      	eors	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]

        FSb[i] = (unsigned char) x;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	b2d9      	uxtb	r1, r3
 80046ac:	4a5f      	ldr	r2, [pc, #380]	; (800482c <aes_gen_tables+0x2a4>)
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	4413      	add	r3, r2
 80046b2:	460a      	mov	r2, r1
 80046b4:	701a      	strb	r2, [r3, #0]
        RSb[x] = (unsigned char) i;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	b2d9      	uxtb	r1, r3
 80046ba:	4a5d      	ldr	r2, [pc, #372]	; (8004830 <aes_gen_tables+0x2a8>)
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4413      	add	r3, r2
 80046c0:	460a      	mov	r2, r1
 80046c2:	701a      	strb	r2, [r3, #0]
    for( i = 1; i < 256; i++ )
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	3301      	adds	r3, #1
 80046c8:	617b      	str	r3, [r7, #20]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2bff      	cmp	r3, #255	; 0xff
 80046ce:	ddaf      	ble.n	8004630 <aes_gen_tables+0xa8>
    }

    /*
     * generate the forward and reverse tables
     */
    for( i = 0; i < 256; i++ )
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	e100      	b.n	80048d8 <aes_gen_tables+0x350>
    {
        x = FSb[i];
 80046d6:	4a55      	ldr	r2, [pc, #340]	; (800482c <aes_gen_tables+0x2a4>)
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	4413      	add	r3, r2
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	613b      	str	r3, [r7, #16]
        y = XTIME( x ) & 0xFF;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80046ea:	2a00      	cmp	r2, #0
 80046ec:	d001      	beq.n	80046f2 <aes_gen_tables+0x16a>
 80046ee:	221b      	movs	r2, #27
 80046f0:	e000      	b.n	80046f4 <aes_gen_tables+0x16c>
 80046f2:	2200      	movs	r2, #0
 80046f4:	4053      	eors	r3, r2
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	607b      	str	r3, [r7, #4]
        z =  ( y ^ x ) & 0xFF;
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4053      	eors	r3, r2
 8004700:	b2db      	uxtb	r3, r3
 8004702:	603b      	str	r3, [r7, #0]

        FT0[i] = ( (uint32_t) y       ) ^
                 ( (uint32_t) x <<  8 ) ^
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	021a      	lsls	r2, r3, #8
        FT0[i] = ( (uint32_t) y       ) ^
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	405a      	eors	r2, r3
                 ( (uint32_t) x << 16 ) ^
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	041b      	lsls	r3, r3, #16
                 ( (uint32_t) x <<  8 ) ^
 8004710:	405a      	eors	r2, r3
                 ( (uint32_t) z << 24 );
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	061b      	lsls	r3, r3, #24
                 ( (uint32_t) x << 16 ) ^
 8004716:	405a      	eors	r2, r3
        FT0[i] = ( (uint32_t) y       ) ^
 8004718:	4946      	ldr	r1, [pc, #280]	; (8004834 <aes_gen_tables+0x2ac>)
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        FT1[i] = ROTL8( FT0[i] );
 8004720:	4a44      	ldr	r2, [pc, #272]	; (8004834 <aes_gen_tables+0x2ac>)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004728:	ea4f 6233 	mov.w	r2, r3, ror #24
 800472c:	4942      	ldr	r1, [pc, #264]	; (8004838 <aes_gen_tables+0x2b0>)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT2[i] = ROTL8( FT1[i] );
 8004734:	4a40      	ldr	r2, [pc, #256]	; (8004838 <aes_gen_tables+0x2b0>)
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800473c:	ea4f 6233 	mov.w	r2, r3, ror #24
 8004740:	493e      	ldr	r1, [pc, #248]	; (800483c <aes_gen_tables+0x2b4>)
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        FT3[i] = ROTL8( FT2[i] );
 8004748:	4a3c      	ldr	r2, [pc, #240]	; (800483c <aes_gen_tables+0x2b4>)
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004750:	ea4f 6233 	mov.w	r2, r3, ror #24
 8004754:	493a      	ldr	r1, [pc, #232]	; (8004840 <aes_gen_tables+0x2b8>)
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        x = RSb[i];
 800475c:	4a34      	ldr	r2, [pc, #208]	; (8004830 <aes_gen_tables+0x2a8>)
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	4413      	add	r3, r2
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	613b      	str	r3, [r7, #16]

        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01a      	beq.n	80047a2 <aes_gen_tables+0x21a>
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	3338      	adds	r3, #56	; 0x38
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	68b9      	ldr	r1, [r7, #8]
 8004778:	440b      	add	r3, r1
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	441a      	add	r2, r3
 800477e:	4b31      	ldr	r3, [pc, #196]	; (8004844 <aes_gen_tables+0x2bc>)
 8004780:	fb83 1302 	smull	r1, r3, r3, r2
 8004784:	4413      	add	r3, r2
 8004786:	11d9      	asrs	r1, r3, #7
 8004788:	17d3      	asrs	r3, r2, #31
 800478a:	1ac9      	subs	r1, r1, r3
 800478c:	460b      	mov	r3, r1
 800478e:	021b      	lsls	r3, r3, #8
 8004790:	1a5b      	subs	r3, r3, r1
 8004792:	1ad1      	subs	r1, r2, r3
 8004794:	460b      	mov	r3, r1
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	4413      	add	r3, r2
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	e000      	b.n	80047a4 <aes_gen_tables+0x21c>
 80047a2:	2000      	movs	r0, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d01a      	beq.n	80047e0 <aes_gen_tables+0x258>
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	3324      	adds	r3, #36	; 0x24
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	440b      	add	r3, r1
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	441a      	add	r2, r3
 80047bc:	4b21      	ldr	r3, [pc, #132]	; (8004844 <aes_gen_tables+0x2bc>)
 80047be:	fb83 1302 	smull	r1, r3, r3, r2
 80047c2:	4413      	add	r3, r2
 80047c4:	11d9      	asrs	r1, r3, #7
 80047c6:	17d3      	asrs	r3, r2, #31
 80047c8:	1ac9      	subs	r1, r1, r3
 80047ca:	460b      	mov	r3, r1
 80047cc:	021b      	lsls	r3, r3, #8
 80047ce:	1a5b      	subs	r3, r3, r1
 80047d0:	1ad1      	subs	r1, r2, r3
 80047d2:	460b      	mov	r3, r1
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4413      	add	r3, r2
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	e000      	b.n	80047e2 <aes_gen_tables+0x25a>
 80047e0:	2300      	movs	r3, #0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 80047e2:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d02e      	beq.n	8004848 <aes_gen_tables+0x2c0>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	3334      	adds	r3, #52	; 0x34
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	68b9      	ldr	r1, [r7, #8]
 80047f6:	440b      	add	r3, r1
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	441a      	add	r2, r3
 80047fc:	4b11      	ldr	r3, [pc, #68]	; (8004844 <aes_gen_tables+0x2bc>)
 80047fe:	fb83 1302 	smull	r1, r3, r3, r2
 8004802:	4413      	add	r3, r2
 8004804:	11d9      	asrs	r1, r3, #7
 8004806:	17d3      	asrs	r3, r2, #31
 8004808:	1ac9      	subs	r1, r1, r3
 800480a:	460b      	mov	r3, r1
 800480c:	021b      	lsls	r3, r3, #8
 800480e:	1a5b      	subs	r3, r3, r1
 8004810:	1ad1      	subs	r1, r2, r3
 8004812:	460b      	mov	r3, r1
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4413      	add	r3, r2
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	041b      	lsls	r3, r3, #16
 800481e:	e014      	b.n	800484a <aes_gen_tables+0x2c2>
 8004820:	20001fb8 	.word	0x20001fb8
 8004824:	200023b8 	.word	0x200023b8
 8004828:	200027b8 	.word	0x200027b8
 800482c:	200005b8 	.word	0x200005b8
 8004830:	200016b8 	.word	0x200016b8
 8004834:	200006b8 	.word	0x200006b8
 8004838:	20000ab8 	.word	0x20000ab8
 800483c:	20000eb8 	.word	0x20000eb8
 8004840:	200012b8 	.word	0x200012b8
 8004844:	80808081 	.word	0x80808081
 8004848:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x09, x ) <<  8 ) ^
 800484a:	4058      	eors	r0, r3
                 ( (uint32_t) MUL( 0x0B, x ) << 24 );
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d01a      	beq.n	8004888 <aes_gen_tables+0x300>
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	332c      	adds	r3, #44	; 0x2c
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	68b9      	ldr	r1, [r7, #8]
 800485e:	440b      	add	r3, r1
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	441a      	add	r2, r3
 8004864:	4b21      	ldr	r3, [pc, #132]	; (80048ec <aes_gen_tables+0x364>)
 8004866:	fb83 1302 	smull	r1, r3, r3, r2
 800486a:	4413      	add	r3, r2
 800486c:	11d9      	asrs	r1, r3, #7
 800486e:	17d3      	asrs	r3, r2, #31
 8004870:	1ac9      	subs	r1, r1, r3
 8004872:	460b      	mov	r3, r1
 8004874:	021b      	lsls	r3, r3, #8
 8004876:	1a5b      	subs	r3, r3, r1
 8004878:	1ad1      	subs	r1, r2, r3
 800487a:	460b      	mov	r3, r1
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	4413      	add	r3, r2
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	061b      	lsls	r3, r3, #24
 8004886:	e000      	b.n	800488a <aes_gen_tables+0x302>
 8004888:	2300      	movs	r3, #0
                 ( (uint32_t) MUL( 0x0D, x ) << 16 ) ^
 800488a:	ea83 0200 	eor.w	r2, r3, r0
        RT0[i] = ( (uint32_t) MUL( 0x0E, x )       ) ^
 800488e:	4918      	ldr	r1, [pc, #96]	; (80048f0 <aes_gen_tables+0x368>)
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        RT1[i] = ROTL8( RT0[i] );
 8004896:	4a16      	ldr	r2, [pc, #88]	; (80048f0 <aes_gen_tables+0x368>)
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800489e:	ea4f 6233 	mov.w	r2, r3, ror #24
 80048a2:	4914      	ldr	r1, [pc, #80]	; (80048f4 <aes_gen_tables+0x36c>)
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT2[i] = ROTL8( RT1[i] );
 80048aa:	4a12      	ldr	r2, [pc, #72]	; (80048f4 <aes_gen_tables+0x36c>)
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048b2:	ea4f 6233 	mov.w	r2, r3, ror #24
 80048b6:	4910      	ldr	r1, [pc, #64]	; (80048f8 <aes_gen_tables+0x370>)
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        RT3[i] = ROTL8( RT2[i] );
 80048be:	4a0e      	ldr	r2, [pc, #56]	; (80048f8 <aes_gen_tables+0x370>)
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048c6:	ea4f 6233 	mov.w	r2, r3, ror #24
 80048ca:	490c      	ldr	r1, [pc, #48]	; (80048fc <aes_gen_tables+0x374>)
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i = 0; i < 256; i++ )
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	3301      	adds	r3, #1
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2bff      	cmp	r3, #255	; 0xff
 80048dc:	f77f aefb 	ble.w	80046d6 <aes_gen_tables+0x14e>
    }
}
 80048e0:	bf00      	nop
 80048e2:	371c      	adds	r7, #28
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	80808081 	.word	0x80808081
 80048f0:	200017b8 	.word	0x200017b8
 80048f4:	20001bb8 	.word	0x20001bb8
 80048f8:	20001fb8 	.word	0x20001fb8
 80048fc:	200023b8 	.word	0x200023b8

08004900 <mbedtls_aes_init>:

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
 8004908:	f44f 728c 	mov.w	r2, #280	; 0x118
 800490c:	2100      	movs	r1, #0
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f001 f808 	bl	8005924 <memset>
}
 8004914:	bf00      	nop
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <mbedtls_aes_setkey_enc>:
 * AES key schedule (encryption)
 */
#if !defined(MBEDTLS_AES_SETKEY_ENC_ALT)
int mbedtls_aes_setkey_enc( mbedtls_aes_context *ctx, const unsigned char *key,
                    unsigned int keybits )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
    unsigned int i;
    uint32_t *RK;

#if !defined(MBEDTLS_AES_ROM_TABLES)
    if( aes_init_done == 0 )
 8004928:	4b92      	ldr	r3, [pc, #584]	; (8004b74 <mbedtls_aes_setkey_enc+0x258>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d104      	bne.n	800493a <mbedtls_aes_setkey_enc+0x1e>
    {
        aes_gen_tables();
 8004930:	f7ff fe2a 	bl	8004588 <aes_gen_tables>
        aes_init_done = 1;
 8004934:	4b8f      	ldr	r3, [pc, #572]	; (8004b74 <mbedtls_aes_setkey_enc+0x258>)
 8004936:	2201      	movs	r2, #1
 8004938:	601a      	str	r2, [r3, #0]

    }
#endif

    switch( keybits )
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2bc0      	cmp	r3, #192	; 0xc0
 800493e:	d008      	beq.n	8004952 <mbedtls_aes_setkey_enc+0x36>
 8004940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004944:	d009      	beq.n	800495a <mbedtls_aes_setkey_enc+0x3e>
 8004946:	2b80      	cmp	r3, #128	; 0x80
 8004948:	d10b      	bne.n	8004962 <mbedtls_aes_setkey_enc+0x46>
    {
        case 128: ctx->nr = 10; break;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	220a      	movs	r2, #10
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	e00a      	b.n	8004968 <mbedtls_aes_setkey_enc+0x4c>
        case 192: ctx->nr = 12; break;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	220c      	movs	r2, #12
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	e006      	b.n	8004968 <mbedtls_aes_setkey_enc+0x4c>
        case 256: ctx->nr = 14; break;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	220e      	movs	r2, #14
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	e002      	b.n	8004968 <mbedtls_aes_setkey_enc+0x4c>
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
 8004962:	f06f 031f 	mvn.w	r3, #31
 8004966:	e1a7      	b.n	8004cb8 <mbedtls_aes_setkey_enc+0x39c>

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3308      	adds	r3, #8
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	605a      	str	r2, [r3, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
 8004974:	2300      	movs	r3, #0
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	e027      	b.n	80049ca <mbedtls_aes_setkey_enc+0xae>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	4413      	add	r3, r2
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	4619      	mov	r1, r3
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	3301      	adds	r3, #1
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	4413      	add	r3, r2
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	021b      	lsls	r3, r3, #8
 8004994:	ea41 0203 	orr.w	r2, r1, r3
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	3302      	adds	r3, #2
 800499e:	68b9      	ldr	r1, [r7, #8]
 80049a0:	440b      	add	r3, r1
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	041b      	lsls	r3, r3, #16
 80049a6:	ea42 0103 	orr.w	r1, r2, r3
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	3303      	adds	r3, #3
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	4413      	add	r3, r2
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	061a      	lsls	r2, r3, #24
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	6938      	ldr	r0, [r7, #16]
 80049be:	4403      	add	r3, r0
 80049c0:	430a      	orrs	r2, r1
 80049c2:	601a      	str	r2, [r3, #0]
    for( i = 0; i < ( keybits >> 5 ); i++ )
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	3301      	adds	r3, #1
 80049c8:	617b      	str	r3, [r7, #20]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	095b      	lsrs	r3, r3, #5
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d3d2      	bcc.n	800497a <mbedtls_aes_setkey_enc+0x5e>
    }

    switch( ctx->nr )
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b0c      	cmp	r3, #12
 80049da:	d05c      	beq.n	8004a96 <mbedtls_aes_setkey_enc+0x17a>
 80049dc:	2b0e      	cmp	r3, #14
 80049de:	f000 80c5 	beq.w	8004b6c <mbedtls_aes_setkey_enc+0x250>
 80049e2:	2b0a      	cmp	r3, #10
 80049e4:	f040 8167 	bne.w	8004cb6 <mbedtls_aes_setkey_enc+0x39a>
    {
        case 10:

            for( i = 0; i < 10; i++, RK += 4 )
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	e04f      	b.n	8004a8e <mbedtls_aes_setkey_enc+0x172>
            {
                RK[4]  = RK[0] ^ RCON[i] ^
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	4961      	ldr	r1, [pc, #388]	; (8004b78 <mbedtls_aes_setkey_enc+0x25c>)
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80049fa:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	320c      	adds	r2, #12
 8004a00:	6812      	ldr	r2, [r2, #0]
 8004a02:	0a12      	lsrs	r2, r2, #8
 8004a04:	b2d2      	uxtb	r2, r2
 8004a06:	495d      	ldr	r1, [pc, #372]	; (8004b7c <mbedtls_aes_setkey_enc+0x260>)
 8004a08:	5c8a      	ldrb	r2, [r1, r2]
                RK[4]  = RK[0] ^ RCON[i] ^
 8004a0a:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	330c      	adds	r3, #12
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	0c1b      	lsrs	r3, r3, #16
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	4959      	ldr	r1, [pc, #356]	; (8004b7c <mbedtls_aes_setkey_enc+0x260>)
 8004a18:	5ccb      	ldrb	r3, [r1, r3]
 8004a1a:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
 8004a1c:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	330c      	adds	r3, #12
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	0e1b      	lsrs	r3, r3, #24
 8004a26:	4955      	ldr	r1, [pc, #340]	; (8004b7c <mbedtls_aes_setkey_enc+0x260>)
 8004a28:	5ccb      	ldrb	r3, [r1, r3]
 8004a2a:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
 8004a2c:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	330c      	adds	r3, #12
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	4a50      	ldr	r2, [pc, #320]	; (8004b7c <mbedtls_aes_setkey_enc+0x260>)
 8004a3a:	5cd3      	ldrb	r3, [r2, r3]
 8004a3c:	061a      	lsls	r2, r3, #24
                RK[4]  = RK[0] ^ RCON[i] ^
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	3310      	adds	r3, #16
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
 8004a42:	404a      	eors	r2, r1
                RK[4]  = RK[0] ^ RCON[i] ^
 8004a44:	601a      	str	r2, [r3, #0]

                RK[5]  = RK[1] ^ RK[4];
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	6819      	ldr	r1, [r3, #0]
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	3310      	adds	r3, #16
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	3314      	adds	r3, #20
 8004a56:	404a      	eors	r2, r1
 8004a58:	601a      	str	r2, [r3, #0]
                RK[6]  = RK[2] ^ RK[5];
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	6819      	ldr	r1, [r3, #0]
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	3314      	adds	r3, #20
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	3318      	adds	r3, #24
 8004a6a:	404a      	eors	r2, r1
 8004a6c:	601a      	str	r2, [r3, #0]
                RK[7]  = RK[3] ^ RK[6];
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	330c      	adds	r3, #12
 8004a72:	6819      	ldr	r1, [r3, #0]
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	3318      	adds	r3, #24
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	331c      	adds	r3, #28
 8004a7e:	404a      	eors	r2, r1
 8004a80:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 10; i++, RK += 4 )
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	3301      	adds	r3, #1
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	3310      	adds	r3, #16
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b09      	cmp	r3, #9
 8004a92:	d9ac      	bls.n	80049ee <mbedtls_aes_setkey_enc+0xd2>
            }
            break;
 8004a94:	e10f      	b.n	8004cb6 <mbedtls_aes_setkey_enc+0x39a>

        case 12:

            for( i = 0; i < 8; i++, RK += 6 )
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	e063      	b.n	8004b64 <mbedtls_aes_setkey_enc+0x248>
            {
                RK[6]  = RK[0] ^ RCON[i] ^
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	4935      	ldr	r1, [pc, #212]	; (8004b78 <mbedtls_aes_setkey_enc+0x25c>)
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004aa8:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	3214      	adds	r2, #20
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	0a12      	lsrs	r2, r2, #8
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	4931      	ldr	r1, [pc, #196]	; (8004b7c <mbedtls_aes_setkey_enc+0x260>)
 8004ab6:	5c8a      	ldrb	r2, [r1, r2]
                RK[6]  = RK[0] ^ RCON[i] ^
 8004ab8:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	3314      	adds	r3, #20
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	0c1b      	lsrs	r3, r3, #16
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	492d      	ldr	r1, [pc, #180]	; (8004b7c <mbedtls_aes_setkey_enc+0x260>)
 8004ac6:	5ccb      	ldrb	r3, [r1, r3]
 8004ac8:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
 8004aca:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	3314      	adds	r3, #20
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	0e1b      	lsrs	r3, r3, #24
 8004ad4:	4929      	ldr	r1, [pc, #164]	; (8004b7c <mbedtls_aes_setkey_enc+0x260>)
 8004ad6:	5ccb      	ldrb	r3, [r1, r3]
 8004ad8:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
 8004ada:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	3314      	adds	r3, #20
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	4a25      	ldr	r2, [pc, #148]	; (8004b7c <mbedtls_aes_setkey_enc+0x260>)
 8004ae8:	5cd3      	ldrb	r3, [r2, r3]
 8004aea:	061a      	lsls	r2, r3, #24
                RK[6]  = RK[0] ^ RCON[i] ^
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	3318      	adds	r3, #24
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
 8004af0:	404a      	eors	r2, r1
                RK[6]  = RK[0] ^ RCON[i] ^
 8004af2:	601a      	str	r2, [r3, #0]

                RK[7]  = RK[1] ^ RK[6];
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	3304      	adds	r3, #4
 8004af8:	6819      	ldr	r1, [r3, #0]
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	3318      	adds	r3, #24
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	331c      	adds	r3, #28
 8004b04:	404a      	eors	r2, r1
 8004b06:	601a      	str	r2, [r3, #0]
                RK[8]  = RK[2] ^ RK[7];
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	3308      	adds	r3, #8
 8004b0c:	6819      	ldr	r1, [r3, #0]
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	331c      	adds	r3, #28
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	3320      	adds	r3, #32
 8004b18:	404a      	eors	r2, r1
 8004b1a:	601a      	str	r2, [r3, #0]
                RK[9]  = RK[3] ^ RK[8];
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	330c      	adds	r3, #12
 8004b20:	6819      	ldr	r1, [r3, #0]
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	3320      	adds	r3, #32
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	3324      	adds	r3, #36	; 0x24
 8004b2c:	404a      	eors	r2, r1
 8004b2e:	601a      	str	r2, [r3, #0]
                RK[10] = RK[4] ^ RK[9];
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	3310      	adds	r3, #16
 8004b34:	6819      	ldr	r1, [r3, #0]
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	3324      	adds	r3, #36	; 0x24
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	3328      	adds	r3, #40	; 0x28
 8004b40:	404a      	eors	r2, r1
 8004b42:	601a      	str	r2, [r3, #0]
                RK[11] = RK[5] ^ RK[10];
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	3314      	adds	r3, #20
 8004b48:	6819      	ldr	r1, [r3, #0]
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	3328      	adds	r3, #40	; 0x28
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	332c      	adds	r3, #44	; 0x2c
 8004b54:	404a      	eors	r2, r1
 8004b56:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 8; i++, RK += 6 )
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	3318      	adds	r3, #24
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2b07      	cmp	r3, #7
 8004b68:	d998      	bls.n	8004a9c <mbedtls_aes_setkey_enc+0x180>
            }
            break;
 8004b6a:	e0a4      	b.n	8004cb6 <mbedtls_aes_setkey_enc+0x39a>

        case 14:

            for( i = 0; i < 7; i++, RK += 8 )
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	e09c      	b.n	8004cac <mbedtls_aes_setkey_enc+0x390>
 8004b72:	bf00      	nop
 8004b74:	200027e0 	.word	0x200027e0
 8004b78:	200027b8 	.word	0x200027b8
 8004b7c:	200005b8 	.word	0x200005b8
            {
                RK[8]  = RK[0] ^ RCON[i] ^
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	494e      	ldr	r1, [pc, #312]	; (8004cc0 <mbedtls_aes_setkey_enc+0x3a4>)
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004b8c:	4053      	eors	r3, r2
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	321c      	adds	r2, #28
 8004b92:	6812      	ldr	r2, [r2, #0]
 8004b94:	0a12      	lsrs	r2, r2, #8
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	494a      	ldr	r1, [pc, #296]	; (8004cc4 <mbedtls_aes_setkey_enc+0x3a8>)
 8004b9a:	5c8a      	ldrb	r2, [r1, r2]
                RK[8]  = RK[0] ^ RCON[i] ^
 8004b9c:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	331c      	adds	r3, #28
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	0c1b      	lsrs	r3, r3, #16
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	4946      	ldr	r1, [pc, #280]	; (8004cc4 <mbedtls_aes_setkey_enc+0x3a8>)
 8004baa:	5ccb      	ldrb	r3, [r1, r3]
 8004bac:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
 8004bae:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	331c      	adds	r3, #28
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	0e1b      	lsrs	r3, r3, #24
 8004bb8:	4942      	ldr	r1, [pc, #264]	; (8004cc4 <mbedtls_aes_setkey_enc+0x3a8>)
 8004bba:	5ccb      	ldrb	r3, [r1, r3]
 8004bbc:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
 8004bbe:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	331c      	adds	r3, #28
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	4a3e      	ldr	r2, [pc, #248]	; (8004cc4 <mbedtls_aes_setkey_enc+0x3a8>)
 8004bcc:	5cd3      	ldrb	r3, [r2, r3]
 8004bce:	061a      	lsls	r2, r3, #24
                RK[8]  = RK[0] ^ RCON[i] ^
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	3320      	adds	r3, #32
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
 8004bd4:	404a      	eors	r2, r1
                RK[8]  = RK[0] ^ RCON[i] ^
 8004bd6:	601a      	str	r2, [r3, #0]

                RK[9]  = RK[1] ^ RK[8];
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	6819      	ldr	r1, [r3, #0]
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	3320      	adds	r3, #32
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	3324      	adds	r3, #36	; 0x24
 8004be8:	404a      	eors	r2, r1
 8004bea:	601a      	str	r2, [r3, #0]
                RK[10] = RK[2] ^ RK[9];
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	3308      	adds	r3, #8
 8004bf0:	6819      	ldr	r1, [r3, #0]
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	3324      	adds	r3, #36	; 0x24
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	3328      	adds	r3, #40	; 0x28
 8004bfc:	404a      	eors	r2, r1
 8004bfe:	601a      	str	r2, [r3, #0]
                RK[11] = RK[3] ^ RK[10];
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	330c      	adds	r3, #12
 8004c04:	6819      	ldr	r1, [r3, #0]
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	3328      	adds	r3, #40	; 0x28
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	332c      	adds	r3, #44	; 0x2c
 8004c10:	404a      	eors	r2, r1
 8004c12:	601a      	str	r2, [r3, #0]

                RK[12] = RK[4] ^
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	3310      	adds	r3, #16
 8004c18:	681b      	ldr	r3, [r3, #0]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	322c      	adds	r2, #44	; 0x2c
 8004c1e:	6812      	ldr	r2, [r2, #0]
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	4928      	ldr	r1, [pc, #160]	; (8004cc4 <mbedtls_aes_setkey_enc+0x3a8>)
 8004c24:	5c8a      	ldrb	r2, [r1, r2]
                RK[12] = RK[4] ^
 8004c26:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	332c      	adds	r3, #44	; 0x2c
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	0a1b      	lsrs	r3, r3, #8
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	4924      	ldr	r1, [pc, #144]	; (8004cc4 <mbedtls_aes_setkey_enc+0x3a8>)
 8004c34:	5ccb      	ldrb	r3, [r1, r3]
 8004c36:	021b      	lsls	r3, r3, #8
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
 8004c38:	405a      	eors	r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	332c      	adds	r3, #44	; 0x2c
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	0c1b      	lsrs	r3, r3, #16
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	491f      	ldr	r1, [pc, #124]	; (8004cc4 <mbedtls_aes_setkey_enc+0x3a8>)
 8004c46:	5ccb      	ldrb	r3, [r1, r3]
 8004c48:	041b      	lsls	r3, r3, #16
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
 8004c4a:	ea82 0103 	eor.w	r1, r2, r3
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	332c      	adds	r3, #44	; 0x2c
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	0e1b      	lsrs	r3, r3, #24
 8004c56:	4a1b      	ldr	r2, [pc, #108]	; (8004cc4 <mbedtls_aes_setkey_enc+0x3a8>)
 8004c58:	5cd3      	ldrb	r3, [r2, r3]
 8004c5a:	061a      	lsls	r2, r3, #24
                RK[12] = RK[4] ^
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	3330      	adds	r3, #48	; 0x30
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
 8004c60:	404a      	eors	r2, r1
                RK[12] = RK[4] ^
 8004c62:	601a      	str	r2, [r3, #0]

                RK[13] = RK[5] ^ RK[12];
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	3314      	adds	r3, #20
 8004c68:	6819      	ldr	r1, [r3, #0]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	3330      	adds	r3, #48	; 0x30
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	3334      	adds	r3, #52	; 0x34
 8004c74:	404a      	eors	r2, r1
 8004c76:	601a      	str	r2, [r3, #0]
                RK[14] = RK[6] ^ RK[13];
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	3318      	adds	r3, #24
 8004c7c:	6819      	ldr	r1, [r3, #0]
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	3334      	adds	r3, #52	; 0x34
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	3338      	adds	r3, #56	; 0x38
 8004c88:	404a      	eors	r2, r1
 8004c8a:	601a      	str	r2, [r3, #0]
                RK[15] = RK[7] ^ RK[14];
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	331c      	adds	r3, #28
 8004c90:	6819      	ldr	r1, [r3, #0]
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	3338      	adds	r3, #56	; 0x38
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	333c      	adds	r3, #60	; 0x3c
 8004c9c:	404a      	eors	r2, r1
 8004c9e:	601a      	str	r2, [r3, #0]
            for( i = 0; i < 7; i++, RK += 8 )
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	3320      	adds	r3, #32
 8004caa:	613b      	str	r3, [r7, #16]
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2b06      	cmp	r3, #6
 8004cb0:	f67f af66 	bls.w	8004b80 <mbedtls_aes_setkey_enc+0x264>
            }
            break;
 8004cb4:	bf00      	nop
    }

    return( 0 );
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	200027b8 	.word	0x200027b8
 8004cc4:	200005b8 	.word	0x200005b8

08004cc8 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b08f      	sub	sp, #60	; 0x3c
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	633b      	str	r3, [r7, #48]	; 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	021b      	lsls	r3, r3, #8
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	3302      	adds	r3, #2
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	041b      	lsls	r3, r3, #16
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	3303      	adds	r3, #3
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	061b      	lsls	r3, r3, #24
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	1d1a      	adds	r2, r3, #4
 8004d04:	633a      	str	r2, [r7, #48]	; 0x30
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d0a:	4053      	eors	r3, r2
 8004d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	3304      	adds	r3, #4
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	3305      	adds	r3, #5
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	3306      	adds	r3, #6
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	041b      	lsls	r3, r3, #16
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	3307      	adds	r3, #7
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	061b      	lsls	r3, r3, #24
 8004d32:	4313      	orrs	r3, r2
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	1d1a      	adds	r2, r3, #4
 8004d3a:	633a      	str	r2, [r7, #48]	; 0x30
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d40:	4053      	eors	r3, r2
 8004d42:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	3308      	adds	r3, #8
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	3309      	adds	r3, #9
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	431a      	orrs	r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	330a      	adds	r3, #10
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	041b      	lsls	r3, r3, #16
 8004d5e:	431a      	orrs	r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	330b      	adds	r3, #11
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	061b      	lsls	r3, r3, #24
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	1d1a      	adds	r2, r3, #4
 8004d70:	633a      	str	r2, [r7, #48]	; 0x30
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d76:	4053      	eors	r3, r2
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	330c      	adds	r3, #12
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	461a      	mov	r2, r3
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	330d      	adds	r3, #13
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	330e      	adds	r3, #14
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	041b      	lsls	r3, r3, #16
 8004d94:	431a      	orrs	r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	330f      	adds	r3, #15
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	061b      	lsls	r3, r3, #24
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	623b      	str	r3, [r7, #32]
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	1d1a      	adds	r2, r3, #4
 8004da6:	633a      	str	r2, [r7, #48]	; 0x30
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6a3a      	ldr	r2, [r7, #32]
 8004dac:	4053      	eors	r3, r2
 8004dae:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	105b      	asrs	r3, r3, #1
 8004db6:	3b01      	subs	r3, #1
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dba:	e0fa      	b.n	8004fb2 <mbedtls_internal_aes_encrypt+0x2ea>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	1d1a      	adds	r2, r3, #4
 8004dc0:	633a      	str	r2, [r7, #48]	; 0x30
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	49ac      	ldr	r1, [pc, #688]	; (800507c <mbedtls_internal_aes_encrypt+0x3b4>)
 8004dca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004dce:	405a      	eors	r2, r3
 8004dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd2:	0a1b      	lsrs	r3, r3, #8
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	49aa      	ldr	r1, [pc, #680]	; (8005080 <mbedtls_internal_aes_encrypt+0x3b8>)
 8004dd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ddc:	405a      	eors	r2, r3
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	0c1b      	lsrs	r3, r3, #16
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	49a7      	ldr	r1, [pc, #668]	; (8005084 <mbedtls_internal_aes_encrypt+0x3bc>)
 8004de6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004dea:	405a      	eors	r2, r3
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	0e1b      	lsrs	r3, r3, #24
 8004df0:	49a5      	ldr	r1, [pc, #660]	; (8005088 <mbedtls_internal_aes_encrypt+0x3c0>)
 8004df2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004df6:	4053      	eors	r3, r2
 8004df8:	61fb      	str	r3, [r7, #28]
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	1d1a      	adds	r2, r3, #4
 8004dfe:	633a      	str	r2, [r7, #48]	; 0x30
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	499d      	ldr	r1, [pc, #628]	; (800507c <mbedtls_internal_aes_encrypt+0x3b4>)
 8004e08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e0c:	405a      	eors	r2, r3
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	0a1b      	lsrs	r3, r3, #8
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	499a      	ldr	r1, [pc, #616]	; (8005080 <mbedtls_internal_aes_encrypt+0x3b8>)
 8004e16:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e1a:	405a      	eors	r2, r3
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	0c1b      	lsrs	r3, r3, #16
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	4998      	ldr	r1, [pc, #608]	; (8005084 <mbedtls_internal_aes_encrypt+0x3bc>)
 8004e24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e28:	405a      	eors	r2, r3
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	0e1b      	lsrs	r3, r3, #24
 8004e2e:	4996      	ldr	r1, [pc, #600]	; (8005088 <mbedtls_internal_aes_encrypt+0x3c0>)
 8004e30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e34:	4053      	eors	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3a:	1d1a      	adds	r2, r3, #4
 8004e3c:	633a      	str	r2, [r7, #48]	; 0x30
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	498d      	ldr	r1, [pc, #564]	; (800507c <mbedtls_internal_aes_encrypt+0x3b4>)
 8004e46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e4a:	405a      	eors	r2, r3
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	0a1b      	lsrs	r3, r3, #8
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	498b      	ldr	r1, [pc, #556]	; (8005080 <mbedtls_internal_aes_encrypt+0x3b8>)
 8004e54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e58:	405a      	eors	r2, r3
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5c:	0c1b      	lsrs	r3, r3, #16
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	4988      	ldr	r1, [pc, #544]	; (8005084 <mbedtls_internal_aes_encrypt+0x3bc>)
 8004e62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e66:	405a      	eors	r2, r3
 8004e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6a:	0e1b      	lsrs	r3, r3, #24
 8004e6c:	4986      	ldr	r1, [pc, #536]	; (8005088 <mbedtls_internal_aes_encrypt+0x3c0>)
 8004e6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e72:	4053      	eors	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e78:	1d1a      	adds	r2, r3, #4
 8004e7a:	633a      	str	r2, [r7, #48]	; 0x30
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	497e      	ldr	r1, [pc, #504]	; (800507c <mbedtls_internal_aes_encrypt+0x3b4>)
 8004e84:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e88:	405a      	eors	r2, r3
 8004e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8c:	0a1b      	lsrs	r3, r3, #8
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	497b      	ldr	r1, [pc, #492]	; (8005080 <mbedtls_internal_aes_encrypt+0x3b8>)
 8004e92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004e96:	405a      	eors	r2, r3
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	0c1b      	lsrs	r3, r3, #16
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	4979      	ldr	r1, [pc, #484]	; (8005084 <mbedtls_internal_aes_encrypt+0x3bc>)
 8004ea0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ea4:	405a      	eors	r2, r3
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	0e1b      	lsrs	r3, r3, #24
 8004eaa:	4977      	ldr	r1, [pc, #476]	; (8005088 <mbedtls_internal_aes_encrypt+0x3c0>)
 8004eac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004eb0:	4053      	eors	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb6:	1d1a      	adds	r2, r3, #4
 8004eb8:	633a      	str	r2, [r7, #48]	; 0x30
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	496e      	ldr	r1, [pc, #440]	; (800507c <mbedtls_internal_aes_encrypt+0x3b4>)
 8004ec2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ec6:	405a      	eors	r2, r3
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	0a1b      	lsrs	r3, r3, #8
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	496c      	ldr	r1, [pc, #432]	; (8005080 <mbedtls_internal_aes_encrypt+0x3b8>)
 8004ed0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ed4:	405a      	eors	r2, r3
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	0c1b      	lsrs	r3, r3, #16
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	4969      	ldr	r1, [pc, #420]	; (8005084 <mbedtls_internal_aes_encrypt+0x3bc>)
 8004ede:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ee2:	405a      	eors	r2, r3
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	0e1b      	lsrs	r3, r3, #24
 8004ee8:	4967      	ldr	r1, [pc, #412]	; (8005088 <mbedtls_internal_aes_encrypt+0x3c0>)
 8004eea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004eee:	4053      	eors	r3, r2
 8004ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef4:	1d1a      	adds	r2, r3, #4
 8004ef6:	633a      	str	r2, [r7, #48]	; 0x30
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	495f      	ldr	r1, [pc, #380]	; (800507c <mbedtls_internal_aes_encrypt+0x3b4>)
 8004f00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f04:	405a      	eors	r2, r3
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	0a1b      	lsrs	r3, r3, #8
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	495c      	ldr	r1, [pc, #368]	; (8005080 <mbedtls_internal_aes_encrypt+0x3b8>)
 8004f0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f12:	405a      	eors	r2, r3
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	0c1b      	lsrs	r3, r3, #16
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	495a      	ldr	r1, [pc, #360]	; (8005084 <mbedtls_internal_aes_encrypt+0x3bc>)
 8004f1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f20:	405a      	eors	r2, r3
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	0e1b      	lsrs	r3, r3, #24
 8004f26:	4958      	ldr	r1, [pc, #352]	; (8005088 <mbedtls_internal_aes_encrypt+0x3c0>)
 8004f28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f2c:	4053      	eors	r3, r2
 8004f2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f32:	1d1a      	adds	r2, r3, #4
 8004f34:	633a      	str	r2, [r7, #48]	; 0x30
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	494f      	ldr	r1, [pc, #316]	; (800507c <mbedtls_internal_aes_encrypt+0x3b4>)
 8004f3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f42:	405a      	eors	r2, r3
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	0a1b      	lsrs	r3, r3, #8
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	494d      	ldr	r1, [pc, #308]	; (8005080 <mbedtls_internal_aes_encrypt+0x3b8>)
 8004f4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f50:	405a      	eors	r2, r3
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	0c1b      	lsrs	r3, r3, #16
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	494a      	ldr	r1, [pc, #296]	; (8005084 <mbedtls_internal_aes_encrypt+0x3bc>)
 8004f5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f5e:	405a      	eors	r2, r3
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	0e1b      	lsrs	r3, r3, #24
 8004f64:	4948      	ldr	r1, [pc, #288]	; (8005088 <mbedtls_internal_aes_encrypt+0x3c0>)
 8004f66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f6a:	4053      	eors	r3, r2
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	1d1a      	adds	r2, r3, #4
 8004f72:	633a      	str	r2, [r7, #48]	; 0x30
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	4940      	ldr	r1, [pc, #256]	; (800507c <mbedtls_internal_aes_encrypt+0x3b4>)
 8004f7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f80:	405a      	eors	r2, r3
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	0a1b      	lsrs	r3, r3, #8
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	493d      	ldr	r1, [pc, #244]	; (8005080 <mbedtls_internal_aes_encrypt+0x3b8>)
 8004f8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f8e:	405a      	eors	r2, r3
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	0c1b      	lsrs	r3, r3, #16
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	493b      	ldr	r1, [pc, #236]	; (8005084 <mbedtls_internal_aes_encrypt+0x3bc>)
 8004f98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f9c:	405a      	eors	r2, r3
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	0e1b      	lsrs	r3, r3, #24
 8004fa2:	4939      	ldr	r1, [pc, #228]	; (8005088 <mbedtls_internal_aes_encrypt+0x3c0>)
 8004fa4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004fa8:	4053      	eors	r3, r2
 8004faa:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8004fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8004fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f73f af01 	bgt.w	8004dbc <mbedtls_internal_aes_encrypt+0xf4>
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8004fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbc:	1d1a      	adds	r2, r3, #4
 8004fbe:	633a      	str	r2, [r7, #48]	; 0x30
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	492d      	ldr	r1, [pc, #180]	; (800507c <mbedtls_internal_aes_encrypt+0x3b4>)
 8004fc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004fcc:	405a      	eors	r2, r3
 8004fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd0:	0a1b      	lsrs	r3, r3, #8
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	492a      	ldr	r1, [pc, #168]	; (8005080 <mbedtls_internal_aes_encrypt+0x3b8>)
 8004fd6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004fda:	405a      	eors	r2, r3
 8004fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fde:	0c1b      	lsrs	r3, r3, #16
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	4928      	ldr	r1, [pc, #160]	; (8005084 <mbedtls_internal_aes_encrypt+0x3bc>)
 8004fe4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004fe8:	405a      	eors	r2, r3
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	0e1b      	lsrs	r3, r3, #24
 8004fee:	4926      	ldr	r1, [pc, #152]	; (8005088 <mbedtls_internal_aes_encrypt+0x3c0>)
 8004ff0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004ff4:	4053      	eors	r3, r2
 8004ff6:	61fb      	str	r3, [r7, #28]
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	1d1a      	adds	r2, r3, #4
 8004ffc:	633a      	str	r2, [r7, #48]	; 0x30
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005002:	b2db      	uxtb	r3, r3
 8005004:	491d      	ldr	r1, [pc, #116]	; (800507c <mbedtls_internal_aes_encrypt+0x3b4>)
 8005006:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800500a:	405a      	eors	r2, r3
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	0a1b      	lsrs	r3, r3, #8
 8005010:	b2db      	uxtb	r3, r3
 8005012:	491b      	ldr	r1, [pc, #108]	; (8005080 <mbedtls_internal_aes_encrypt+0x3b8>)
 8005014:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005018:	405a      	eors	r2, r3
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	0c1b      	lsrs	r3, r3, #16
 800501e:	b2db      	uxtb	r3, r3
 8005020:	4918      	ldr	r1, [pc, #96]	; (8005084 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005022:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005026:	405a      	eors	r2, r3
 8005028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502a:	0e1b      	lsrs	r3, r3, #24
 800502c:	4916      	ldr	r1, [pc, #88]	; (8005088 <mbedtls_internal_aes_encrypt+0x3c0>)
 800502e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005032:	4053      	eors	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
 8005036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005038:	1d1a      	adds	r2, r3, #4
 800503a:	633a      	str	r2, [r7, #48]	; 0x30
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	b2db      	uxtb	r3, r3
 8005042:	490e      	ldr	r1, [pc, #56]	; (800507c <mbedtls_internal_aes_encrypt+0x3b4>)
 8005044:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005048:	405a      	eors	r2, r3
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	0a1b      	lsrs	r3, r3, #8
 800504e:	b2db      	uxtb	r3, r3
 8005050:	490b      	ldr	r1, [pc, #44]	; (8005080 <mbedtls_internal_aes_encrypt+0x3b8>)
 8005052:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005056:	405a      	eors	r2, r3
 8005058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505a:	0c1b      	lsrs	r3, r3, #16
 800505c:	b2db      	uxtb	r3, r3
 800505e:	4909      	ldr	r1, [pc, #36]	; (8005084 <mbedtls_internal_aes_encrypt+0x3bc>)
 8005060:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005064:	405a      	eors	r2, r3
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	0e1b      	lsrs	r3, r3, #24
 800506a:	4907      	ldr	r1, [pc, #28]	; (8005088 <mbedtls_internal_aes_encrypt+0x3c0>)
 800506c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005070:	4053      	eors	r3, r2
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005076:	1d1a      	adds	r2, r3, #4
 8005078:	e008      	b.n	800508c <mbedtls_internal_aes_encrypt+0x3c4>
 800507a:	bf00      	nop
 800507c:	200006b8 	.word	0x200006b8
 8005080:	20000ab8 	.word	0x20000ab8
 8005084:	20000eb8 	.word	0x20000eb8
 8005088:	200012b8 	.word	0x200012b8
 800508c:	633a      	str	r2, [r7, #48]	; 0x30
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	b2db      	uxtb	r3, r3
 8005094:	4979      	ldr	r1, [pc, #484]	; (800527c <mbedtls_internal_aes_encrypt+0x5b4>)
 8005096:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800509a:	405a      	eors	r2, r3
 800509c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509e:	0a1b      	lsrs	r3, r3, #8
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	4977      	ldr	r1, [pc, #476]	; (8005280 <mbedtls_internal_aes_encrypt+0x5b8>)
 80050a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80050a8:	405a      	eors	r2, r3
 80050aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ac:	0c1b      	lsrs	r3, r3, #16
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	4974      	ldr	r1, [pc, #464]	; (8005284 <mbedtls_internal_aes_encrypt+0x5bc>)
 80050b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80050b6:	405a      	eors	r2, r3
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	0e1b      	lsrs	r3, r3, #24
 80050bc:	4972      	ldr	r1, [pc, #456]	; (8005288 <mbedtls_internal_aes_encrypt+0x5c0>)
 80050be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80050c2:	4053      	eors	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 80050c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c8:	1d1a      	adds	r2, r3, #4
 80050ca:	633a      	str	r2, [r7, #48]	; 0x30
 80050cc:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 80050ce:	69fa      	ldr	r2, [r7, #28]
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	496e      	ldr	r1, [pc, #440]	; (800528c <mbedtls_internal_aes_encrypt+0x5c4>)
 80050d4:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 80050d6:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	0a1b      	lsrs	r3, r3, #8
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	496b      	ldr	r1, [pc, #428]	; (800528c <mbedtls_internal_aes_encrypt+0x5c4>)
 80050e0:	5ccb      	ldrb	r3, [r1, r3]
 80050e2:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
 80050e4:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	0c1b      	lsrs	r3, r3, #16
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	4967      	ldr	r1, [pc, #412]	; (800528c <mbedtls_internal_aes_encrypt+0x5c4>)
 80050ee:	5ccb      	ldrb	r3, [r1, r3]
 80050f0:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 80050f2:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	0e1b      	lsrs	r3, r3, #24
 80050f8:	4964      	ldr	r1, [pc, #400]	; (800528c <mbedtls_internal_aes_encrypt+0x5c4>)
 80050fa:	5ccb      	ldrb	r3, [r1, r3]
 80050fc:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 80050fe:	4053      	eors	r3, r2
 8005100:	62fb      	str	r3, [r7, #44]	; 0x2c

    X1 = *RK++ ^ \
 8005102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005104:	1d1a      	adds	r2, r3, #4
 8005106:	633a      	str	r2, [r7, #48]	; 0x30
 8005108:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	495f      	ldr	r1, [pc, #380]	; (800528c <mbedtls_internal_aes_encrypt+0x5c4>)
 8005110:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 8005112:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	0a1b      	lsrs	r3, r3, #8
 8005118:	b2db      	uxtb	r3, r3
 800511a:	495c      	ldr	r1, [pc, #368]	; (800528c <mbedtls_internal_aes_encrypt+0x5c4>)
 800511c:	5ccb      	ldrb	r3, [r1, r3]
 800511e:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
 8005120:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	0c1b      	lsrs	r3, r3, #16
 8005126:	b2db      	uxtb	r3, r3
 8005128:	4958      	ldr	r1, [pc, #352]	; (800528c <mbedtls_internal_aes_encrypt+0x5c4>)
 800512a:	5ccb      	ldrb	r3, [r1, r3]
 800512c:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800512e:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	0e1b      	lsrs	r3, r3, #24
 8005134:	4955      	ldr	r1, [pc, #340]	; (800528c <mbedtls_internal_aes_encrypt+0x5c4>)
 8005136:	5ccb      	ldrb	r3, [r1, r3]
 8005138:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 800513a:	4053      	eors	r3, r2
 800513c:	62bb      	str	r3, [r7, #40]	; 0x28

    X2 = *RK++ ^ \
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	1d1a      	adds	r2, r3, #4
 8005142:	633a      	str	r2, [r7, #48]	; 0x30
 8005144:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	4950      	ldr	r1, [pc, #320]	; (800528c <mbedtls_internal_aes_encrypt+0x5c4>)
 800514c:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 800514e:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	0a1b      	lsrs	r3, r3, #8
 8005154:	b2db      	uxtb	r3, r3
 8005156:	494d      	ldr	r1, [pc, #308]	; (800528c <mbedtls_internal_aes_encrypt+0x5c4>)
 8005158:	5ccb      	ldrb	r3, [r1, r3]
 800515a:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
 800515c:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	0c1b      	lsrs	r3, r3, #16
 8005162:	b2db      	uxtb	r3, r3
 8005164:	4949      	ldr	r1, [pc, #292]	; (800528c <mbedtls_internal_aes_encrypt+0x5c4>)
 8005166:	5ccb      	ldrb	r3, [r1, r3]
 8005168:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 800516a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	0e1b      	lsrs	r3, r3, #24
 8005170:	4946      	ldr	r1, [pc, #280]	; (800528c <mbedtls_internal_aes_encrypt+0x5c4>)
 8005172:	5ccb      	ldrb	r3, [r1, r3]
 8005174:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 8005176:	4053      	eors	r3, r2
 8005178:	627b      	str	r3, [r7, #36]	; 0x24

    X3 = *RK++ ^ \
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	1d1a      	adds	r2, r3, #4
 800517e:	633a      	str	r2, [r7, #48]	; 0x30
 8005180:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	4941      	ldr	r1, [pc, #260]	; (800528c <mbedtls_internal_aes_encrypt+0x5c4>)
 8005188:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 800518a:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	0a1b      	lsrs	r3, r3, #8
 8005190:	b2db      	uxtb	r3, r3
 8005192:	493e      	ldr	r1, [pc, #248]	; (800528c <mbedtls_internal_aes_encrypt+0x5c4>)
 8005194:	5ccb      	ldrb	r3, [r1, r3]
 8005196:	021b      	lsls	r3, r3, #8
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
 8005198:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	0c1b      	lsrs	r3, r3, #16
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	493a      	ldr	r1, [pc, #232]	; (800528c <mbedtls_internal_aes_encrypt+0x5c4>)
 80051a2:	5ccb      	ldrb	r3, [r1, r3]
 80051a4:	041b      	lsls	r3, r3, #16
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 80051a6:	405a      	eors	r2, r3
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	0e1b      	lsrs	r3, r3, #24
 80051ac:	4937      	ldr	r1, [pc, #220]	; (800528c <mbedtls_internal_aes_encrypt+0x5c4>)
 80051ae:	5ccb      	ldrb	r3, [r1, r3]
 80051b0:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 80051b2:	4053      	eors	r3, r2
 80051b4:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 80051b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c0:	0a1a      	lsrs	r2, r3, #8
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	3301      	adds	r3, #1
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]
 80051ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051cc:	0c1a      	lsrs	r2, r3, #16
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3302      	adds	r3, #2
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d8:	0e1a      	lsrs	r2, r3, #24
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	3303      	adds	r3, #3
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	3304      	adds	r3, #4
 80051e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	701a      	strb	r2, [r3, #0]
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	0a1a      	lsrs	r2, r3, #8
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3305      	adds	r3, #5
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	0c1a      	lsrs	r2, r3, #16
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3306      	adds	r3, #6
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	701a      	strb	r2, [r3, #0]
 8005204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005206:	0e1a      	lsrs	r2, r3, #24
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3307      	adds	r3, #7
 800520c:	b2d2      	uxtb	r2, r2
 800520e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3308      	adds	r3, #8
 8005214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	701a      	strb	r2, [r3, #0]
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	0a1a      	lsrs	r2, r3, #8
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	3309      	adds	r3, #9
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	0c1a      	lsrs	r2, r3, #16
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	330a      	adds	r3, #10
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	0e1a      	lsrs	r2, r3, #24
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	330b      	adds	r3, #11
 800523a:	b2d2      	uxtb	r2, r2
 800523c:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	330c      	adds	r3, #12
 8005242:	6a3a      	ldr	r2, [r7, #32]
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	0a1a      	lsrs	r2, r3, #8
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	330d      	adds	r3, #13
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	701a      	strb	r2, [r3, #0]
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	0c1a      	lsrs	r2, r3, #16
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	330e      	adds	r3, #14
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	6a3b      	ldr	r3, [r7, #32]
 8005262:	0e1a      	lsrs	r2, r3, #24
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	330f      	adds	r3, #15
 8005268:	b2d2      	uxtb	r2, r2
 800526a:	701a      	strb	r2, [r3, #0]

    return( 0 );
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	373c      	adds	r7, #60	; 0x3c
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	200006b8 	.word	0x200006b8
 8005280:	20000ab8 	.word	0x20000ab8
 8005284:	20000eb8 	.word	0x20000eb8
 8005288:	200012b8 	.word	0x200012b8
 800528c:	200005b8 	.word	0x200005b8

08005290 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
 8005290:	b480      	push	{r7}
 8005292:	b08f      	sub	sp, #60	; 0x3c
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	633b      	str	r3, [r7, #48]	; 0x30

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	3301      	adds	r3, #1
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	021b      	lsls	r3, r3, #8
 80052b0:	431a      	orrs	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	3302      	adds	r3, #2
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	041b      	lsls	r3, r3, #16
 80052ba:	431a      	orrs	r2, r3
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	3303      	adds	r3, #3
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	061b      	lsls	r3, r3, #24
 80052c4:	4313      	orrs	r3, r2
 80052c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	1d1a      	adds	r2, r3, #4
 80052cc:	633a      	str	r2, [r7, #48]	; 0x30
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052d2:	4053      	eors	r3, r2
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	3304      	adds	r3, #4
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	461a      	mov	r2, r3
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	3305      	adds	r3, #5
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	431a      	orrs	r2, r3
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	3306      	adds	r3, #6
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	041b      	lsls	r3, r3, #16
 80052f0:	431a      	orrs	r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	3307      	adds	r3, #7
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	061b      	lsls	r3, r3, #24
 80052fa:	4313      	orrs	r3, r2
 80052fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005300:	1d1a      	adds	r2, r3, #4
 8005302:	633a      	str	r2, [r7, #48]	; 0x30
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005308:	4053      	eors	r3, r2
 800530a:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	3308      	adds	r3, #8
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	461a      	mov	r2, r3
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	3309      	adds	r3, #9
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	021b      	lsls	r3, r3, #8
 800531c:	431a      	orrs	r2, r3
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	330a      	adds	r3, #10
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	041b      	lsls	r3, r3, #16
 8005326:	431a      	orrs	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	330b      	adds	r3, #11
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	061b      	lsls	r3, r3, #24
 8005330:	4313      	orrs	r3, r2
 8005332:	627b      	str	r3, [r7, #36]	; 0x24
 8005334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005336:	1d1a      	adds	r2, r3, #4
 8005338:	633a      	str	r2, [r7, #48]	; 0x30
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800533e:	4053      	eors	r3, r2
 8005340:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	330c      	adds	r3, #12
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	330d      	adds	r3, #13
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	021b      	lsls	r3, r3, #8
 8005352:	431a      	orrs	r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	330e      	adds	r3, #14
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	041b      	lsls	r3, r3, #16
 800535c:	431a      	orrs	r2, r3
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	330f      	adds	r3, #15
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	061b      	lsls	r3, r3, #24
 8005366:	4313      	orrs	r3, r2
 8005368:	623b      	str	r3, [r7, #32]
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	1d1a      	adds	r2, r3, #4
 800536e:	633a      	str	r2, [r7, #48]	; 0x30
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6a3a      	ldr	r2, [r7, #32]
 8005374:	4053      	eors	r3, r2
 8005376:	623b      	str	r3, [r7, #32]

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	105b      	asrs	r3, r3, #1
 800537e:	3b01      	subs	r3, #1
 8005380:	637b      	str	r3, [r7, #52]	; 0x34
 8005382:	e0fa      	b.n	800557a <mbedtls_internal_aes_decrypt+0x2ea>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	1d1a      	adds	r2, r3, #4
 8005388:	633a      	str	r2, [r7, #48]	; 0x30
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538e:	b2db      	uxtb	r3, r3
 8005390:	49ac      	ldr	r1, [pc, #688]	; (8005644 <mbedtls_internal_aes_decrypt+0x3b4>)
 8005392:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005396:	405a      	eors	r2, r3
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	0a1b      	lsrs	r3, r3, #8
 800539c:	b2db      	uxtb	r3, r3
 800539e:	49aa      	ldr	r1, [pc, #680]	; (8005648 <mbedtls_internal_aes_decrypt+0x3b8>)
 80053a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80053a4:	405a      	eors	r2, r3
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	0c1b      	lsrs	r3, r3, #16
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	49a7      	ldr	r1, [pc, #668]	; (800564c <mbedtls_internal_aes_decrypt+0x3bc>)
 80053ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80053b2:	405a      	eors	r2, r3
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	0e1b      	lsrs	r3, r3, #24
 80053b8:	49a5      	ldr	r1, [pc, #660]	; (8005650 <mbedtls_internal_aes_decrypt+0x3c0>)
 80053ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80053be:	4053      	eors	r3, r2
 80053c0:	61fb      	str	r3, [r7, #28]
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	1d1a      	adds	r2, r3, #4
 80053c6:	633a      	str	r2, [r7, #48]	; 0x30
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	499d      	ldr	r1, [pc, #628]	; (8005644 <mbedtls_internal_aes_decrypt+0x3b4>)
 80053d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80053d4:	405a      	eors	r2, r3
 80053d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d8:	0a1b      	lsrs	r3, r3, #8
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	499a      	ldr	r1, [pc, #616]	; (8005648 <mbedtls_internal_aes_decrypt+0x3b8>)
 80053de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80053e2:	405a      	eors	r2, r3
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	0c1b      	lsrs	r3, r3, #16
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	4998      	ldr	r1, [pc, #608]	; (800564c <mbedtls_internal_aes_decrypt+0x3bc>)
 80053ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80053f0:	405a      	eors	r2, r3
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	0e1b      	lsrs	r3, r3, #24
 80053f6:	4996      	ldr	r1, [pc, #600]	; (8005650 <mbedtls_internal_aes_decrypt+0x3c0>)
 80053f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80053fc:	4053      	eors	r3, r2
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	1d1a      	adds	r2, r3, #4
 8005404:	633a      	str	r2, [r7, #48]	; 0x30
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	b2db      	uxtb	r3, r3
 800540c:	498d      	ldr	r1, [pc, #564]	; (8005644 <mbedtls_internal_aes_decrypt+0x3b4>)
 800540e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005412:	405a      	eors	r2, r3
 8005414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005416:	0a1b      	lsrs	r3, r3, #8
 8005418:	b2db      	uxtb	r3, r3
 800541a:	498b      	ldr	r1, [pc, #556]	; (8005648 <mbedtls_internal_aes_decrypt+0x3b8>)
 800541c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005420:	405a      	eors	r2, r3
 8005422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005424:	0c1b      	lsrs	r3, r3, #16
 8005426:	b2db      	uxtb	r3, r3
 8005428:	4988      	ldr	r1, [pc, #544]	; (800564c <mbedtls_internal_aes_decrypt+0x3bc>)
 800542a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800542e:	405a      	eors	r2, r3
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	0e1b      	lsrs	r3, r3, #24
 8005434:	4986      	ldr	r1, [pc, #536]	; (8005650 <mbedtls_internal_aes_decrypt+0x3c0>)
 8005436:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800543a:	4053      	eors	r3, r2
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	1d1a      	adds	r2, r3, #4
 8005442:	633a      	str	r2, [r7, #48]	; 0x30
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	497e      	ldr	r1, [pc, #504]	; (8005644 <mbedtls_internal_aes_decrypt+0x3b4>)
 800544c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005450:	405a      	eors	r2, r3
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	0a1b      	lsrs	r3, r3, #8
 8005456:	b2db      	uxtb	r3, r3
 8005458:	497b      	ldr	r1, [pc, #492]	; (8005648 <mbedtls_internal_aes_decrypt+0x3b8>)
 800545a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800545e:	405a      	eors	r2, r3
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	0c1b      	lsrs	r3, r3, #16
 8005464:	b2db      	uxtb	r3, r3
 8005466:	4979      	ldr	r1, [pc, #484]	; (800564c <mbedtls_internal_aes_decrypt+0x3bc>)
 8005468:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800546c:	405a      	eors	r2, r3
 800546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005470:	0e1b      	lsrs	r3, r3, #24
 8005472:	4977      	ldr	r1, [pc, #476]	; (8005650 <mbedtls_internal_aes_decrypt+0x3c0>)
 8005474:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005478:	4053      	eors	r3, r2
 800547a:	613b      	str	r3, [r7, #16]
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
 800547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547e:	1d1a      	adds	r2, r3, #4
 8005480:	633a      	str	r2, [r7, #48]	; 0x30
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	496e      	ldr	r1, [pc, #440]	; (8005644 <mbedtls_internal_aes_decrypt+0x3b4>)
 800548a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800548e:	405a      	eors	r2, r3
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	0a1b      	lsrs	r3, r3, #8
 8005494:	b2db      	uxtb	r3, r3
 8005496:	496c      	ldr	r1, [pc, #432]	; (8005648 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005498:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800549c:	405a      	eors	r2, r3
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	0c1b      	lsrs	r3, r3, #16
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	4969      	ldr	r1, [pc, #420]	; (800564c <mbedtls_internal_aes_decrypt+0x3bc>)
 80054a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80054aa:	405a      	eors	r2, r3
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	0e1b      	lsrs	r3, r3, #24
 80054b0:	4967      	ldr	r1, [pc, #412]	; (8005650 <mbedtls_internal_aes_decrypt+0x3c0>)
 80054b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80054b6:	4053      	eors	r3, r2
 80054b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	1d1a      	adds	r2, r3, #4
 80054be:	633a      	str	r2, [r7, #48]	; 0x30
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	495f      	ldr	r1, [pc, #380]	; (8005644 <mbedtls_internal_aes_decrypt+0x3b4>)
 80054c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80054cc:	405a      	eors	r2, r3
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	0a1b      	lsrs	r3, r3, #8
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	495c      	ldr	r1, [pc, #368]	; (8005648 <mbedtls_internal_aes_decrypt+0x3b8>)
 80054d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80054da:	405a      	eors	r2, r3
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	0c1b      	lsrs	r3, r3, #16
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	495a      	ldr	r1, [pc, #360]	; (800564c <mbedtls_internal_aes_decrypt+0x3bc>)
 80054e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80054e8:	405a      	eors	r2, r3
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	0e1b      	lsrs	r3, r3, #24
 80054ee:	4958      	ldr	r1, [pc, #352]	; (8005650 <mbedtls_internal_aes_decrypt+0x3c0>)
 80054f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80054f4:	4053      	eors	r3, r2
 80054f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	1d1a      	adds	r2, r3, #4
 80054fc:	633a      	str	r2, [r7, #48]	; 0x30
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	b2db      	uxtb	r3, r3
 8005504:	494f      	ldr	r1, [pc, #316]	; (8005644 <mbedtls_internal_aes_decrypt+0x3b4>)
 8005506:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800550a:	405a      	eors	r2, r3
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	0a1b      	lsrs	r3, r3, #8
 8005510:	b2db      	uxtb	r3, r3
 8005512:	494d      	ldr	r1, [pc, #308]	; (8005648 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005514:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005518:	405a      	eors	r2, r3
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	0c1b      	lsrs	r3, r3, #16
 800551e:	b2db      	uxtb	r3, r3
 8005520:	494a      	ldr	r1, [pc, #296]	; (800564c <mbedtls_internal_aes_decrypt+0x3bc>)
 8005522:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005526:	405a      	eors	r2, r3
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	0e1b      	lsrs	r3, r3, #24
 800552c:	4948      	ldr	r1, [pc, #288]	; (8005650 <mbedtls_internal_aes_decrypt+0x3c0>)
 800552e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005532:	4053      	eors	r3, r2
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
 8005536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005538:	1d1a      	adds	r2, r3, #4
 800553a:	633a      	str	r2, [r7, #48]	; 0x30
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	b2db      	uxtb	r3, r3
 8005542:	4940      	ldr	r1, [pc, #256]	; (8005644 <mbedtls_internal_aes_decrypt+0x3b4>)
 8005544:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005548:	405a      	eors	r2, r3
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	0a1b      	lsrs	r3, r3, #8
 800554e:	b2db      	uxtb	r3, r3
 8005550:	493d      	ldr	r1, [pc, #244]	; (8005648 <mbedtls_internal_aes_decrypt+0x3b8>)
 8005552:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005556:	405a      	eors	r2, r3
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	0c1b      	lsrs	r3, r3, #16
 800555c:	b2db      	uxtb	r3, r3
 800555e:	493b      	ldr	r1, [pc, #236]	; (800564c <mbedtls_internal_aes_decrypt+0x3bc>)
 8005560:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005564:	405a      	eors	r2, r3
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	0e1b      	lsrs	r3, r3, #24
 800556a:	4939      	ldr	r1, [pc, #228]	; (8005650 <mbedtls_internal_aes_decrypt+0x3c0>)
 800556c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005570:	4053      	eors	r3, r2
 8005572:	623b      	str	r3, [r7, #32]
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
 8005574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005576:	3b01      	subs	r3, #1
 8005578:	637b      	str	r3, [r7, #52]	; 0x34
 800557a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557c:	2b00      	cmp	r3, #0
 800557e:	f73f af01 	bgt.w	8005384 <mbedtls_internal_aes_decrypt+0xf4>
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	1d1a      	adds	r2, r3, #4
 8005586:	633a      	str	r2, [r7, #48]	; 0x30
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558c:	b2db      	uxtb	r3, r3
 800558e:	492d      	ldr	r1, [pc, #180]	; (8005644 <mbedtls_internal_aes_decrypt+0x3b4>)
 8005590:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005594:	405a      	eors	r2, r3
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	0a1b      	lsrs	r3, r3, #8
 800559a:	b2db      	uxtb	r3, r3
 800559c:	492a      	ldr	r1, [pc, #168]	; (8005648 <mbedtls_internal_aes_decrypt+0x3b8>)
 800559e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055a2:	405a      	eors	r2, r3
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	0c1b      	lsrs	r3, r3, #16
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	4928      	ldr	r1, [pc, #160]	; (800564c <mbedtls_internal_aes_decrypt+0x3bc>)
 80055ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055b0:	405a      	eors	r2, r3
 80055b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b4:	0e1b      	lsrs	r3, r3, #24
 80055b6:	4926      	ldr	r1, [pc, #152]	; (8005650 <mbedtls_internal_aes_decrypt+0x3c0>)
 80055b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055bc:	4053      	eors	r3, r2
 80055be:	61fb      	str	r3, [r7, #28]
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	1d1a      	adds	r2, r3, #4
 80055c4:	633a      	str	r2, [r7, #48]	; 0x30
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	491d      	ldr	r1, [pc, #116]	; (8005644 <mbedtls_internal_aes_decrypt+0x3b4>)
 80055ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055d2:	405a      	eors	r2, r3
 80055d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d6:	0a1b      	lsrs	r3, r3, #8
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	491b      	ldr	r1, [pc, #108]	; (8005648 <mbedtls_internal_aes_decrypt+0x3b8>)
 80055dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055e0:	405a      	eors	r2, r3
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	0c1b      	lsrs	r3, r3, #16
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	4918      	ldr	r1, [pc, #96]	; (800564c <mbedtls_internal_aes_decrypt+0x3bc>)
 80055ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055ee:	405a      	eors	r2, r3
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	0e1b      	lsrs	r3, r3, #24
 80055f4:	4916      	ldr	r1, [pc, #88]	; (8005650 <mbedtls_internal_aes_decrypt+0x3c0>)
 80055f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80055fa:	4053      	eors	r3, r2
 80055fc:	61bb      	str	r3, [r7, #24]
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	1d1a      	adds	r2, r3, #4
 8005602:	633a      	str	r2, [r7, #48]	; 0x30
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	b2db      	uxtb	r3, r3
 800560a:	490e      	ldr	r1, [pc, #56]	; (8005644 <mbedtls_internal_aes_decrypt+0x3b4>)
 800560c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005610:	405a      	eors	r2, r3
 8005612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005614:	0a1b      	lsrs	r3, r3, #8
 8005616:	b2db      	uxtb	r3, r3
 8005618:	490b      	ldr	r1, [pc, #44]	; (8005648 <mbedtls_internal_aes_decrypt+0x3b8>)
 800561a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800561e:	405a      	eors	r2, r3
 8005620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005622:	0c1b      	lsrs	r3, r3, #16
 8005624:	b2db      	uxtb	r3, r3
 8005626:	4909      	ldr	r1, [pc, #36]	; (800564c <mbedtls_internal_aes_decrypt+0x3bc>)
 8005628:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800562c:	405a      	eors	r2, r3
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	0e1b      	lsrs	r3, r3, #24
 8005632:	4907      	ldr	r1, [pc, #28]	; (8005650 <mbedtls_internal_aes_decrypt+0x3c0>)
 8005634:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005638:	4053      	eors	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
 800563c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563e:	1d1a      	adds	r2, r3, #4
 8005640:	e008      	b.n	8005654 <mbedtls_internal_aes_decrypt+0x3c4>
 8005642:	bf00      	nop
 8005644:	200017b8 	.word	0x200017b8
 8005648:	20001bb8 	.word	0x20001bb8
 800564c:	20001fb8 	.word	0x20001fb8
 8005650:	200023b8 	.word	0x200023b8
 8005654:	633a      	str	r2, [r7, #48]	; 0x30
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	b2db      	uxtb	r3, r3
 800565c:	4979      	ldr	r1, [pc, #484]	; (8005844 <mbedtls_internal_aes_decrypt+0x5b4>)
 800565e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005662:	405a      	eors	r2, r3
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	0a1b      	lsrs	r3, r3, #8
 8005668:	b2db      	uxtb	r3, r3
 800566a:	4977      	ldr	r1, [pc, #476]	; (8005848 <mbedtls_internal_aes_decrypt+0x5b8>)
 800566c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005670:	405a      	eors	r2, r3
 8005672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005674:	0c1b      	lsrs	r3, r3, #16
 8005676:	b2db      	uxtb	r3, r3
 8005678:	4974      	ldr	r1, [pc, #464]	; (800584c <mbedtls_internal_aes_decrypt+0x5bc>)
 800567a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800567e:	405a      	eors	r2, r3
 8005680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005682:	0e1b      	lsrs	r3, r3, #24
 8005684:	4972      	ldr	r1, [pc, #456]	; (8005850 <mbedtls_internal_aes_decrypt+0x5c0>)
 8005686:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800568a:	4053      	eors	r3, r2
 800568c:	613b      	str	r3, [r7, #16]

    X0 = *RK++ ^ \
 800568e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005690:	1d1a      	adds	r2, r3, #4
 8005692:	633a      	str	r2, [r7, #48]	; 0x30
 8005694:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	496e      	ldr	r1, [pc, #440]	; (8005854 <mbedtls_internal_aes_decrypt+0x5c4>)
 800569c:	5c8a      	ldrb	r2, [r1, r2]
    X0 = *RK++ ^ \
 800569e:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	0a1b      	lsrs	r3, r3, #8
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	496b      	ldr	r1, [pc, #428]	; (8005854 <mbedtls_internal_aes_decrypt+0x5c4>)
 80056a8:	5ccb      	ldrb	r3, [r1, r3]
 80056aa:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
 80056ac:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	0c1b      	lsrs	r3, r3, #16
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	4967      	ldr	r1, [pc, #412]	; (8005854 <mbedtls_internal_aes_decrypt+0x5c4>)
 80056b6:	5ccb      	ldrb	r3, [r1, r3]
 80056b8:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
 80056ba:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	0e1b      	lsrs	r3, r3, #24
 80056c0:	4964      	ldr	r1, [pc, #400]	; (8005854 <mbedtls_internal_aes_decrypt+0x5c4>)
 80056c2:	5ccb      	ldrb	r3, [r1, r3]
 80056c4:	061b      	lsls	r3, r3, #24
    X0 = *RK++ ^ \
 80056c6:	4053      	eors	r3, r2
 80056c8:	62fb      	str	r3, [r7, #44]	; 0x2c

    X1 = *RK++ ^ \
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	1d1a      	adds	r2, r3, #4
 80056ce:	633a      	str	r2, [r7, #48]	; 0x30
 80056d0:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	495f      	ldr	r1, [pc, #380]	; (8005854 <mbedtls_internal_aes_decrypt+0x5c4>)
 80056d8:	5c8a      	ldrb	r2, [r1, r2]
    X1 = *RK++ ^ \
 80056da:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	0a1b      	lsrs	r3, r3, #8
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	495c      	ldr	r1, [pc, #368]	; (8005854 <mbedtls_internal_aes_decrypt+0x5c4>)
 80056e4:	5ccb      	ldrb	r3, [r1, r3]
 80056e6:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
 80056e8:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	0c1b      	lsrs	r3, r3, #16
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	4958      	ldr	r1, [pc, #352]	; (8005854 <mbedtls_internal_aes_decrypt+0x5c4>)
 80056f2:	5ccb      	ldrb	r3, [r1, r3]
 80056f4:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
 80056f6:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	0e1b      	lsrs	r3, r3, #24
 80056fc:	4955      	ldr	r1, [pc, #340]	; (8005854 <mbedtls_internal_aes_decrypt+0x5c4>)
 80056fe:	5ccb      	ldrb	r3, [r1, r3]
 8005700:	061b      	lsls	r3, r3, #24
    X1 = *RK++ ^ \
 8005702:	4053      	eors	r3, r2
 8005704:	62bb      	str	r3, [r7, #40]	; 0x28

    X2 = *RK++ ^ \
 8005706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005708:	1d1a      	adds	r2, r3, #4
 800570a:	633a      	str	r2, [r7, #48]	; 0x30
 800570c:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	4950      	ldr	r1, [pc, #320]	; (8005854 <mbedtls_internal_aes_decrypt+0x5c4>)
 8005714:	5c8a      	ldrb	r2, [r1, r2]
    X2 = *RK++ ^ \
 8005716:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	0a1b      	lsrs	r3, r3, #8
 800571c:	b2db      	uxtb	r3, r3
 800571e:	494d      	ldr	r1, [pc, #308]	; (8005854 <mbedtls_internal_aes_decrypt+0x5c4>)
 8005720:	5ccb      	ldrb	r3, [r1, r3]
 8005722:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
 8005724:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	0c1b      	lsrs	r3, r3, #16
 800572a:	b2db      	uxtb	r3, r3
 800572c:	4949      	ldr	r1, [pc, #292]	; (8005854 <mbedtls_internal_aes_decrypt+0x5c4>)
 800572e:	5ccb      	ldrb	r3, [r1, r3]
 8005730:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
 8005732:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	0e1b      	lsrs	r3, r3, #24
 8005738:	4946      	ldr	r1, [pc, #280]	; (8005854 <mbedtls_internal_aes_decrypt+0x5c4>)
 800573a:	5ccb      	ldrb	r3, [r1, r3]
 800573c:	061b      	lsls	r3, r3, #24
    X2 = *RK++ ^ \
 800573e:	4053      	eors	r3, r2
 8005740:	627b      	str	r3, [r7, #36]	; 0x24

    X3 = *RK++ ^ \
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	1d1a      	adds	r2, r3, #4
 8005746:	633a      	str	r2, [r7, #48]	; 0x30
 8005748:	681b      	ldr	r3, [r3, #0]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	4941      	ldr	r1, [pc, #260]	; (8005854 <mbedtls_internal_aes_decrypt+0x5c4>)
 8005750:	5c8a      	ldrb	r2, [r1, r2]
    X3 = *RK++ ^ \
 8005752:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	0a1b      	lsrs	r3, r3, #8
 8005758:	b2db      	uxtb	r3, r3
 800575a:	493e      	ldr	r1, [pc, #248]	; (8005854 <mbedtls_internal_aes_decrypt+0x5c4>)
 800575c:	5ccb      	ldrb	r3, [r1, r3]
 800575e:	021b      	lsls	r3, r3, #8
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
 8005760:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	0c1b      	lsrs	r3, r3, #16
 8005766:	b2db      	uxtb	r3, r3
 8005768:	493a      	ldr	r1, [pc, #232]	; (8005854 <mbedtls_internal_aes_decrypt+0x5c4>)
 800576a:	5ccb      	ldrb	r3, [r1, r3]
 800576c:	041b      	lsls	r3, r3, #16
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
 800576e:	405a      	eors	r2, r3
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	0e1b      	lsrs	r3, r3, #24
 8005774:	4937      	ldr	r1, [pc, #220]	; (8005854 <mbedtls_internal_aes_decrypt+0x5c4>)
 8005776:	5ccb      	ldrb	r3, [r1, r3]
 8005778:	061b      	lsls	r3, r3, #24
    X3 = *RK++ ^ \
 800577a:	4053      	eors	r3, r2
 800577c:	623b      	str	r3, [r7, #32]

    PUT_UINT32_LE( X0, output,  0 );
 800577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005780:	b2da      	uxtb	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	701a      	strb	r2, [r3, #0]
 8005786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005788:	0a1a      	lsrs	r2, r3, #8
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3301      	adds	r3, #1
 800578e:	b2d2      	uxtb	r2, r2
 8005790:	701a      	strb	r2, [r3, #0]
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	0c1a      	lsrs	r2, r3, #16
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	3302      	adds	r3, #2
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	701a      	strb	r2, [r3, #0]
 800579e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a0:	0e1a      	lsrs	r2, r3, #24
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	3303      	adds	r3, #3
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X1, output,  4 );
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3304      	adds	r3, #4
 80057ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	701a      	strb	r2, [r3, #0]
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	0a1a      	lsrs	r2, r3, #8
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3305      	adds	r3, #5
 80057bc:	b2d2      	uxtb	r2, r2
 80057be:	701a      	strb	r2, [r3, #0]
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	0c1a      	lsrs	r2, r3, #16
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3306      	adds	r3, #6
 80057c8:	b2d2      	uxtb	r2, r2
 80057ca:	701a      	strb	r2, [r3, #0]
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	0e1a      	lsrs	r2, r3, #24
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	3307      	adds	r3, #7
 80057d4:	b2d2      	uxtb	r2, r2
 80057d6:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X2, output,  8 );
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	3308      	adds	r3, #8
 80057dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057de:	b2d2      	uxtb	r2, r2
 80057e0:	701a      	strb	r2, [r3, #0]
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	0a1a      	lsrs	r2, r3, #8
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	3309      	adds	r3, #9
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	0c1a      	lsrs	r2, r3, #16
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	330a      	adds	r3, #10
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	701a      	strb	r2, [r3, #0]
 80057fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fc:	0e1a      	lsrs	r2, r3, #24
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	330b      	adds	r3, #11
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( X3, output, 12 );
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	330c      	adds	r3, #12
 800580a:	6a3a      	ldr	r2, [r7, #32]
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	701a      	strb	r2, [r3, #0]
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	0a1a      	lsrs	r2, r3, #8
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	330d      	adds	r3, #13
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	701a      	strb	r2, [r3, #0]
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	0c1a      	lsrs	r2, r3, #16
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	330e      	adds	r3, #14
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	0e1a      	lsrs	r2, r3, #24
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	330f      	adds	r3, #15
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	701a      	strb	r2, [r3, #0]

    return( 0 );
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	373c      	adds	r7, #60	; 0x3c
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	200017b8 	.word	0x200017b8
 8005848:	20001bb8 	.word	0x20001bb8
 800584c:	20001fb8 	.word	0x20001fb8
 8005850:	200023b8 	.word	0x200023b8
 8005854:	200016b8 	.word	0x200016b8

08005858 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d106      	bne.n	800587a <mbedtls_aes_crypt_ecb+0x22>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f7ff fa29 	bl	8004cc8 <mbedtls_internal_aes_encrypt>
 8005876:	4603      	mov	r3, r0
 8005878:	e005      	b.n	8005886 <mbedtls_aes_crypt_ecb+0x2e>
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f7ff fd06 	bl	8005290 <mbedtls_internal_aes_decrypt>
 8005884:	4603      	mov	r3, r0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	0000      	movs	r0, r0

08005890 <Reset_Handler>:
 8005890:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005892:	e003      	b.n	800589c <LoopCopyDataInit>

08005894 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005894:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <LoopForever+0x2>)
	ldr	r3, [r3, r1]
 8005896:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005898:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800589a:	3104      	adds	r1, #4

0800589c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800589c:	480a      	ldr	r0, [pc, #40]	; (80058c8 <LoopForever+0x6>)
	ldr	r3, =_edata
 800589e:	4b0b      	ldr	r3, [pc, #44]	; (80058cc <LoopForever+0xa>)
	adds	r2, r0, r1
 80058a0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80058a2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80058a4:	d3f6      	bcc.n	8005894 <CopyDataInit>
	ldr	r2, =_sbss
 80058a6:	4a0a      	ldr	r2, [pc, #40]	; (80058d0 <LoopForever+0xe>)
	b	LoopFillZerobss
 80058a8:	e002      	b.n	80058b0 <LoopFillZerobss>

080058aa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs r3, #0
 80058aa:	2300      	movs	r3, #0
 	str  r3, [r2]
 80058ac:	6013      	str	r3, [r2, #0]
	adds r2, r2, #4
 80058ae:	3204      	adds	r2, #4

080058b0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80058b0:	4b08      	ldr	r3, [pc, #32]	; (80058d4 <LoopForever+0x12>)
	cmp	r2, r3
 80058b2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80058b4:	d3f9      	bcc.n	80058aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80058b6:	f3af 8000 	nop.w
/* Call static constructors */
    bl __libc_init_array
 80058ba:	f000 f80f 	bl	80058dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80058be:	f7fb fa4f 	bl	8000d60 <main>

080058c2 <LoopForever>:

LoopForever:
    b LoopForever
 80058c2:	e7fe      	b.n	80058c2 <LoopForever>
 80058c4:	08005b20 	.word	0x08005b20
 80058c8:	20000000 	.word	0x20000000
 80058cc:	20000464 	.word	0x20000464
 80058d0:	20000464 	.word	0x20000464
 80058d4:	20002990 	.word	0x20002990

080058d8 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80058d8:	e7fe      	b.n	80058d8 <BusFault_Handler>
 80058da:	0000      	movs	r0, r0

080058dc <__libc_init_array>:
 80058dc:	b570      	push	{r4, r5, r6, lr}
 80058de:	4e0d      	ldr	r6, [pc, #52]	; (8005914 <__libc_init_array+0x38>)
 80058e0:	4d0d      	ldr	r5, [pc, #52]	; (8005918 <__libc_init_array+0x3c>)
 80058e2:	1b76      	subs	r6, r6, r5
 80058e4:	10b6      	asrs	r6, r6, #2
 80058e6:	d006      	beq.n	80058f6 <__libc_init_array+0x1a>
 80058e8:	2400      	movs	r4, #0
 80058ea:	3401      	adds	r4, #1
 80058ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f0:	4798      	blx	r3
 80058f2:	42a6      	cmp	r6, r4
 80058f4:	d1f9      	bne.n	80058ea <__libc_init_array+0xe>
 80058f6:	4e09      	ldr	r6, [pc, #36]	; (800591c <__libc_init_array+0x40>)
 80058f8:	4d09      	ldr	r5, [pc, #36]	; (8005920 <__libc_init_array+0x44>)
 80058fa:	1b76      	subs	r6, r6, r5
 80058fc:	f000 f8ea 	bl	8005ad4 <_init>
 8005900:	10b6      	asrs	r6, r6, #2
 8005902:	d006      	beq.n	8005912 <__libc_init_array+0x36>
 8005904:	2400      	movs	r4, #0
 8005906:	3401      	adds	r4, #1
 8005908:	f855 3b04 	ldr.w	r3, [r5], #4
 800590c:	4798      	blx	r3
 800590e:	42a6      	cmp	r6, r4
 8005910:	d1f9      	bne.n	8005906 <__libc_init_array+0x2a>
 8005912:	bd70      	pop	{r4, r5, r6, pc}
 8005914:	08005b14 	.word	0x08005b14
 8005918:	08005b14 	.word	0x08005b14
 800591c:	08005b1c 	.word	0x08005b1c
 8005920:	08005b14 	.word	0x08005b14

08005924 <memset>:
 8005924:	b4f0      	push	{r4, r5, r6, r7}
 8005926:	0786      	lsls	r6, r0, #30
 8005928:	d043      	beq.n	80059b2 <memset+0x8e>
 800592a:	1e54      	subs	r4, r2, #1
 800592c:	2a00      	cmp	r2, #0
 800592e:	d03e      	beq.n	80059ae <memset+0x8a>
 8005930:	b2ca      	uxtb	r2, r1
 8005932:	4603      	mov	r3, r0
 8005934:	e002      	b.n	800593c <memset+0x18>
 8005936:	f114 34ff 	adds.w	r4, r4, #4294967295
 800593a:	d338      	bcc.n	80059ae <memset+0x8a>
 800593c:	f803 2b01 	strb.w	r2, [r3], #1
 8005940:	079d      	lsls	r5, r3, #30
 8005942:	d1f8      	bne.n	8005936 <memset+0x12>
 8005944:	2c03      	cmp	r4, #3
 8005946:	d92b      	bls.n	80059a0 <memset+0x7c>
 8005948:	b2cd      	uxtb	r5, r1
 800594a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800594e:	2c0f      	cmp	r4, #15
 8005950:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005954:	d916      	bls.n	8005984 <memset+0x60>
 8005956:	f1a4 0710 	sub.w	r7, r4, #16
 800595a:	093f      	lsrs	r7, r7, #4
 800595c:	f103 0620 	add.w	r6, r3, #32
 8005960:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8005964:	f103 0210 	add.w	r2, r3, #16
 8005968:	e942 5504 	strd	r5, r5, [r2, #-16]
 800596c:	e942 5502 	strd	r5, r5, [r2, #-8]
 8005970:	3210      	adds	r2, #16
 8005972:	42b2      	cmp	r2, r6
 8005974:	d1f8      	bne.n	8005968 <memset+0x44>
 8005976:	f004 040f 	and.w	r4, r4, #15
 800597a:	3701      	adds	r7, #1
 800597c:	2c03      	cmp	r4, #3
 800597e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8005982:	d90d      	bls.n	80059a0 <memset+0x7c>
 8005984:	461e      	mov	r6, r3
 8005986:	4622      	mov	r2, r4
 8005988:	3a04      	subs	r2, #4
 800598a:	2a03      	cmp	r2, #3
 800598c:	f846 5b04 	str.w	r5, [r6], #4
 8005990:	d8fa      	bhi.n	8005988 <memset+0x64>
 8005992:	1f22      	subs	r2, r4, #4
 8005994:	f022 0203 	bic.w	r2, r2, #3
 8005998:	3204      	adds	r2, #4
 800599a:	4413      	add	r3, r2
 800599c:	f004 0403 	and.w	r4, r4, #3
 80059a0:	b12c      	cbz	r4, 80059ae <memset+0x8a>
 80059a2:	b2c9      	uxtb	r1, r1
 80059a4:	441c      	add	r4, r3
 80059a6:	f803 1b01 	strb.w	r1, [r3], #1
 80059aa:	429c      	cmp	r4, r3
 80059ac:	d1fb      	bne.n	80059a6 <memset+0x82>
 80059ae:	bcf0      	pop	{r4, r5, r6, r7}
 80059b0:	4770      	bx	lr
 80059b2:	4614      	mov	r4, r2
 80059b4:	4603      	mov	r3, r0
 80059b6:	e7c5      	b.n	8005944 <memset+0x20>

080059b8 <register_fini>:
 80059b8:	4b02      	ldr	r3, [pc, #8]	; (80059c4 <register_fini+0xc>)
 80059ba:	b113      	cbz	r3, 80059c2 <register_fini+0xa>
 80059bc:	4802      	ldr	r0, [pc, #8]	; (80059c8 <register_fini+0x10>)
 80059be:	f000 b805 	b.w	80059cc <atexit>
 80059c2:	4770      	bx	lr
 80059c4:	00000000 	.word	0x00000000
 80059c8:	080059d9 	.word	0x080059d9

080059cc <atexit>:
 80059cc:	2300      	movs	r3, #0
 80059ce:	4601      	mov	r1, r0
 80059d0:	461a      	mov	r2, r3
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 b81e 	b.w	8005a14 <__register_exitproc>

080059d8 <__libc_fini_array>:
 80059d8:	b538      	push	{r3, r4, r5, lr}
 80059da:	4c0a      	ldr	r4, [pc, #40]	; (8005a04 <__libc_fini_array+0x2c>)
 80059dc:	4d0a      	ldr	r5, [pc, #40]	; (8005a08 <__libc_fini_array+0x30>)
 80059de:	1b64      	subs	r4, r4, r5
 80059e0:	10a4      	asrs	r4, r4, #2
 80059e2:	d00a      	beq.n	80059fa <__libc_fini_array+0x22>
 80059e4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80059e8:	3b01      	subs	r3, #1
 80059ea:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80059ee:	3c01      	subs	r4, #1
 80059f0:	f855 3904 	ldr.w	r3, [r5], #-4
 80059f4:	4798      	blx	r3
 80059f6:	2c00      	cmp	r4, #0
 80059f8:	d1f9      	bne.n	80059ee <__libc_fini_array+0x16>
 80059fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059fe:	f000 b86f 	b.w	8005ae0 <_fini>
 8005a02:	bf00      	nop
 8005a04:	08005b20 	.word	0x08005b20
 8005a08:	08005b1c 	.word	0x08005b1c

08005a0c <__retarget_lock_acquire_recursive>:
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop

08005a10 <__retarget_lock_release_recursive>:
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop

08005a14 <__register_exitproc>:
 8005a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a18:	4d2b      	ldr	r5, [pc, #172]	; (8005ac8 <__register_exitproc+0xb4>)
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	6828      	ldr	r0, [r5, #0]
 8005a1e:	4698      	mov	r8, r3
 8005a20:	460f      	mov	r7, r1
 8005a22:	4691      	mov	r9, r2
 8005a24:	f7ff fff2 	bl	8005a0c <__retarget_lock_acquire_recursive>
 8005a28:	4b28      	ldr	r3, [pc, #160]	; (8005acc <__register_exitproc+0xb8>)
 8005a2a:	681c      	ldr	r4, [r3, #0]
 8005a2c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d03d      	beq.n	8005ab0 <__register_exitproc+0x9c>
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	2a1f      	cmp	r2, #31
 8005a38:	dc0d      	bgt.n	8005a56 <__register_exitproc+0x42>
 8005a3a:	f102 0c01 	add.w	ip, r2, #1
 8005a3e:	bb16      	cbnz	r6, 8005a86 <__register_exitproc+0x72>
 8005a40:	3202      	adds	r2, #2
 8005a42:	f8c3 c004 	str.w	ip, [r3, #4]
 8005a46:	6828      	ldr	r0, [r5, #0]
 8005a48:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 8005a4c:	f7ff ffe0 	bl	8005a10 <__retarget_lock_release_recursive>
 8005a50:	2000      	movs	r0, #0
 8005a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a56:	4b1e      	ldr	r3, [pc, #120]	; (8005ad0 <__register_exitproc+0xbc>)
 8005a58:	b37b      	cbz	r3, 8005aba <__register_exitproc+0xa6>
 8005a5a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005a5e:	f3af 8000 	nop.w
 8005a62:	4603      	mov	r3, r0
 8005a64:	b348      	cbz	r0, 8005aba <__register_exitproc+0xa6>
 8005a66:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	e9c0 2100 	strd	r2, r1, [r0]
 8005a70:	f04f 0c01 	mov.w	ip, #1
 8005a74:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
 8005a78:	460a      	mov	r2, r1
 8005a7a:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8005a7e:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
 8005a82:	2e00      	cmp	r6, #0
 8005a84:	d0dc      	beq.n	8005a40 <__register_exitproc+0x2c>
 8005a86:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8005a8a:	2401      	movs	r4, #1
 8005a8c:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8005a90:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
 8005a94:	4094      	lsls	r4, r2
 8005a96:	4320      	orrs	r0, r4
 8005a98:	2e02      	cmp	r6, #2
 8005a9a:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 8005a9e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8005aa2:	d1cd      	bne.n	8005a40 <__register_exitproc+0x2c>
 8005aa4:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 8005aa8:	430c      	orrs	r4, r1
 8005aaa:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
 8005aae:	e7c7      	b.n	8005a40 <__register_exitproc+0x2c>
 8005ab0:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
 8005ab4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 8005ab8:	e7bc      	b.n	8005a34 <__register_exitproc+0x20>
 8005aba:	6828      	ldr	r0, [r5, #0]
 8005abc:	f7ff ffa8 	bl	8005a10 <__retarget_lock_release_recursive>
 8005ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac4:	e7c5      	b.n	8005a52 <__register_exitproc+0x3e>
 8005ac6:	bf00      	nop
 8005ac8:	20000460 	.word	0x20000460
 8005acc:	08005b10 	.word	0x08005b10
 8005ad0:	00000000 	.word	0x00000000

08005ad4 <_init>:
 8005ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad6:	bf00      	nop
 8005ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ada:	bc08      	pop	{r3}
 8005adc:	469e      	mov	lr, r3
 8005ade:	4770      	bx	lr

08005ae0 <_fini>:
 8005ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae2:	bf00      	nop
 8005ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ae6:	bc08      	pop	{r3}
 8005ae8:	469e      	mov	lr, r3
 8005aea:	4770      	bx	lr
